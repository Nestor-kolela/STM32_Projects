
Ethernet_STM32_NUCLEO_BIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009704  08009704  0000a704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  0000a828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800982c  0800982c  0000a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009830  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003418  20000060  08009890  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003478  08009890  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d320  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058f5  00000000  00000000  000383b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002618  00000000  00000000  0003dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d66  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000076e1  00000000  00000000  0004202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d25d  00000000  00000000  0004970f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00144600  00000000  00000000  0007696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001baf6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a790  00000000  00000000  001bafb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001c5740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080096ec 	.word	0x080096ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080096ec 	.word	0x080096ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b97e 	b.w	8000564 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14d      	bne.n	8000328 <__udivmoddi4+0xa8>
 800028c:	428a      	cmp	r2, r1
 800028e:	460f      	mov	r7, r1
 8000290:	4684      	mov	ip, r0
 8000292:	4696      	mov	lr, r2
 8000294:	fab2 f382 	clz	r3, r2
 8000298:	d960      	bls.n	800035c <__udivmoddi4+0xdc>
 800029a:	b14b      	cbz	r3, 80002b0 <__udivmoddi4+0x30>
 800029c:	fa02 fe03 	lsl.w	lr, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002aa:	fa20 f202 	lsr.w	r2, r0, r2
 80002ae:	4317      	orrs	r7, r2
 80002b0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002b4:	fa1f f48e 	uxth.w	r4, lr
 80002b8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002bc:	fbb7 f1f6 	udiv	r1, r7, r6
 80002c0:	fb06 7711 	mls	r7, r6, r1, r7
 80002c4:	fb01 f004 	mul.w	r0, r1, r4
 80002c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002d0:	eb1e 0202 	adds.w	r2, lr, r2
 80002d4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x60>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 812d 	bhi.w	800053a <__udivmoddi4+0x2ba>
 80002e0:	4639      	mov	r1, r7
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fa1f fc8c 	uxth.w	ip, ip
 80002e8:	fbb2 f0f6 	udiv	r0, r2, r6
 80002ec:	fb06 2210 	mls	r2, r6, r0, r2
 80002f0:	fb00 f404 	mul.w	r4, r0, r4
 80002f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002f8:	4564      	cmp	r4, ip
 80002fa:	d908      	bls.n	800030e <__udivmoddi4+0x8e>
 80002fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000300:	f100 32ff 	add.w	r2, r0, #4294967295
 8000304:	d202      	bcs.n	800030c <__udivmoddi4+0x8c>
 8000306:	4564      	cmp	r4, ip
 8000308:	f200 811a 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 800030c:	4610      	mov	r0, r2
 800030e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000312:	ebac 0c04 	sub.w	ip, ip, r4
 8000316:	2100      	movs	r1, #0
 8000318:	b125      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031a:	fa2c f303 	lsr.w	r3, ip, r3
 800031e:	2200      	movs	r2, #0
 8000320:	e9c5 3200 	strd	r3, r2, [r5]
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	428b      	cmp	r3, r1
 800032a:	d905      	bls.n	8000338 <__udivmoddi4+0xb8>
 800032c:	b10d      	cbz	r5, 8000332 <__udivmoddi4+0xb2>
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	2100      	movs	r1, #0
 8000334:	4608      	mov	r0, r1
 8000336:	e7f5      	b.n	8000324 <__udivmoddi4+0xa4>
 8000338:	fab3 f183 	clz	r1, r3
 800033c:	2900      	cmp	r1, #0
 800033e:	d14d      	bne.n	80003dc <__udivmoddi4+0x15c>
 8000340:	42a3      	cmp	r3, r4
 8000342:	f0c0 80f2 	bcc.w	800052a <__udivmoddi4+0x2aa>
 8000346:	4290      	cmp	r0, r2
 8000348:	f080 80ef 	bcs.w	800052a <__udivmoddi4+0x2aa>
 800034c:	4606      	mov	r6, r0
 800034e:	4623      	mov	r3, r4
 8000350:	4608      	mov	r0, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e6      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000356:	e9c5 6300 	strd	r6, r3, [r5]
 800035a:	e7e3      	b.n	8000324 <__udivmoddi4+0xa4>
 800035c:	2b00      	cmp	r3, #0
 800035e:	f040 80a2 	bne.w	80004a6 <__udivmoddi4+0x226>
 8000362:	1a8a      	subs	r2, r1, r2
 8000364:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000368:	fa1f f68e 	uxth.w	r6, lr
 800036c:	2101      	movs	r1, #1
 800036e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000372:	fb07 2014 	mls	r0, r7, r4, r2
 8000376:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800037a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037e:	fb06 f004 	mul.w	r0, r6, r4
 8000382:	4290      	cmp	r0, r2
 8000384:	d90f      	bls.n	80003a6 <__udivmoddi4+0x126>
 8000386:	eb1e 0202 	adds.w	r2, lr, r2
 800038a:	f104 38ff 	add.w	r8, r4, #4294967295
 800038e:	bf2c      	ite	cs
 8000390:	f04f 0901 	movcs.w	r9, #1
 8000394:	f04f 0900 	movcc.w	r9, #0
 8000398:	4290      	cmp	r0, r2
 800039a:	d903      	bls.n	80003a4 <__udivmoddi4+0x124>
 800039c:	f1b9 0f00 	cmp.w	r9, #0
 80003a0:	f000 80c8 	beq.w	8000534 <__udivmoddi4+0x2b4>
 80003a4:	4644      	mov	r4, r8
 80003a6:	1a12      	subs	r2, r2, r0
 80003a8:	fa1f fc8c 	uxth.w	ip, ip
 80003ac:	fbb2 f0f7 	udiv	r0, r2, r7
 80003b0:	fb07 2210 	mls	r2, r7, r0, r2
 80003b4:	fb00 f606 	mul.w	r6, r0, r6
 80003b8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003bc:	4566      	cmp	r6, ip
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x152>
 80003c0:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c8:	d202      	bcs.n	80003d0 <__udivmoddi4+0x150>
 80003ca:	4566      	cmp	r6, ip
 80003cc:	f200 80bb 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 80003d0:	4610      	mov	r0, r2
 80003d2:	ebac 0c06 	sub.w	ip, ip, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	e79d      	b.n	8000318 <__udivmoddi4+0x98>
 80003dc:	f1c1 0620 	rsb	r6, r1, #32
 80003e0:	408b      	lsls	r3, r1
 80003e2:	fa04 fe01 	lsl.w	lr, r4, r1
 80003e6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ea:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ee:	40f4      	lsrs	r4, r6
 80003f0:	408a      	lsls	r2, r1
 80003f2:	431f      	orrs	r7, r3
 80003f4:	ea4e 030c 	orr.w	r3, lr, ip
 80003f8:	fa00 fe01 	lsl.w	lr, r0, r1
 80003fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000400:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb4 f0f8 	udiv	r0, r4, r8
 800040c:	fb08 4410 	mls	r4, r8, r0, r4
 8000410:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000414:	fb00 f90c 	mul.w	r9, r0, ip
 8000418:	45a1      	cmp	r9, r4
 800041a:	d90e      	bls.n	800043a <__udivmoddi4+0x1ba>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000422:	bf2c      	ite	cs
 8000424:	f04f 0b01 	movcs.w	fp, #1
 8000428:	f04f 0b00 	movcc.w	fp, #0
 800042c:	45a1      	cmp	r9, r4
 800042e:	d903      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000430:	f1bb 0f00 	cmp.w	fp, #0
 8000434:	f000 8093 	beq.w	800055e <__udivmoddi4+0x2de>
 8000438:	4650      	mov	r0, sl
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f8 	udiv	r3, r4, r8
 8000446:	fb08 4413 	mls	r4, r8, r3, r4
 800044a:	fb03 fc0c 	mul.w	ip, r3, ip
 800044e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000452:	45a4      	cmp	ip, r4
 8000454:	d906      	bls.n	8000464 <__udivmoddi4+0x1e4>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 38ff 	add.w	r8, r3, #4294967295
 800045c:	d201      	bcs.n	8000462 <__udivmoddi4+0x1e2>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d87a      	bhi.n	8000558 <__udivmoddi4+0x2d8>
 8000462:	4643      	mov	r3, r8
 8000464:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000468:	eba4 040c 	sub.w	r4, r4, ip
 800046c:	fba0 9802 	umull	r9, r8, r0, r2
 8000470:	4544      	cmp	r4, r8
 8000472:	46cc      	mov	ip, r9
 8000474:	4643      	mov	r3, r8
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0x1fe>
 8000478:	d106      	bne.n	8000488 <__udivmoddi4+0x208>
 800047a:	45ce      	cmp	lr, r9
 800047c:	d204      	bcs.n	8000488 <__udivmoddi4+0x208>
 800047e:	3801      	subs	r0, #1
 8000480:	ebb9 0c02 	subs.w	ip, r9, r2
 8000484:	eb68 0307 	sbc.w	r3, r8, r7
 8000488:	b15d      	cbz	r5, 80004a2 <__udivmoddi4+0x222>
 800048a:	ebbe 020c 	subs.w	r2, lr, ip
 800048e:	eb64 0403 	sbc.w	r4, r4, r3
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	40cc      	lsrs	r4, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	e9c5 6400 	strd	r6, r4, [r5]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e73e      	b.n	8000324 <__udivmoddi4+0xa4>
 80004a6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004aa:	f1c3 0120 	rsb	r1, r3, #32
 80004ae:	fa04 f203 	lsl.w	r2, r4, r3
 80004b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004bc:	fa20 f101 	lsr.w	r1, r0, r1
 80004c0:	fa1f f68e 	uxth.w	r6, lr
 80004c4:	fbb4 f0f7 	udiv	r0, r4, r7
 80004c8:	430a      	orrs	r2, r1
 80004ca:	fb07 4410 	mls	r4, r7, r0, r4
 80004ce:	0c11      	lsrs	r1, r2, #16
 80004d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004d4:	fb00 f406 	mul.w	r4, r0, r6
 80004d8:	428c      	cmp	r4, r1
 80004da:	d90e      	bls.n	80004fa <__udivmoddi4+0x27a>
 80004dc:	eb1e 0101 	adds.w	r1, lr, r1
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	bf2c      	ite	cs
 80004e6:	f04f 0901 	movcs.w	r9, #1
 80004ea:	f04f 0900 	movcc.w	r9, #0
 80004ee:	428c      	cmp	r4, r1
 80004f0:	d902      	bls.n	80004f8 <__udivmoddi4+0x278>
 80004f2:	f1b9 0f00 	cmp.w	r9, #0
 80004f6:	d02c      	beq.n	8000552 <__udivmoddi4+0x2d2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	1b09      	subs	r1, r1, r4
 80004fc:	b292      	uxth	r2, r2
 80004fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000502:	fb07 1114 	mls	r1, r7, r4, r1
 8000506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050a:	fb04 f106 	mul.w	r1, r4, r6
 800050e:	4291      	cmp	r1, r2
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x2a2>
 8000512:	eb1e 0202 	adds.w	r2, lr, r2
 8000516:	f104 38ff 	add.w	r8, r4, #4294967295
 800051a:	d201      	bcs.n	8000520 <__udivmoddi4+0x2a0>
 800051c:	4291      	cmp	r1, r2
 800051e:	d815      	bhi.n	800054c <__udivmoddi4+0x2cc>
 8000520:	4644      	mov	r4, r8
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000528:	e721      	b.n	800036e <__udivmoddi4+0xee>
 800052a:	1a86      	subs	r6, r0, r2
 800052c:	eb64 0303 	sbc.w	r3, r4, r3
 8000530:	2001      	movs	r0, #1
 8000532:	e70e      	b.n	8000352 <__udivmoddi4+0xd2>
 8000534:	3c02      	subs	r4, #2
 8000536:	4472      	add	r2, lr
 8000538:	e735      	b.n	80003a6 <__udivmoddi4+0x126>
 800053a:	3902      	subs	r1, #2
 800053c:	4472      	add	r2, lr
 800053e:	e6d0      	b.n	80002e2 <__udivmoddi4+0x62>
 8000540:	44f4      	add	ip, lr
 8000542:	3802      	subs	r0, #2
 8000544:	e6e3      	b.n	800030e <__udivmoddi4+0x8e>
 8000546:	44f4      	add	ip, lr
 8000548:	3802      	subs	r0, #2
 800054a:	e742      	b.n	80003d2 <__udivmoddi4+0x152>
 800054c:	3c02      	subs	r4, #2
 800054e:	4472      	add	r2, lr
 8000550:	e7e7      	b.n	8000522 <__udivmoddi4+0x2a2>
 8000552:	3802      	subs	r0, #2
 8000554:	4471      	add	r1, lr
 8000556:	e7d0      	b.n	80004fa <__udivmoddi4+0x27a>
 8000558:	3b02      	subs	r3, #2
 800055a:	443c      	add	r4, r7
 800055c:	e782      	b.n	8000464 <__udivmoddi4+0x1e4>
 800055e:	3802      	subs	r0, #2
 8000560:	443c      	add	r4, r7
 8000562:	e76a      	b.n	800043a <__udivmoddi4+0x1ba>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vBlinky>:
#include "semphr.h"
#include <math.h>


void vBlinky(void * pvParameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //LED_BLUE_Pin
 8000570:	2180      	movs	r1, #128	@ 0x80
 8000572:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <vBlinky+0x48>)
 8000574:	f002 f998 	bl	80028a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <vBlinky+0x4c>)
 800057c:	f002 f994 	bl	80028a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	480c      	ldr	r0, [pc, #48]	@ (80005b8 <vBlinky+0x50>)
 8000586:	f002 f98f 	bl	80028a8 <HAL_GPIO_TogglePin>
	while(1)
	{
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //LED_BLUE_Pin
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <vBlinky+0x48>)
 800058e:	f002 f98b 	bl	80028a8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000592:	2180      	movs	r1, #128	@ 0x80
 8000594:	4807      	ldr	r0, [pc, #28]	@ (80005b4 <vBlinky+0x4c>)
 8000596:	f002 f987 	bl	80028a8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800059a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059e:	4806      	ldr	r0, [pc, #24]	@ (80005b8 <vBlinky+0x50>)
 80005a0:	f002 f982 	bl	80028a8 <HAL_GPIO_TogglePin>
		vTaskDelay(100 / portTICK_RATE_MS);
 80005a4:	2064      	movs	r0, #100	@ 0x64
 80005a6:	f006 fec1 	bl	800732c <vTaskDelay>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //LED_BLUE_Pin
 80005aa:	bf00      	nop
 80005ac:	e7ed      	b.n	800058a <vBlinky+0x22>
 80005ae:	bf00      	nop
 80005b0:	42020400 	.word	0x42020400
 80005b4:	42020800 	.word	0x42020800
 80005b8:	42020000 	.word	0x42020000

080005bc <vDebug>:
SemaphoreHandle_t xUartMutex = NULL;

//exten variables...
extern UART_HandleTypeDef hlpuart1;
void vDebug( void * pvParameters )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	xUartMutex = xSemaphoreCreateMutex();
 80005c4:	2001      	movs	r0, #1
 80005c6:	f006 f89d 	bl	8006704 <xQueueCreateMutex>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a22      	ldr	r2, [pc, #136]	@ (8000658 <vDebug+0x9c>)
 80005ce:	6013      	str	r3, [r2, #0]

	if(xUartMutex == NULL)
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <vDebug+0x9c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <vDebug+0x20>
	{
		Error_Handler(); //error....
 80005d8:	f000 fbae 	bl	8000d38 <Error_Handler>
	}
	uint8_t tempBuf[64] = {0};
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	223c      	movs	r2, #60	@ 0x3c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f008 fb97 	bl	8008d1c <memset>
	size_t bytesAvailable = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	xSemaphoreGive(xUartMutex);
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <vDebug+0x9c>)
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	f006 f89a 	bl	8006734 <xQueueGenericSend>

		//Send Data.

		//Return Semaphore

		bytesAvailable = xPortGetFreeHeapSize();
 8000600:	f008 faa4 	bl	8008b4c <xPortGetFreeHeapSize>
 8000604:	64f8      	str	r0, [r7, #76]	@ 0x4c
		sprintf((char * ) tempBuf, "Free bytes in heap is %u\r\n", bytesAvailable);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800060c:	4913      	ldr	r1, [pc, #76]	@ (800065c <vDebug+0xa0>)
 800060e:	4618      	mov	r0, r3
 8000610:	f008 fb64 	bl	8008cdc <siprintf>
		size_t strLength = strlen((char *) tempBuf);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fe11 	bl	8000240 <strlen>
 800061e:	64b8      	str	r0, [r7, #72]	@ 0x48
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
 8000620:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <vDebug+0x9c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	4618      	mov	r0, r3
 800062a:	f006 fa80 	bl	8006b2e <xQueueSemaphoreTake>
		HAL_UART_Transmit(&hlpuart1, (const uint8_t *) tempBuf, strLength, 100);
 800062e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000630:	b29a      	uxth	r2, r3
 8000632:	f107 0108 	add.w	r1, r7, #8
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	4809      	ldr	r0, [pc, #36]	@ (8000660 <vDebug+0xa4>)
 800063a:	f004 fd31 	bl	80050a0 <HAL_UART_Transmit>
		xSemaphoreGive(xUartMutex);
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <vDebug+0x9c>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	f006 f874 	bl	8006734 <xQueueGenericSend>
		vTaskDelay(100 / portTICK_RATE_MS);
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f006 fe6d 	bl	800732c <vTaskDelay>
	{
 8000652:	bf00      	nop
 8000654:	e7d4      	b.n	8000600 <vDebug+0x44>
 8000656:	bf00      	nop
 8000658:	2000007c 	.word	0x2000007c
 800065c:	08009704 	.word	0x08009704
 8000660:	200000e8 	.word	0x200000e8

08000664 <vEthernetTask>:
#include "spiDriver.h"


extern xQueueHandle ethQueue;
void vEthernetTask(void * pvParameters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	//eth_reg reagRegister = {.address = 0x00, .data = 0x00};
	//MX_LWIP_Init();
	while(1)
	{
		vTaskDelay(500 / portTICK_PERIOD_MS);
 800066c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000670:	f006 fe5c 	bl	800732c <vTaskDelay>
 8000674:	e7fa      	b.n	800066c <vEthernetTask+0x8>
	...

08000678 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000684:	4907      	ldr	r1, [pc, #28]	@ (80006a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800068e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4013      	ands	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80006b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80006b4:	4907      	ldr	r1, [pc, #28]	@ (80006d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <LL_APB1_GRP2_EnableClock+0x2c>)
 80006be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fe90 	bl	8001402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f843 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 fa5f 	bl	8000ba8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ea:	f000 f8a1 	bl	8000830 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80006ee:	f000 f929 	bl	8000944 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80006f2:	f000 f973 	bl	80009dc <MX_RTC_Init>
  MX_UCPD1_Init();
 80006f6:	f000 f9f9 	bl	8000aec <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80006fa:	f000 fa2d 	bl	8000b58 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80006fe:	f000 f9b7 	bl	8000a70 <MX_SPI1_Init>
  MX_ICACHE_Init();
 8000702:	f000 f90b 	bl	800091c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000706:	f005 fdad 	bl	8006264 <osKernelInitialize>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vDebug	,"DebugTask" 		,128, NULL, 2, NULL);
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2302      	movs	r3, #2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	490f      	ldr	r1, [pc, #60]	@ (8000754 <main+0x7c>)
 8000718:	480f      	ldr	r0, [pc, #60]	@ (8000758 <main+0x80>)
 800071a:	f006 fcb7 	bl	800708c <xTaskCreate>
  xTaskCreate(vBlinky	,"BlinkyTask"		,128, NULL, 1, NULL);
 800071e:	2300      	movs	r3, #0
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2301      	movs	r3, #1
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	490c      	ldr	r1, [pc, #48]	@ (800075c <main+0x84>)
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <main+0x88>)
 800072e:	f006 fcad 	bl	800708c <xTaskCreate>
  xTaskCreate(vEthernetTask, "EthernetTask"	,128, NULL, 3, NULL);
 8000732:	2300      	movs	r3, #0
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	2303      	movs	r3, #3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	4909      	ldr	r1, [pc, #36]	@ (8000764 <main+0x8c>)
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <main+0x90>)
 8000742:	f006 fca3 	bl	800708c <xTaskCreate>

  vTaskStartScheduler();
 8000746:	f006 fe17 	bl	8007378 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074a:	f005 fdaf 	bl	80062ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x76>
 8000752:	bf00      	nop
 8000754:	0800972c 	.word	0x0800972c
 8000758:	080005bd 	.word	0x080005bd
 800075c:	08009738 	.word	0x08009738
 8000760:	08000569 	.word	0x08000569
 8000764:	08009744 	.word	0x08009744
 8000768:	08000665 	.word	0x08000665

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b098      	sub	sp, #96	@ 0x60
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0318 	add.w	r3, r7, #24
 8000776:	2248      	movs	r2, #72	@ 0x48
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f008 face 	bl	8008d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800078e:	2000      	movs	r0, #0
 8000790:	f002 f9f6 	bl	8002b80 <HAL_PWREx_ControlVoltageScaling>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800079a:	f000 facd 	bl	8000d38 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079e:	f002 f9d1 	bl	8002b44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a2:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xc0>)
 80007a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007a8:	4a20      	ldr	r2, [pc, #128]	@ (800082c <SystemClock_Config+0xc0>)
 80007aa:	f023 0318 	bic.w	r3, r3, #24
 80007ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80007b2:	2334      	movs	r3, #52	@ 0x34
 80007b4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b6:	2381      	movs	r3, #129	@ 0x81
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c6:	2360      	movs	r3, #96	@ 0x60
 80007c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007ce:	2301      	movs	r3, #1
 80007d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80007d6:	2337      	movs	r3, #55	@ 0x37
 80007d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007da:	2307      	movs	r3, #7
 80007dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fa58 	bl	8002ca0 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007f6:	f000 fa9f 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2303      	movs	r3, #3
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ff1a 	bl	800364c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800081e:	f000 fa8b 	bl	8000d38 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3760      	adds	r7, #96	@ 0x60
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000854:	4a2f      	ldr	r2, [pc, #188]	@ (8000914 <MX_ADC1_Init+0xe4>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000858:	4b2d      	ldr	r3, [pc, #180]	@ (8000910 <MX_ADC1_Init+0xe0>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_ADC1_Init+0xe0>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000872:	2204      	movs	r2, #4
 8000874:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_ADC1_Init+0xe0>)
 800087e:	2200      	movs	r2, #0
 8000880:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_ADC1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_ADC1_Init+0xe0>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089c:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_ADC1_Init+0xe0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_ADC1_Init+0xe0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_ADC1_Init+0xe0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <MX_ADC1_Init+0xe0>)
 80008b4:	f000 ff80 	bl	80017b8 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008be:	f000 fa3b 	bl	8000d38 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4810      	ldr	r0, [pc, #64]	@ (8000910 <MX_ADC1_Init+0xe0>)
 80008ce:	f001 fccf 	bl	8002270 <HAL_ADCEx_MultiModeConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008d8:	f000 fa2e 	bl	8000d38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_ADC1_Init+0xe8>)
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2306      	movs	r3, #6
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e8:	237f      	movs	r3, #127	@ 0x7f
 80008ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ec:	2304      	movs	r3, #4
 80008ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_ADC1_Init+0xe0>)
 80008fa:	f001 f8a9 	bl	8001a50 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000904:	f000 fa18 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	@ 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000080 	.word	0x20000080
 8000914:	42028000 	.word	0x42028000
 8000918:	0c900008 	.word	0x0c900008

0800091c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 ffdb 	bl	80028dc <HAL_ICACHE_ConfigAssociativityMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800092c:	f000 fa04 	bl	8000d38 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000930:	f001 fff4 	bl	800291c <HAL_ICACHE_Enable>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800093a:	f000 f9fd 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_LPUART1_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 800098e:	f004 fb37 	bl	8005000 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f9ce 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 80009a0:	f005 f95e 	bl	8005c60 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f9c5 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 80009b2:	f005 f993 	bl	8005cdc <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f9bc 	bl	8000d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_LPUART1_UART_Init+0x90>)
 80009c2:	f005 f914 	bl	8005bee <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f9b4 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	40008000 	.word	0x40008000

080009dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_RTC_Init+0x8c>)
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <MX_RTC_Init+0x90>)
 80009f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_RTC_Init+0x8c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a00:	227f      	movs	r2, #127	@ 0x7f
 8000a02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a04:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a06:	22ff      	movs	r2, #255	@ 0xff
 8000a08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a22:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2a:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a2c:	f003 fe3a 	bl	80046a4 <HAL_RTC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000a36:	f000 f97f 	bl	8000d38 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <MX_RTC_Init+0x8c>)
 8000a50:	f003 ff36 	bl	80048c0 <HAL_RTCEx_PrivilegeModeSet>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a5a:	f000 f96d 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000017c 	.word	0x2000017c
 8000a6c:	40002800 	.word	0x40002800

08000a70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_SPI1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_SPI1_Init+0x74>)
 8000ad0:	f003 ff22 	bl	8004918 <HAL_SPI_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f92d 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001a4 	.word	0x200001a4
 8000ae8:	40013000 	.word	0x40013000

08000aec <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
 8000b00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000b02:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000b06:	f7ff fdcf 	bl	80006a8 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f7ff fdb4 	bl	8000678 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b10:	2001      	movs	r0, #1
 8000b12:	f7ff fdb1 	bl	8000678 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <MX_UCPD1_Init+0x64>)
 8000b2a:	f005 faae 	bl	800608a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000b34:	2303      	movs	r3, #3
 8000b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_UCPD1_Init+0x68>)
 8000b42:	f005 faa2 	bl	800608a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	42020400 	.word	0x42020400
 8000b54:	42020000 	.word	0x42020000

08000b58 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <MX_USB_PCD_Init+0x4c>)
 8000b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_USB_PCD_Init+0x48>)
 8000b8e:	f001 fed5 	bl	800293c <HAL_PCD_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b98:	f000 f8ce 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000208 	.word	0x20000208
 8000ba4:	4000d400 	.word	0x4000d400

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b50      	ldr	r3, [pc, #320]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b4d      	ldr	r3, [pc, #308]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a49      	ldr	r2, [pc, #292]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b47      	ldr	r3, [pc, #284]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a43      	ldr	r2, [pc, #268]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c12:	4b3b      	ldr	r3, [pc, #236]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	4b38      	ldr	r3, [pc, #224]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	4a37      	ldr	r2, [pc, #220]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2a:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <MX_GPIO_Init+0x158>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000c36:	f001 ffff 	bl	8002c38 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETHERNET_CS_GPIO_Port, ETHERNET_CS_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c40:	4830      	ldr	r0, [pc, #192]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000c42:	f001 fe19 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2180      	movs	r1, #128	@ 0x80
 8000c4a:	482f      	ldr	r0, [pc, #188]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000c4c:	f001 fe14 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c56:	482d      	ldr	r0, [pc, #180]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000c58:	f001 fe0e 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	21a0      	movs	r1, #160	@ 0xa0
 8000c60:	482b      	ldr	r0, [pc, #172]	@ (8000d10 <MX_GPIO_Init+0x168>)
 8000c62:	f001 fe09 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <MX_GPIO_Init+0x168>)
 8000c7e:	f001 fc7b 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETHERNET_CS_Pin */
  GPIO_InitStruct.Pin = ETHERNET_CS_Pin;
 8000c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETHERNET_CS_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481a      	ldr	r0, [pc, #104]	@ (8000d04 <MX_GPIO_Init+0x15c>)
 8000c9c:	f001 fc6c 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_GPIO_Init+0x160>)
 8000cb8:	f001 fc5e 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_GPIO_Init+0x164>)
 8000cd6:	f001 fc4f 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000cda:	23a0      	movs	r3, #160	@ 0xa0
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <MX_GPIO_Init+0x168>)
 8000cf2:	f001 fc41 	bl	8002578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	@ 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	42020c00 	.word	0x42020c00
 8000d08:	42020800 	.word	0x42020800
 8000d0c:	42020000 	.word	0x42020000
 8000d10:	42020400 	.word	0x42020400

08000d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d26:	f000 fb87 	bl	8001438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40012c00 	.word	0x40012c00

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	f06f 0001 	mvn.w	r0, #1
 8000d82:	f001 fbd1 	bl	8002528 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ae      	sub	sp, #184	@ 0xb8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2294      	movs	r2, #148	@ 0x94
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 ffb1 	bl	8008d1c <memset>
  if(hadc->Instance==ADC1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <HAL_ADC_MspInit+0xa8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d137      	bne.n	8000e34 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dc8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000dca:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 ff4e 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000de2:	f7ff ffa9 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000dec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <HAL_ADC_MspInit+0xac>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <HAL_ADC_MspInit+0xb0>)
 8000e30:	f001 fba2 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b8      	adds	r7, #184	@ 0xb8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	42028000 	.word	0x42028000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	42020800 	.word	0x42020800

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	2294      	movs	r2, #148	@ 0x94
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 ff57 	bl	8008d1c <memset>
  if(huart->Instance==LPUART1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a22      	ldr	r2, [pc, #136]	@ (8000efc <HAL_UART_MspInit+0xb4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d13d      	bne.n	8000ef4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fef7 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e90:	f7ff ff52 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e98:	4a19      	ldr	r2, [pc, #100]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_UART_MspInit+0xb8>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ec4:	f001 feb8 	bl	8002c38 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000ec8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <HAL_UART_MspInit+0xbc>)
 8000ef0:	f001 fb42 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	37b8      	adds	r7, #184	@ 0xb8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40008000 	.word	0x40008000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42021800 	.word	0x42021800

08000f08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0a8      	sub	sp, #160	@ 0xa0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2294      	movs	r2, #148	@ 0x94
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f007 feff 	bl	8008d1c <memset>
  if(hrtc->Instance==RTC)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a16      	ldr	r2, [pc, #88]	@ (8000f7c <HAL_RTC_MspInit+0x74>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d124      	bne.n	8000f72 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fe9c 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f46:	f7ff fef7 	bl	8000d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <HAL_RTC_MspInit+0x78>)
 8000f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <HAL_RTC_MspInit+0x78>)
 8000f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <HAL_RTC_MspInit+0x78>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_RTC_MspInit+0x78>)
 8000f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_RTC_MspInit+0x78>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	37a0      	adds	r7, #160	@ 0xa0
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40002800 	.word	0x40002800
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_SPI_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d127      	bne.n	8000ff6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000faa:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_SPI_MspInit+0x80>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fd6:	23e0      	movs	r3, #224	@ 0xe0
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_SPI_MspInit+0x84>)
 8000ff2:	f001 fac1 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013000 	.word	0x40013000
 8001004:	40021000 	.word	0x40021000
 8001008:	42020000 	.word	0x42020000

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ae      	sub	sp, #184	@ 0xb8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2294      	movs	r2, #148	@ 0x94
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f007 fe75 	bl	8008d1c <memset>
  if(hpcd->Instance==USB)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a22      	ldr	r2, [pc, #136]	@ (80010c0 <HAL_PCD_MspInit+0xb4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d13d      	bne.n	80010b8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800103c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001040:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe13 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001058:	f7ff fe6e 	bl	8000d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001074:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800108e:	230a      	movs	r3, #10
 8001090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001098:	4619      	mov	r1, r3
 800109a:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <HAL_PCD_MspInit+0xbc>)
 800109c:	f001 fa6c 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a4:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <HAL_PCD_MspInit+0xb8>)
 80010ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37b8      	adds	r7, #184	@ 0xb8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	4000d400 	.word	0x4000d400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	42020000 	.word	0x42020000

080010cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	202a      	movs	r0, #42	@ 0x2a
 80010e2:	f001 fa21 	bl	8002528 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80010e6:	202a      	movs	r0, #42	@ 0x2a
 80010e8:	f001 fa38 	bl	800255c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_InitTick+0x9c>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <HAL_InitTick+0x9c>)
 80010f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <HAL_InitTick+0x9c>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001104:	f107 0210 	add.w	r2, r7, #16
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fcae 	bl	8003a70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001114:	f002 fc98 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8001118:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111c:	4a13      	ldr	r2, [pc, #76]	@ (800116c <HAL_InitTick+0xa0>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	3b01      	subs	r3, #1
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <HAL_InitTick+0xa4>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <HAL_InitTick+0xa8>)
 800112c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <HAL_InitTick+0xa4>)
 8001130:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001134:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <HAL_InitTick+0xa4>)
 8001138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_InitTick+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_InitTick+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <HAL_InitTick+0xa4>)
 800114a:	f003 fc88 	bl	8004a5e <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d104      	bne.n	800115e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001154:	4806      	ldr	r0, [pc, #24]	@ (8001170 <HAL_InitTick+0xa4>)
 8001156:	f003 fce3 	bl	8004b20 <HAL_TIM_Base_Start_IT>
 800115a:	4603      	mov	r3, r0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3730      	adds	r7, #48	@ 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	431bde83 	.word	0x431bde83
 8001170:	200004fc 	.word	0x200004fc
 8001174:	40012c00 	.word	0x40012c00

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <TIM1_UP_IRQHandler+0x10>)
 80011b6:	f003 fd23 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200004fc 	.word	0x200004fc

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f007 fdf0 	bl	8008dd8 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20030000 	.word	0x20030000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000548 	.word	0x20000548
 800122c:	20003478 	.word	0x20003478

08001230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800125a:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001266:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e005      	b.n	8001282 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001282:	4a46      	ldr	r2, [pc, #280]	@ (800139c <SystemCoreClockUpdate+0x148>)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800128c:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b0c      	cmp	r3, #12
 8001296:	d866      	bhi.n	8001366 <SystemCoreClockUpdate+0x112>
 8001298:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <SystemCoreClockUpdate+0x4c>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012d5 	.word	0x080012d5
 80012a4:	08001367 	.word	0x08001367
 80012a8:	08001367 	.word	0x08001367
 80012ac:	08001367 	.word	0x08001367
 80012b0:	080012dd 	.word	0x080012dd
 80012b4:	08001367 	.word	0x08001367
 80012b8:	08001367 	.word	0x08001367
 80012bc:	08001367 	.word	0x08001367
 80012c0:	080012e5 	.word	0x080012e5
 80012c4:	08001367 	.word	0x08001367
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	080012ed 	.word	0x080012ed
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012d4:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6013      	str	r3, [r2, #0]
      break;
 80012da:	e048      	b.n	800136e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 80012de:	4a31      	ldr	r2, [pc, #196]	@ (80013a4 <SystemCoreClockUpdate+0x150>)
 80012e0:	601a      	str	r2, [r3, #0]
      break;
 80012e2:	e044      	b.n	800136e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 80012e6:	4a30      	ldr	r2, [pc, #192]	@ (80013a8 <SystemCoreClockUpdate+0x154>)
 80012e8:	601a      	str	r2, [r3, #0]
      break;
 80012ea:	e040      	b.n	800136e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	3301      	adds	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <SystemCoreClockUpdate+0xbe>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d006      	beq.n	800131e <SystemCoreClockUpdate+0xca>
 8001310:	e00b      	b.n	800132a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001312:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <SystemCoreClockUpdate+0x150>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	613b      	str	r3, [r7, #16]
          break;
 800131c:	e00b      	b.n	8001336 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800131e:	4a22      	ldr	r2, [pc, #136]	@ (80013a8 <SystemCoreClockUpdate+0x154>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	613b      	str	r3, [r7, #16]
          break;
 8001328:	e005      	b.n	8001336 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	613b      	str	r3, [r7, #16]
          break;
 8001334:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0e5b      	lsrs	r3, r3, #25
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	3301      	adds	r3, #1
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 8001362:	6013      	str	r3, [r2, #0]
      break;
 8001364:	e003      	b.n	800136e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001366:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	6013      	str	r3, [r2, #0]
      break;
 800136c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <SystemCoreClockUpdate+0x144>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <SystemCoreClockUpdate+0x158>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemCoreClockUpdate+0x14c>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	08009784 	.word	0x08009784
 80013a0:	20000000 	.word	0x20000000
 80013a4:	00f42400 	.word	0x00f42400
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	0800976c 	.word	0x0800976c

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b4:	f7ff ff3c 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ba:	e003      	b.n	80013c4 <LoopCopyDataInit>

080013bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013c2:	3104      	adds	r1, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013c4:	480a      	ldr	r0, [pc, #40]	@ (80013f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013cc:	d3f6      	bcc.n	80013bc <CopyDataInit>
	ldr	r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d0:	e002      	b.n	80013d8 <LoopFillZerobss>

080013d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013d4:	f842 3b04 	str.w	r3, [r2], #4

080013d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <LoopForever+0x16>)
	cmp	r2, r3
 80013da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013dc:	d3f9      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013de:	f007 fd01 	bl	8008de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff f979 	bl	80006d8 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013e8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80013ec:	08009830 	.word	0x08009830
	ldr	r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013f4:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 80013f8:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 80013fc:	20003478 	.word	0x20003478

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>

08001402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800140c:	2004      	movs	r0, #4
 800140e:	f001 f880 	bl	8002512 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001412:	f7ff ff1f 	bl	8001254 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	2007      	movs	r0, #7
 8001418:	f7ff fe58 	bl	80010cc <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	e001      	b.n	800142c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001428:	f7ff fc8c 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142c:	79fb      	ldrb	r3, [r7, #7]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	2000054c 	.word	0x2000054c

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	2000054c 	.word	0x2000054c

08001478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	@ 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <LL_ADC_SetOffset+0x44>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	4313      	orrs	r3, r2
 8001510:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001518:	bf00      	nop
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	03fff000 	.word	0x03fff000

08001528 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3360      	adds	r3, #96	@ 0x60
 8001536:	461a      	mov	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3360      	adds	r3, #96	@ 0x60
 8001564:	461a      	mov	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	615a      	str	r2, [r3, #20]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3330      	adds	r3, #48	@ 0x30
 80015c0:	461a      	mov	r2, r3
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	4413      	add	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	211f      	movs	r1, #31
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	401a      	ands	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0e9b      	lsrs	r3, r3, #26
 80015e8:	f003 011f 	and.w	r1, r3, #31
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3314      	adds	r3, #20
 8001618:	461a      	mov	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	0e5b      	lsrs	r3, r3, #25
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	0d1b      	lsrs	r3, r3, #20
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2107      	movs	r1, #7
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	0d1b      	lsrs	r3, r3, #20
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001678:	43db      	mvns	r3, r3
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0318 	and.w	r3, r3, #24
 8001682:	4908      	ldr	r1, [pc, #32]	@ (80016a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001684:	40d9      	lsrs	r1, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	400b      	ands	r3, r1
 800168a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168e:	431a      	orrs	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	0007ffff 	.word	0x0007ffff

080016a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6093      	str	r3, [r2, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001704:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001708:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001730:	d101      	bne.n	8001736 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <LL_ADC_IsEnabled+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_IsEnabled+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b04      	cmp	r3, #4
 800177c:	d101      	bne.n	8001782 <LL_ADC_REG_IsConversionOngoing+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d101      	bne.n	80017a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e12e      	b.n	8001a30 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fad7 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff67 	bl	80016cc <LL_ADC_IsDeepPowerDownEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff4d 	bl	80016a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff82 	bl	800171c <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff66 	bl	80016f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001828:	4b83      	ldr	r3, [pc, #524]	@ (8001a38 <HAL_ADC_Init+0x280>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	4a83      	ldr	r2, [pc, #524]	@ (8001a3c <HAL_ADC_Init+0x284>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	3301      	adds	r3, #1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800183c:	e002      	b.n	8001844 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3b01      	subs	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f9      	bne.n	800183e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff64 	bl	800171c <LL_ADC_IsInternalRegulatorEnabled>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f043 0210 	orr.w	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff75 	bl	800176a <LL_ADC_REG_IsConversionOngoing>
 8001880:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80c7 	bne.w	8001a1e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 80c3 	bne.w	8001a1e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018a0:	f043 0202 	orr.w	r2, r3, #2
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff49 	bl	8001744 <LL_ADC_IsEnabled>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d110      	bne.n	80018da <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018b8:	4861      	ldr	r0, [pc, #388]	@ (8001a40 <HAL_ADC_Init+0x288>)
 80018ba:	f7ff ff43 	bl	8001744 <LL_ADC_IsEnabled>
 80018be:	4604      	mov	r4, r0
 80018c0:	4860      	ldr	r0, [pc, #384]	@ (8001a44 <HAL_ADC_Init+0x28c>)
 80018c2:	f7ff ff3f 	bl	8001744 <LL_ADC_IsEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4323      	orrs	r3, r4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4619      	mov	r1, r3
 80018d4:	485c      	ldr	r0, [pc, #368]	@ (8001a48 <HAL_ADC_Init+0x290>)
 80018d6:	f7ff fdcf 	bl	8001478 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7e5b      	ldrb	r3, [r3, #25]
 80018de:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018ea:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018f0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	3b01      	subs	r3, #1
 800190e:	045b      	lsls	r3, r3, #17
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001922:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HAL_ADC_Init+0x294>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	69b9      	ldr	r1, [r7, #24]
 8001942:	430b      	orrs	r3, r1
 8001944:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff20 	bl	8001790 <LL_ADC_INJ_IsConversionOngoing>
 8001950:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d140      	bne.n	80019da <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d13d      	bne.n	80019da <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7e1b      	ldrb	r3, [r3, #24]
 8001966:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001968:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001970:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001980:	f023 0306 	bic.w	r3, r3, #6
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	69b9      	ldr	r1, [r7, #24]
 800198a:	430b      	orrs	r3, r1
 800198c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001994:	2b01      	cmp	r3, #1
 8001996:	d118      	bne.n	80019ca <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019ae:	4311      	orrs	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ba:	430a      	orrs	r2, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	e007      	b.n	80019da <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10c      	bne.n	80019fc <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f023 010f 	bic.w	r1, r3, #15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020f 	bic.w	r2, r2, #15
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	f023 0303 	bic.w	r3, r3, #3
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a1c:	e007      	b.n	8001a2e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f043 0210 	orr.w	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3724      	adds	r7, #36	@ 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	053e2d63 	.word	0x053e2d63
 8001a40:	42028000 	.word	0x42028000
 8001a44:	42028100 	.word	0x42028100
 8001a48:	42028300 	.word	0x42028300
 8001a4c:	fff0c007 	.word	0xfff0c007

08001a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b0b7      	sub	sp, #220	@ 0xdc
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x22>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e3c1      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x7a6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fe73 	bl	800176a <LL_ADC_REG_IsConversionOngoing>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 83a6 	bne.w	80021d8 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f7ff fd89 	bl	80015b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe61 	bl	800176a <LL_ADC_REG_IsConversionOngoing>
 8001aa8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fe6d 	bl	8001790 <LL_ADC_INJ_IsConversionOngoing>
 8001ab6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 81c1 	bne.w	8001e46 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 81bc 	bne.w	8001e46 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ad6:	d10f      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff fd90 	bl	8001608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fd4a 	bl	800158a <LL_ADC_SetSamplingTimeCommonConfig>
 8001af6:	e00e      	b.n	8001b16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f7ff fd7f 	bl	8001608 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fd3a 	bl	800158a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d00a      	beq.n	8001b4e <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6919      	ldr	r1, [r3, #16]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b48:	f7ff fcca 	bl	80014e0 <LL_ADC_SetOffset>
 8001b4c:	e17b      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fce7 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x12a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fcdc 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	e01e      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x168>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fcd1 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e004      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x180>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	e018      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1b2>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001bec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e004      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fca0 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fc84 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1f0>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fc79 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 021f 	and.w	r2, r3, #31
 8001c3e:	e01e      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x22e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fc6e 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e004      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x246>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0e9b      	lsrs	r3, r3, #26
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	e018      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x278>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e004      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d106      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fc3d 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fc21 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x2b6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fc16 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	e01e      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x2f4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc0b 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001d34:	2320      	movs	r3, #32
 8001d36:	e004      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d3c:	fab3 f383 	clz	r3, r3
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x30c>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0e9b      	lsrs	r3, r3, #26
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	e016      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x33a>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	e004      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2102      	movs	r1, #2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fbdc 	bl	8001554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2103      	movs	r1, #3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fbc0 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x378>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2103      	movs	r1, #3
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fbb5 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	f003 021f 	and.w	r2, r3, #31
 8001dc6:	e017      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x3a8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fbaa 	bl	8001528 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001de0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001de2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e003      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x3c0>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	e011      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x3e4>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	e003      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2103      	movs	r1, #3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fb87 	bl	8001554 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fc7a 	bl	8001744 <LL_ADC_IsEnabled>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 81c9 	bne.w	80021ea <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f7ff fbfb 	bl	8001660 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4a8f      	ldr	r2, [pc, #572]	@ (80020ac <HAL_ADC_ConfigChannel+0x65c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	f040 8131 	bne.w	80020d8 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x44e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b09      	cmp	r3, #9
 8001e94:	bf94      	ite	ls
 8001e96:	2301      	movls	r3, #1
 8001e98:	2300      	movhi	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	e019      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x482>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d079      	beq.n	8001fca <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d107      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x4a2>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0e9b      	lsrs	r3, r3, #26
 8001ee8:	3301      	adds	r3, #1
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ef0:	e015      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x4ce>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e003      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	069b      	lsls	r3, r3, #26
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x4ee>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	e017      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x51e>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001f56:	2320      	movs	r3, #32
 8001f58:	e003      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	ea42 0103 	orr.w	r1, r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x544>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	3301      	adds	r3, #1
 8001f86:	f003 021f 	and.w	r2, r3, #31
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	051b      	lsls	r3, r3, #20
 8001f92:	e018      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x576>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001fac:	2320      	movs	r3, #32
 8001fae:	e003      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f003 021f 	and.w	r2, r3, #31
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	e081      	b.n	80020ce <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x596>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	3301      	adds	r3, #1
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fe4:	e015      	b.n	8002012 <HAL_ADC_ConfigChannel+0x5c2>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	069b      	lsls	r3, r3, #26
 800200e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x5e2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	3301      	adds	r3, #1
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	e017      	b.n	8002062 <HAL_ADC_ConfigChannel+0x612>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	61fb      	str	r3, [r7, #28]
  return result;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e003      	b.n	8002056 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3301      	adds	r3, #1
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	ea42 0103 	orr.w	r1, r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_ConfigChannel+0x63e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	3301      	adds	r3, #1
 800207a:	f003 021f 	and.w	r2, r3, #31
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	051b      	lsls	r3, r3, #20
 8002088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800208c:	e01e      	b.n	80020cc <HAL_ADC_ConfigChannel+0x67c>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	613b      	str	r3, [r7, #16]
  return result;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e006      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x668>
 80020aa:	bf00      	nop
 80020ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	051b      	lsls	r3, r3, #20
 80020c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7ff fa98 	bl	8001608 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <HAL_ADC_ConfigChannel+0x7b0>)
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8082 	beq.w	80021ea <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e6:	4847      	ldr	r0, [pc, #284]	@ (8002204 <HAL_ADC_ConfigChannel+0x7b4>)
 80020e8:	f7ff f9ec 	bl	80014c4 <LL_ADC_GetCommonPathInternalCh>
 80020ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f0:	4845      	ldr	r0, [pc, #276]	@ (8002208 <HAL_ADC_ConfigChannel+0x7b8>)
 80020f2:	f7ff fb27 	bl	8001744 <LL_ADC_IsEnabled>
 80020f6:	4604      	mov	r4, r0
 80020f8:	4844      	ldr	r0, [pc, #272]	@ (800220c <HAL_ADC_ConfigChannel+0x7bc>)
 80020fa:	f7ff fb23 	bl	8001744 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	4323      	orrs	r3, r4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d15e      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a41      	ldr	r2, [pc, #260]	@ (8002210 <HAL_ADC_ConfigChannel+0x7c0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d127      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d121      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a39      	ldr	r2, [pc, #228]	@ (8002208 <HAL_ADC_ConfigChannel+0x7b8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d161      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800212a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800212e:	4619      	mov	r1, r3
 8002130:	4834      	ldr	r0, [pc, #208]	@ (8002204 <HAL_ADC_ConfigChannel+0x7b4>)
 8002132:	f7ff f9b4 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_ADC_ConfigChannel+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <HAL_ADC_ConfigChannel+0x7c8>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800214e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3b01      	subs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215e:	e044      	b.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <HAL_ADC_ConfigChannel+0x7cc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800216a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800216e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <HAL_ADC_ConfigChannel+0x7b8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d134      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002188:	4619      	mov	r1, r3
 800218a:	481e      	ldr	r0, [pc, #120]	@ (8002204 <HAL_ADC_ConfigChannel+0x7b4>)
 800218c:	f7ff f987 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002190:	e02b      	b.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	@ (8002220 <HAL_ADC_ConfigChannel+0x7d0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d126      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800219c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d120      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021ba:	4619      	mov	r1, r3
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <HAL_ADC_ConfigChannel+0x7b4>)
 80021be:	f7ff f96e 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
 80021c2:	e012      	b.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80021d6:	e008      	b.n	80021ea <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80021f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	37dc      	adds	r7, #220	@ 0xdc
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	80080000 	.word	0x80080000
 8002204:	42028300 	.word	0x42028300
 8002208:	42028000 	.word	0x42028000
 800220c:	42028100 	.word	0x42028100
 8002210:	c7520000 	.word	0xc7520000
 8002214:	20000000 	.word	0x20000000
 8002218:	053e2d63 	.word	0x053e2d63
 800221c:	cb840000 	.word	0xcb840000
 8002220:	80000001 	.word	0x80000001

08002224 <LL_ADC_IsEnabled>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <LL_ADC_IsEnabled+0x18>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <LL_ADC_IsEnabled+0x1a>
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_REG_IsConversionOngoing>:
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d101      	bne.n	8002262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b0a1      	sub	sp, #132	@ 0x84
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800228a:	2302      	movs	r3, #2
 800228c:	e089      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002296:	2300      	movs	r3, #0
 8002298:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800229a:	2300      	movs	r3, #0
 800229c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a42      	ldr	r2, [pc, #264]	@ (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d102      	bne.n	80022ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022a8:	4b41      	ldr	r3, [pc, #260]	@ (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e001      	b.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e068      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffb9 	bl	800224a <LL_ADC_REG_IsConversionOngoing>
 80022d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ffb3 	bl	800224a <LL_ADC_REG_IsConversionOngoing>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d14a      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80022ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d147      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022f0:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80022f2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d027      	beq.n	800234c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80022fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800230e:	035b      	lsls	r3, r3, #13
 8002310:	430b      	orrs	r3, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002316:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002318:	4824      	ldr	r0, [pc, #144]	@ (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800231a:	f7ff ff83 	bl	8002224 <LL_ADC_IsEnabled>
 800231e:	4604      	mov	r4, r0
 8002320:	4823      	ldr	r0, [pc, #140]	@ (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002322:	f7ff ff7f 	bl	8002224 <LL_ADC_IsEnabled>
 8002326:	4603      	mov	r3, r0
 8002328:	4323      	orrs	r3, r4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d132      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800232e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002336:	f023 030f 	bic.w	r3, r3, #15
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6811      	ldr	r1, [r2, #0]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	430a      	orrs	r2, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002348:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800234a:	e023      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800234c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002358:	4814      	ldr	r0, [pc, #80]	@ (80023ac <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800235a:	f7ff ff63 	bl	8002224 <LL_ADC_IsEnabled>
 800235e:	4604      	mov	r4, r0
 8002360:	4813      	ldr	r0, [pc, #76]	@ (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002362:	f7ff ff5f 	bl	8002224 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	4323      	orrs	r3, r4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d112      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800236e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002376:	f023 030f 	bic.w	r3, r3, #15
 800237a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800237c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800237e:	e009      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002392:	e000      	b.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002394:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800239e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3784      	adds	r7, #132	@ 0x84
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	42028000 	.word	0x42028000
 80023b0:	42028100 	.word	0x42028100
 80023b4:	42028300 	.word	0x42028300

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	@ (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0152      	lsls	r2, r2, #5
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	@ (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0152      	lsls	r2, r2, #5
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	bf28      	it	cs
 80024ca:	2303      	movcs	r3, #3
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3303      	adds	r3, #3
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b04      	subs	r3, #4
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4c 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002536:	f7ff ff63 	bl	8002400 <__NVIC_GetPriorityGrouping>
 800253a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7ff ffb3 	bl	80024ac <NVIC_EncodePriority>
 8002546:	4602      	mov	r2, r0
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff82 	bl	8002458 <__NVIC_SetPriority>
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff56 	bl	800241c <__NVIC_EnableIRQ>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002586:	e158      	b.n	800283a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 814a 	beq.w	8002834 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d005      	beq.n	80025b8 <HAL_GPIO_Init+0x40>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d130      	bne.n	800261a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ee:	2201      	movs	r2, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 0201 	and.w	r2, r3, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b03      	cmp	r3, #3
 8002624:	d017      	beq.n	8002656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d123      	bne.n	80026aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 80a4 	beq.w	8002834 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80026ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3318      	adds	r3, #24
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a52      	ldr	r2, [pc, #328]	@ (800285c <HAL_GPIO_Init+0x2e4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d025      	beq.n	8002764 <HAL_GPIO_Init+0x1ec>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a51      	ldr	r2, [pc, #324]	@ (8002860 <HAL_GPIO_Init+0x2e8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01f      	beq.n	8002760 <HAL_GPIO_Init+0x1e8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a50      	ldr	r2, [pc, #320]	@ (8002864 <HAL_GPIO_Init+0x2ec>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d019      	beq.n	800275c <HAL_GPIO_Init+0x1e4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4f      	ldr	r2, [pc, #316]	@ (8002868 <HAL_GPIO_Init+0x2f0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_GPIO_Init+0x1e0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4e      	ldr	r2, [pc, #312]	@ (800286c <HAL_GPIO_Init+0x2f4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00d      	beq.n	8002754 <HAL_GPIO_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4d      	ldr	r2, [pc, #308]	@ (8002870 <HAL_GPIO_Init+0x2f8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <HAL_GPIO_Init+0x1d8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4c      	ldr	r2, [pc, #304]	@ (8002874 <HAL_GPIO_Init+0x2fc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_GPIO_Init+0x1d4>
 8002748:	2306      	movs	r3, #6
 800274a:	e00c      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 800274c:	2307      	movs	r3, #7
 800274e:	e00a      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002750:	2305      	movs	r3, #5
 8002752:	e008      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002754:	2304      	movs	r3, #4
 8002756:	e006      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002758:	2303      	movs	r3, #3
 800275a:	e004      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 800275c:	2302      	movs	r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_GPIO_Init+0x1ee>
 8002764:	2300      	movs	r3, #0
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	4093      	lsls	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002776:	4938      	ldr	r1, [pc, #224]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3318      	adds	r3, #24
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fe:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 8002808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800282c:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <HAL_GPIO_Init+0x2e0>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f ae9f 	bne.w	8002588 <HAL_GPIO_Init+0x10>
  }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	4002f400 	.word	0x4002f400
 800285c:	42020000 	.word	0x42020000
 8002860:	42020400 	.word	0x42020400
 8002864:	42020800 	.word	0x42020800
 8002868:	42020c00 	.word	0x42020c00
 800286c:	42021000 	.word	0x42021000
 8002870:	42021400 	.word	0x42021400
 8002874:	42021800 	.word	0x42021800

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e002      	b.n	800289c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	041a      	lsls	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43d9      	mvns	r1, r3
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	400b      	ands	r3, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e007      	b.n	800290a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0204 	bic.w	r2, r3, #4
 8002902:	4905      	ldr	r1, [pc, #20]	@ (8002918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
  }

  return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40030400 	.word	0x40030400

0800291c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_ICACHE_Enable+0x1c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <HAL_ICACHE_Enable+0x1c>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40030400 	.word	0x40030400

0800293c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b08b      	sub	sp, #44	@ 0x2c
 8002940:	af06      	add	r7, sp, #24
 8002942:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0cb      	b.n	8002ae6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fb52 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2203      	movs	r2, #3
 800296c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fbf5 	bl	8006164 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e040      	b.n	8002a02 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	3301      	adds	r3, #1
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3303      	adds	r3, #3
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3338      	adds	r3, #56	@ 0x38
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	333c      	adds	r3, #60	@ 0x3c
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	3340      	adds	r3, #64	@ 0x40
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	3301      	adds	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d3b9      	bcc.n	8002980 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e044      	b.n	8002a9c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d3b5      	bcc.n	8002a12 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	687e      	ldr	r6, [r7, #4]
 8002aae:	466d      	mov	r5, sp
 8002ab0:	f106 0410 	add.w	r4, r6, #16
 8002ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	602b      	str	r3, [r5, #0]
 8002abc:	1d33      	adds	r3, r6, #4
 8002abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac0:	6838      	ldr	r0, [r7, #0]
 8002ac2:	f003 fb6a 	bl	800619a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f805 	bl	8002aee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40007000 	.word	0x40007000

08002b64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002b88:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b90:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002b92:	f000 f861 	bl	8002c58 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e03e      	b.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002ba2:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bae:	d101      	bne.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e035      	b.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d101      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e02f      	b.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002bc8:	4917      	ldr	r1, [pc, #92]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	4a16      	ldr	r2, [pc, #88]	@ (8002c30 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	09db      	lsrs	r3, r3, #7
 8002bde:	2232      	movs	r2, #50	@ 0x32
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	08db      	lsrs	r3, r3, #3
 8002bec:	3301      	adds	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf0:	e002      	b.n	8002bf8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c04:	d102      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f2      	bne.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	d101      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e000      	b.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	0a7c5ac5 	.word	0x0a7c5ac5
 8002c34:	cccccccd 	.word	0xcccccccd

08002c38 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002c3c:	4b05      	ldr	r3, [pc, #20]	@ (8002c54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a04      	ldr	r2, [pc, #16]	@ (8002c54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c46:	6053      	str	r3, [r2, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40007000 	.word	0x40007000

08002c58 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c9c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	e00a      	b.n	8002c8c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002c80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	e001      	b.n	8002c8c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002c8c:	687b      	ldr	r3, [r7, #4]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 bcc2 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb4:	4b99      	ldr	r3, [pc, #612]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbe:	4b97      	ldr	r3, [pc, #604]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80e9 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d006      	beq.n	8002cea <HAL_RCC_OscConfig+0x4a>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	f040 8083 	bne.w	8002dea <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d17f      	bne.n	8002dea <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cea:	4b8c      	ldr	r3, [pc, #560]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_RCC_OscConfig+0x64>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f000 bc9a 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d08:	4b84      	ldr	r3, [pc, #528]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_RCC_OscConfig+0x7e>
 8002d14:	4b81      	ldr	r3, [pc, #516]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d1c:	e005      	b.n	8002d2a <HAL_RCC_OscConfig+0x8a>
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d224      	bcs.n	8002d78 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fece 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f000 bc7a 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a74      	ldr	r2, [pc, #464]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b72      	ldr	r3, [pc, #456]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	496f      	ldr	r1, [pc, #444]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d62:	4b6e      	ldr	r3, [pc, #440]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	496a      	ldr	r1, [pc, #424]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
 8002d76:	e026      	b.n	8002dc6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b65      	ldr	r3, [pc, #404]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	4962      	ldr	r1, [pc, #392]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b61      	ldr	r3, [pc, #388]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	495d      	ldr	r1, [pc, #372]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fe8d 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f000 bc39 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dc6:	f000 fe17 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a54      	ldr	r2, [pc, #336]	@ (8002f20 <HAL_RCC_OscConfig+0x280>)
 8002dce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd0:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <HAL_RCC_OscConfig+0x284>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe f979 	bl	80010cc <HAL_InitTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d060      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	f000 bc27 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d039      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a49      	ldr	r2, [pc, #292]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fb2f 	bl	8001460 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	e00f      	b.n	8002e26 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e06:	f7fe fb2b 	bl	8001460 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d908      	bls.n	8002e26 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e14:	4b41      	ldr	r3, [pc, #260]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	f000 bc09 	b.w	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e26:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0e9      	beq.n	8002e06 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e32:	4b3a      	ldr	r3, [pc, #232]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a39      	ldr	r2, [pc, #228]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	4934      	ldr	r1, [pc, #208]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e50:	4b32      	ldr	r3, [pc, #200]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	492f      	ldr	r1, [pc, #188]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
 8002e64:	e020      	b.n	8002ea8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e66:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e72:	f7fe faf5 	bl	8001460 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e78:	e00e      	b.n	8002e98 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7a:	f7fe faf1 	bl	8001460 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d907      	bls.n	8002e98 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e3cf      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e98:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ea      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1da>
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d07e      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x226>
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d10e      	bne.n	8002ede <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d06e      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x310>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d16a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e3ac      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x256>
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e024      	b.n	8002f40 <HAL_RCC_OscConfig+0x2a0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002efe:	d113      	bne.n	8002f28 <HAL_RCC_OscConfig+0x288>
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a02      	ldr	r2, [pc, #8]	@ (8002f1c <HAL_RCC_OscConfig+0x27c>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e012      	b.n	8002f40 <HAL_RCC_OscConfig+0x2a0>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000004 	.word	0x20000004
 8002f28:	4b8b      	ldr	r3, [pc, #556]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a8a      	ldr	r2, [pc, #552]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a87      	ldr	r2, [pc, #540]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d019      	beq.n	8002f7c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fa8a 	bl	8001460 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	e00e      	b.n	8002f6e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fa86 	bl	8001460 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d907      	bls.n	8002f6e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b7e      	ldr	r3, [pc, #504]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e364      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ea      	beq.n	8002f50 <HAL_RCC_OscConfig+0x2b0>
 8002f7a:	e01a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fa70 	bl	8001460 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f82:	e00e      	b.n	8002fa2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe fa6c 	bl	8001460 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	@ 0x64
 8002f90:	d907      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f92:	4b71      	ldr	r3, [pc, #452]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e34a      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ea      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2e4>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d06c      	beq.n	8003098 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x330>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d119      	bne.n	8002ffe <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d116      	bne.n	8002ffe <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd0:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x348>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e327      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	4958      	ldr	r1, [pc, #352]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffc:	e04c      	b.n	8003098 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d029      	beq.n	800305a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003006:	4b54      	ldr	r3, [pc, #336]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a53      	ldr	r2, [pc, #332]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fa25 	bl	8001460 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	e00e      	b.n	8003038 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe fa21 	bl	8001460 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d907      	bls.n	8003038 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	4b4b      	ldr	r3, [pc, #300]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e2ff      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ea      	beq.n	800301a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	061b      	lsls	r3, r3, #24
 8003052:	4941      	ldr	r1, [pc, #260]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
 8003058:	e01e      	b.n	8003098 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b3f      	ldr	r3, [pc, #252]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a3e      	ldr	r2, [pc, #248]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fe f9fb 	bl	8001460 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306c:	e00e      	b.n	800308c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306e:	f7fe f9f7 	bl	8001460 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d907      	bls.n	800308c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800307c:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e2d5      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ea      	bne.n	800306e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d062      	beq.n	800316a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d038      	beq.n	800311e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ba:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	f023 0310 	bic.w	r3, r3, #16
 80030c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030c4:	e007      	b.n	80030d6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe f9bb 	bl	8001460 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ec:	e00f      	b.n	800310e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7fe f9b7 	bl	8001460 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b07      	cmp	r3, #7
 80030fa:	d908      	bls.n	800310e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fc:	4b16      	ldr	r3, [pc, #88]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e294      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310e:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0e8      	beq.n	80030ee <HAL_RCC_OscConfig+0x44e>
 800311c:	e025      	b.n	800316a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003124:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe f997 	bl	8001460 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	e012      	b.n	800315c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe f993 	bl	8001460 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b07      	cmp	r3, #7
 8003142:	d90b      	bls.n	800315c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e270      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800315c:	4ba8      	ldr	r3, [pc, #672]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800315e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 812d 	beq.w	80033d2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800317c:	4ba0      	ldr	r3, [pc, #640]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10d      	bne.n	80031a4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003188:	4b9d      	ldr	r3, [pc, #628]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	4a9c      	ldr	r2, [pc, #624]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	@ 0x58
 8003194:	4b9a      	ldr	r3, [pc, #616]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a4:	4b97      	ldr	r3, [pc, #604]	@ (8003404 <HAL_RCC_OscConfig+0x764>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11e      	bne.n	80031ee <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b0:	4b94      	ldr	r3, [pc, #592]	@ (8003404 <HAL_RCC_OscConfig+0x764>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a93      	ldr	r2, [pc, #588]	@ (8003404 <HAL_RCC_OscConfig+0x764>)
 80031b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031bc:	f7fe f950 	bl	8001460 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c2:	e00e      	b.n	80031e2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c4:	f7fe f94c 	bl	8001460 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d907      	bls.n	80031e2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003404 <HAL_RCC_OscConfig+0x764>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e22a      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e2:	4b88      	ldr	r3, [pc, #544]	@ (8003404 <HAL_RCC_OscConfig+0x764>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0ea      	beq.n	80031c4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01f      	beq.n	800323a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003206:	4b7e      	ldr	r3, [pc, #504]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320c:	4a7c      	ldr	r2, [pc, #496]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003216:	4b7a      	ldr	r3, [pc, #488]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321c:	4a78      	ldr	r2, [pc, #480]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003226:	e018      	b.n	800325a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003228:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	4a74      	ldr	r2, [pc, #464]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003238:	e00f      	b.n	800325a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800323a:	4b71      	ldr	r3, [pc, #452]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003240:	4a6f      	ldr	r2, [pc, #444]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800324a:	4b6d      	ldr	r3, [pc, #436]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	4a6b      	ldr	r2, [pc, #428]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d068      	beq.n	8003334 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe f8fd 	bl	8001460 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003268:	e011      	b.n	800328e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe f8f9 	bl	8001460 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d908      	bls.n	800328e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	4b60      	ldr	r3, [pc, #384]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1d4      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	4b5c      	ldr	r3, [pc, #368]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0e6      	beq.n	800326a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d022      	beq.n	80032ee <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032a8:	4b55      	ldr	r3, [pc, #340]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ae:	4a54      	ldr	r2, [pc, #336]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032b8:	e011      	b.n	80032de <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe f8d1 	bl	8001460 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d908      	bls.n	80032de <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1ac      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032de:	4b48      	ldr	r3, [pc, #288]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0e6      	beq.n	80032ba <HAL_RCC_OscConfig+0x61a>
 80032ec:	e068      	b.n	80033c0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032ee:	4b44      	ldr	r3, [pc, #272]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	4a42      	ldr	r2, [pc, #264]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80032f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032fe:	e011      	b.n	8003324 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe f8ae 	bl	8001460 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d908      	bls.n	8003324 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e189      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003324:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e6      	bne.n	8003300 <HAL_RCC_OscConfig+0x660>
 8003332:	e045      	b.n	80033c0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe f894 	bl	8001460 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800333a:	e011      	b.n	8003360 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe f890 	bl	8001460 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d908      	bls.n	8003360 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334e:	4b2c      	ldr	r3, [pc, #176]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e16b      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e6      	bne.n	800333c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d021      	beq.n	80033c0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800337c:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 8003384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800338c:	e011      	b.n	80033b2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe f867 	bl	8001460 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d908      	bls.n	80033b2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033a0:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e142      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e6      	bne.n	800338e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c0:	7ffb      	ldrb	r3, [r7, #31]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04f      	beq.n	800347e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d028      	beq.n	8003438 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_RCC_OscConfig+0x760>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe f833 	bl	8001460 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x788>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003408:	f7fe f82a 	bl	8001460 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d908      	bls.n	8003428 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003416:	4b8a      	ldr	r3, [pc, #552]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e107      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003428:	4b85      	ldr	r3, [pc, #532]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800342a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0e8      	beq.n	8003408 <HAL_RCC_OscConfig+0x768>
 8003436:	e022      	b.n	800347e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003438:	4b81      	ldr	r3, [pc, #516]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800343a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800343e:	4a80      	ldr	r2, [pc, #512]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe f80a 	bl	8001460 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800344e:	e00f      	b.n	8003470 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003450:	f7fe f806 	bl	8001460 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d908      	bls.n	8003470 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800345e:	4b78      	ldr	r3, [pc, #480]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003460:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0e3      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003470:	4b73      	ldr	r3, [pc, #460]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003472:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e8      	bne.n	8003450 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80d7 	beq.w	8003636 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003488:	4b6d      	ldr	r3, [pc, #436]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f000 8091 	beq.w	80035b8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349a:	2b02      	cmp	r3, #2
 800349c:	d166      	bne.n	800356c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b68      	ldr	r3, [pc, #416]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a67      	ldr	r2, [pc, #412]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80034a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd ffd9 	bl	8001460 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	e00e      	b.n	80034d0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b2:	f7fd ffd5 	bl	8001460 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d907      	bls.n	80034d0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0b3      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ea      	bne.n	80034b2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034dc:	4b58      	ldr	r3, [pc, #352]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b58      	ldr	r3, [pc, #352]	@ (8003644 <HAL_RCC_OscConfig+0x9a4>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034f6:	0212      	lsls	r2, r2, #8
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034fe:	0852      	lsrs	r2, r2, #1
 8003500:	3a01      	subs	r2, #1
 8003502:	0552      	lsls	r2, r2, #21
 8003504:	4311      	orrs	r1, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800350a:	0852      	lsrs	r2, r2, #1
 800350c:	3a01      	subs	r2, #1
 800350e:	0652      	lsls	r2, r2, #25
 8003510:	4311      	orrs	r1, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003516:	06d2      	lsls	r2, r2, #27
 8003518:	430a      	orrs	r2, r1
 800351a:	4949      	ldr	r1, [pc, #292]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a46      	ldr	r2, [pc, #280]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800352c:	4b44      	ldr	r3, [pc, #272]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a43      	ldr	r2, [pc, #268]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003536:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd ff92 	bl	8001460 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	e00e      	b.n	800355e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fd ff8e 	bl	8001460 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d907      	bls.n	800355e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b3c      	ldr	r3, [pc, #240]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e06c      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ea      	beq.n	8003540 <HAL_RCC_OscConfig+0x8a0>
 800356a:	e064      	b.n	8003636 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356c:	4b34      	ldr	r3, [pc, #208]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a33      	ldr	r2, [pc, #204]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd ff72 	bl	8001460 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357e:	e00e      	b.n	800359e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd ff6e 	bl	8001460 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d907      	bls.n	800359e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	4b2c      	ldr	r3, [pc, #176]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04c      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ea      	bne.n	8003580 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035aa:	4b25      	ldr	r3, [pc, #148]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	4924      	ldr	r1, [pc, #144]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80035b0:	4b25      	ldr	r3, [pc, #148]	@ (8003648 <HAL_RCC_OscConfig+0x9a8>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
 80035b6:	e03e      	b.n	8003636 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e039      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <HAL_RCC_OscConfig+0x9a0>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d12c      	bne.n	8003632 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e2:	3b01      	subs	r3, #1
 80035e4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d123      	bne.n	8003632 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d11b      	bne.n	8003632 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d113      	bne.n	8003632 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	3b01      	subs	r3, #1
 8003618:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d109      	bne.n	8003632 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40021000 	.word	0x40021000
 8003644:	019f800c 	.word	0x019f800c
 8003648:	feeefffc 	.word	0xfeeefffc

0800364c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e11c      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003664:	4b90      	ldr	r3, [pc, #576]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d910      	bls.n	8003694 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003672:	4b8d      	ldr	r3, [pc, #564]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	498b      	ldr	r1, [pc, #556]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b89      	ldr	r3, [pc, #548]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e104      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b81      	ldr	r3, [pc, #516]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d908      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b7e      	ldr	r3, [pc, #504]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	497b      	ldr	r1, [pc, #492]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8085 	beq.w	80037da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d11f      	bne.n	8003718 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d8:	4b74      	ldr	r3, [pc, #464]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0da      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036e8:	f000 fa58 	bl	8003b9c <RCC_GetSysClockFreqFromPLLSource>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a6f      	ldr	r2, [pc, #444]	@ (80038b0 <HAL_RCC_ClockConfig+0x264>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d947      	bls.n	8003786 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036f6:	4b6d      	ldr	r3, [pc, #436]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d141      	bne.n	8003786 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003702:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800370a:	4a68      	ldr	r2, [pc, #416]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 800370c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003710:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e036      	b.n	8003786 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d107      	bne.n	8003730 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003720:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d115      	bne.n	8003758 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b6      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003738:	4b5c      	ldr	r3, [pc, #368]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0aa      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003748:	4b58      	ldr	r3, [pc, #352]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0a2      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003758:	f000 f8b0 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 800375c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4a53      	ldr	r2, [pc, #332]	@ (80038b0 <HAL_RCC_ClockConfig+0x264>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d90f      	bls.n	8003786 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003766:	4b51      	ldr	r3, [pc, #324]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003772:	4b4e      	ldr	r3, [pc, #312]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800377a:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 800377c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003780:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003782:	2380      	movs	r3, #128	@ 0x80
 8003784:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b49      	ldr	r3, [pc, #292]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4946      	ldr	r1, [pc, #280]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fd fe62 	bl	8001460 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e013      	b.n	80037c8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fd fe5e 	bl	8001460 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d90a      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e06a      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 020c 	and.w	r2, r3, #12
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d1e2      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b80      	cmp	r3, #128	@ 0x80
 80037de:	d105      	bne.n	80037ec <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a31      	ldr	r2, [pc, #196]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80037e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ea:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003804:	429a      	cmp	r2, r3
 8003806:	d208      	bcs.n	800381a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4925      	ldr	r1, [pc, #148]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381a:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d210      	bcs.n	800384a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003828:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 020f 	bic.w	r2, r3, #15
 8003830:	491d      	ldr	r1, [pc, #116]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_ClockConfig+0x25c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e029      	b.n	800389e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4912      	ldr	r1, [pc, #72]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003874:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	490a      	ldr	r1, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x260>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003888:	f000 f8b6 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 800388c:	4603      	mov	r3, r0
 800388e:	4a09      	ldr	r2, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x268>)
 8003890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_ClockConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd fc18 	bl	80010cc <HAL_InitTick>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40021000 	.word	0x40021000
 80038b0:	04c4b400 	.word	0x04c4b400
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000004 	.word	0x20000004

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	@ 0x24
 80038c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b47      	ldr	r3, [pc, #284]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d4:	4b44      	ldr	r3, [pc, #272]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d121      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d11e      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038f0:	4b3d      	ldr	r3, [pc, #244]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038fc:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e005      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800390c:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003918:	4a34      	ldr	r2, [pc, #208]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x130>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003920:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10d      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d102      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003934:	4b2e      	ldr	r3, [pc, #184]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e004      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d101      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003940:	4b2c      	ldr	r3, [pc, #176]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003942:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d146      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800394a:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003954:	4b24      	ldr	r3, [pc, #144]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d003      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0xb4>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d00d      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0xce>
 800396e:	e019      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003970:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800397a:	68d2      	ldr	r2, [r2, #12]
 800397c:	0a12      	lsrs	r2, r2, #8
 800397e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	617b      	str	r3, [r7, #20]
        break;
 8003988:	e019      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800398a:	4a1a      	ldr	r2, [pc, #104]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x138>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003994:	68d2      	ldr	r2, [r2, #12]
 8003996:	0a12      	lsrs	r2, r2, #8
 8003998:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
        break;
 80039a2:	e00c      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	4a0e      	ldr	r2, [pc, #56]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039ae:	68d2      	ldr	r2, [r2, #12]
 80039b0:	0a12      	lsrs	r2, r2, #8
 80039b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	617b      	str	r3, [r7, #20]
        break;
 80039bc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	3301      	adds	r3, #1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d8:	69bb      	ldr	r3, [r7, #24]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08009784 	.word	0x08009784
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80039fc:	f7ff ff5e 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_RCC_GetHCLKFreq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	4903      	ldr	r1, [pc, #12]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	0800976c 	.word	0x0800976c

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff ffe8 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	0800977c 	.word	0x0800977c

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffd4 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0adb      	lsrs	r3, r3, #11
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800977c 	.word	0x0800977c

08003a70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <HAL_RCC_GetClockConfig+0x60>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 020f 	and.w	r2, r3, #15
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40022000 	.word	0x40022000

08003ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aec:	f7ff f83a 	bl	8002b64 <HAL_PWREx_GetVoltageRange>
 8003af0:	6138      	str	r0, [r7, #16]
 8003af2:	e014      	b.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b27      	ldr	r3, [pc, #156]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	4a26      	ldr	r2, [pc, #152]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b00:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b0c:	f7ff f82a 	bl	8002b64 <HAL_PWREx_GetVoltageRange>
 8003b10:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2a:	d10b      	bne.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b80      	cmp	r3, #128	@ 0x80
 8003b30:	d919      	bls.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b36:	d902      	bls.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b38:	2302      	movs	r3, #2
 8003b3a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b3c:	e013      	b.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003b42:	e010      	b.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b80      	cmp	r3, #128	@ 0x80
 8003b48:	d902      	bls.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e00a      	b.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b80      	cmp	r3, #128	@ 0x80
 8003b54:	d102      	bne.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b56:	2302      	movs	r3, #2
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e004      	b.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b70      	cmp	r3, #112	@ 0x70
 8003b60:	d101      	bne.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b66:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003b76:	4b08      	ldr	r3, [pc, #32]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40022000 	.word	0x40022000

08003b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ba2:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bac:	4b2e      	ldr	r3, [pc, #184]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d015      	beq.n	8003bec <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d839      	bhi.n	8003c3a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d01c      	beq.n	8003c06 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d133      	bne.n	8003c3a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd2:	4a26      	ldr	r2, [pc, #152]	@ (8003c6c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	0a12      	lsrs	r2, r2, #8
 8003be0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	613b      	str	r3, [r7, #16]
      break;
 8003bea:	e029      	b.n	8003c40 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bec:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bf6:	68d2      	ldr	r2, [r2, #12]
 8003bf8:	0a12      	lsrs	r2, r2, #8
 8003bfa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	613b      	str	r3, [r7, #16]
      break;
 8003c04:	e01c      	b.n	8003c40 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d107      	bne.n	8003c22 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c12:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e005      	b.n	8003c2e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c22:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003c2e:	4a11      	ldr	r2, [pc, #68]	@ (8003c74 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c36:	613b      	str	r3, [r7, #16]
        break;
 8003c38:	e002      	b.n	8003c40 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
      break;
 8003c3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c40:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	0e5b      	lsrs	r3, r3, #25
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c5a:	683b      	ldr	r3, [r7, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	007a1200 	.word	0x007a1200
 8003c74:	08009784 	.word	0x08009784

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d040      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c98:	2b80      	cmp	r3, #128	@ 0x80
 8003c9a:	d02a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d825      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ca0:	2b60      	cmp	r3, #96	@ 0x60
 8003ca2:	d026      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ca4:	2b60      	cmp	r3, #96	@ 0x60
 8003ca6:	d821      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d006      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d81d      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d010      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003cb8:	e018      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cba:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cc6:	e015      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fb56 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cd8:	e00c      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3320      	adds	r3, #32
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fc33 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cea:	e003      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77fb      	strb	r3, [r7, #31]
        break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d00:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d08:	497b      	ldr	r1, [pc, #492]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003d10:	e001      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d047      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d030      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d30:	d82a      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d36:	d02a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3c:	d824      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d42:	d008      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d81e      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d52:	d010      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d54:	e018      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d56:	4b68      	ldr	r3, [pc, #416]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4a67      	ldr	r2, [pc, #412]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d62:	e015      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3304      	adds	r3, #4
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fb08 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d74:	e00c      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3320      	adds	r3, #32
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fbe5 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	77fb      	strb	r3, [r7, #31]
        break;
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d90:	7ffb      	ldrb	r3, [r7, #31]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d96:	4b58      	ldr	r3, [pc, #352]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	4954      	ldr	r1, [pc, #336]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003dac:	e001      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
 8003db0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80ab 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	4a48      	ldr	r2, [pc, #288]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ddc:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dec:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a42      	ldr	r2, [pc, #264]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df8:	f7fd fb32 	bl	8001460 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfe:	e00f      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e00:	f7fd fb2e 	bl	8001460 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d908      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003e1e:	e006      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0e9      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003e2e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d164      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e36:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e40:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e60:	4b25      	ldr	r3, [pc, #148]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a24      	ldr	r2, [pc, #144]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b21      	ldr	r3, [pc, #132]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01f      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fae5 	bl	8001460 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e012      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd fae1 	bl	8001460 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d909      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003ebe:	e007      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0e5      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003ed0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	77bb      	strb	r3, [r7, #30]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7ffb      	ldrb	r3, [r7, #31]
 8003f02:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	4a9b      	ldr	r2, [pc, #620]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4b96      	ldr	r3, [pc, #600]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f30:	4992      	ldr	r1, [pc, #584]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b8d      	ldr	r3, [pc, #564]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f52:	498a      	ldr	r1, [pc, #552]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f66:	4b85      	ldr	r3, [pc, #532]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f74:	4981      	ldr	r1, [pc, #516]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f88:	4b7c      	ldr	r3, [pc, #496]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	4979      	ldr	r1, [pc, #484]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003faa:	4b74      	ldr	r3, [pc, #464]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	4970      	ldr	r1, [pc, #448]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fda:	4968      	ldr	r1, [pc, #416]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b63      	ldr	r3, [pc, #396]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	495f      	ldr	r1, [pc, #380]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004010:	4b5a      	ldr	r3, [pc, #360]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	4957      	ldr	r1, [pc, #348]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004032:	4b52      	ldr	r3, [pc, #328]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004038:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004040:	494e      	ldr	r1, [pc, #312]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d031      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800405c:	d00e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800405e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004062:	d814      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800406c:	d10f      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406e:	4b43      	ldr	r3, [pc, #268]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4a42      	ldr	r2, [pc, #264]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004078:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800407a:	e00c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f97c 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
        break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	7ffb      	ldrb	r3, [r7, #31]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800409c:	4b37      	ldr	r3, [pc, #220]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040aa:	4934      	ldr	r1, [pc, #208]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040b2:	e001      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c4:	4b2d      	ldr	r3, [pc, #180]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	492a      	ldr	r1, [pc, #168]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e6:	4b25      	ldr	r3, [pc, #148]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f4:	4921      	ldr	r1, [pc, #132]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004108:	4b1c      	ldr	r3, [pc, #112]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	4919      	ldr	r1, [pc, #100]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800412c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004130:	f023 0203 	bic.w	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	4910      	ldr	r1, [pc, #64]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02b      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415a:	4908      	ldr	r1, [pc, #32]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800416a:	d109      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a02      	ldr	r2, [pc, #8]	@ (800417c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004176:	60d3      	str	r3, [r2, #12]
 8004178:	e014      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2101      	movs	r1, #1
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f8f5 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800419a:	7ffb      	ldrb	r3, [r7, #31]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80041a0:	7ffb      	ldrb	r3, [r7, #31]
 80041a2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d04a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b8:	d108      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x554>
 80041ba:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041c0:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80041ca:	e012      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80041cc:	4b6b      	ldr	r3, [pc, #428]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041da:	4968      	ldr	r1, [pc, #416]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041e2:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e8:	4a64      	ldr	r2, [pc, #400]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80041ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041ee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041fa:	d10d      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f8bc 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800420c:	7ffb      	ldrb	r3, [r7, #31]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d019      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004212:	7ffb      	ldrb	r3, [r7, #31]
 8004214:	77bb      	strb	r3, [r7, #30]
 8004216:	e016      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800421c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004220:	d106      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004222:	4b56      	ldr	r3, [pc, #344]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4a55      	ldr	r2, [pc, #340]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422c:	60d3      	str	r3, [r2, #12]
 800422e:	e00a      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004238:	d105      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800423a:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4a4f      	ldr	r2, [pc, #316]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004244:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004260:	4946      	ldr	r1, [pc, #280]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800426c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004270:	d106      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004272:	4b42      	ldr	r3, [pc, #264]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a41      	ldr	r2, [pc, #260]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427c:	60d3      	str	r3, [r2, #12]
 800427e:	e011      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f875 	bl	8004380 <RCCEx_PLLSAI1_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
 80042a2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b0:	4b32      	ldr	r3, [pc, #200]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c0:	492e      	ldr	r1, [pc, #184]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d2:	d10c      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	2102      	movs	r1, #2
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f850 	bl	8004380 <RCCEx_PLLSAI1_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042e4:	7ffb      	ldrb	r3, [r7, #31]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80042ea:	7ffb      	ldrb	r3, [r7, #31]
 80042ec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004300:	f023 0204 	bic.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430a:	491c      	ldr	r1, [pc, #112]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800431e:	4b17      	ldr	r3, [pc, #92]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004324:	f023 0218 	bic.w	r2, r3, #24
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432e:	4913      	ldr	r1, [pc, #76]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004352:	490a      	ldr	r1, [pc, #40]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004364:	d105      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004366:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4a04      	ldr	r2, [pc, #16]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800436c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004370:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004372:	7fbb      	ldrb	r3, [r7, #30]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d018      	beq.n	80043c8 <RCCEx_PLLSAI1_Config+0x48>
 8004396:	2b03      	cmp	r3, #3
 8004398:	d81f      	bhi.n	80043da <RCCEx_PLLSAI1_Config+0x5a>
 800439a:	2b01      	cmp	r3, #1
 800439c:	d002      	beq.n	80043a4 <RCCEx_PLLSAI1_Config+0x24>
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d009      	beq.n	80043b6 <RCCEx_PLLSAI1_Config+0x36>
 80043a2:	e01a      	b.n	80043da <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043a4:	4b65      	ldr	r3, [pc, #404]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d117      	bne.n	80043e0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b4:	e014      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b6:	4b61      	ldr	r3, [pc, #388]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d110      	bne.n	80043e4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e00d      	b.n	80043e4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80043c8:	4b5c      	ldr	r3, [pc, #368]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d8:	e006      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      break;
 80043de:	e004      	b.n	80043ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80043e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f040 809f 	bne.w	8004530 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043f2:	4b52      	ldr	r3, [pc, #328]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a51      	ldr	r2, [pc, #324]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80043f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fd f82f 	bl	8001460 <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004404:	e00f      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004406:	f7fd f82b 	bl	8001460 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d908      	bls.n	8004426 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004414:	4b49      	ldr	r3, [pc, #292]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004424:	e006      	b.n	8004434 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004426:	4b45      	ldr	r3, [pc, #276]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e9      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x86>
 8004432:	e000      	b.n	8004436 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004434:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d179      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004442:	4b3e      	ldr	r3, [pc, #248]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6892      	ldr	r2, [r2, #8]
 800444e:	0211      	lsls	r1, r2, #8
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68d2      	ldr	r2, [r2, #12]
 8004454:	06d2      	lsls	r2, r2, #27
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6852      	ldr	r2, [r2, #4]
 800445c:	3a01      	subs	r2, #1
 800445e:	0112      	lsls	r2, r2, #4
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	4934      	ldr	r1, [pc, #208]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	610b      	str	r3, [r1, #16]
 800446e:	e033      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d118      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004476:	4b31      	ldr	r3, [pc, #196]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	4b32      	ldr	r3, [pc, #200]	@ (8004544 <RCCEx_PLLSAI1_Config+0x1c4>)
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6892      	ldr	r2, [r2, #8]
 8004482:	0211      	lsls	r1, r2, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6912      	ldr	r2, [r2, #16]
 8004488:	0852      	lsrs	r2, r2, #1
 800448a:	3a01      	subs	r2, #1
 800448c:	0552      	lsls	r2, r2, #21
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	3a01      	subs	r2, #1
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	4926      	ldr	r1, [pc, #152]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	610b      	str	r3, [r1, #16]
 80044a6:	e017      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044a8:	4b24      	ldr	r3, [pc, #144]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	4b26      	ldr	r3, [pc, #152]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1c8>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6892      	ldr	r2, [r2, #8]
 80044b4:	0211      	lsls	r1, r2, #8
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6952      	ldr	r2, [r2, #20]
 80044ba:	0852      	lsrs	r2, r2, #1
 80044bc:	3a01      	subs	r2, #1
 80044be:	0652      	lsls	r2, r2, #25
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	491a      	ldr	r1, [pc, #104]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044d8:	4b18      	ldr	r3, [pc, #96]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc ffbc 	bl	8001460 <HAL_GetTick>
 80044e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ea:	e00f      	b.n	800450c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ec:	f7fc ffb8 	bl	8001460 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d908      	bls.n	800450c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800450a:	e006      	b.n	800451a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0e9      	beq.n	80044ec <RCCEx_PLLSAI1_Config+0x16c>
 8004518:	e000      	b.n	800451c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800451a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004522:	4b06      	ldr	r3, [pc, #24]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4904      	ldr	r1, [pc, #16]	@ (800453c <RCCEx_PLLSAI1_Config+0x1bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	07ff800c 	.word	0x07ff800c
 8004544:	ff9f800c 	.word	0xff9f800c
 8004548:	f9ff800c 	.word	0xf9ff800c

0800454c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d018      	beq.n	8004594 <RCCEx_PLLSAI2_Config+0x48>
 8004562:	2b03      	cmp	r3, #3
 8004564:	d81f      	bhi.n	80045a6 <RCCEx_PLLSAI2_Config+0x5a>
 8004566:	2b01      	cmp	r3, #1
 8004568:	d002      	beq.n	8004570 <RCCEx_PLLSAI2_Config+0x24>
 800456a:	2b02      	cmp	r3, #2
 800456c:	d009      	beq.n	8004582 <RCCEx_PLLSAI2_Config+0x36>
 800456e:	e01a      	b.n	80045a6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004570:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d117      	bne.n	80045ac <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004580:	e014      	b.n	80045ac <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004582:	4b46      	ldr	r3, [pc, #280]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458a:	2b00      	cmp	r3, #0
 800458c:	d110      	bne.n	80045b0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004592:	e00d      	b.n	80045b0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004594:	4b41      	ldr	r3, [pc, #260]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e006      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      break;
 80045aa:	e004      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045ac:	bf00      	nop
 80045ae:	e002      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80045b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d169      	bne.n	8004690 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045bc:	4b37      	ldr	r3, [pc, #220]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a36      	ldr	r2, [pc, #216]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fc ff4a 	bl	8001460 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ce:	e00f      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045d0:	f7fc ff46 	bl	8001460 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d908      	bls.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045de:	4b2f      	ldr	r3, [pc, #188]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045ee:	e006      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045f0:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e9      	bne.n	80045d0 <RCCEx_PLLSAI2_Config+0x84>
 80045fc:	e000      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80045fe:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d144      	bne.n	8004690 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800460c:	4b23      	ldr	r3, [pc, #140]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <RCCEx_PLLSAI2_Config+0x154>)
 8004612:	4013      	ands	r3, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6892      	ldr	r2, [r2, #8]
 8004618:	0211      	lsls	r1, r2, #8
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68d2      	ldr	r2, [r2, #12]
 800461e:	06d2      	lsls	r2, r2, #27
 8004620:	4311      	orrs	r1, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6852      	ldr	r2, [r2, #4]
 8004626:	3a01      	subs	r2, #1
 8004628:	0112      	lsls	r2, r2, #4
 800462a:	4311      	orrs	r1, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	491a      	ldr	r1, [pc, #104]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 8004634:	4313      	orrs	r3, r2
 8004636:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004638:	4b18      	ldr	r3, [pc, #96]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a17      	ldr	r2, [pc, #92]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fc ff0c 	bl	8001460 <HAL_GetTick>
 8004648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800464a:	e00f      	b.n	800466c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800464c:	f7fc ff08 	bl	8001460 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d908      	bls.n	800466c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800465a:	4b10      	ldr	r3, [pc, #64]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800466a:	e006      	b.n	800467a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0e9      	beq.n	800464c <RCCEx_PLLSAI2_Config+0x100>
 8004678:	e000      	b.n	800467c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800467a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4904      	ldr	r1, [pc, #16]	@ (800469c <RCCEx_PLLSAI2_Config+0x150>)
 800468c:	4313      	orrs	r3, r2
 800468e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	07ff800c 	.word	0x07ff800c

080046a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d066      	beq.n	8004784 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fc1c 	bl	8000f08 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d045      	beq.n	8004772 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <HAL_RTC_Init+0xec>)
 80046e8:	22ca      	movs	r2, #202	@ 0xca
 80046ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RTC_Init+0xec>)
 80046ee:	2253      	movs	r2, #83	@ 0x53
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f872 	bl	80047dc <RTC_EnterInitMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004702:	4b23      	ldr	r3, [pc, #140]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	4a22      	ldr	r2, [pc, #136]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004708:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800470c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004710:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004712:	4b1f      	ldr	r3, [pc, #124]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	4319      	orrs	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	430b      	orrs	r3, r1
 8004726:	491a      	ldr	r1, [pc, #104]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	4916      	ldr	r1, [pc, #88]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f881 	bl	8004844 <RTC_ExitInitMode>
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10e      	bne.n	800476a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <HAL_RTC_Init+0xec>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a19      	ldr	r1, [r3, #32]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	4319      	orrs	r1, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	430b      	orrs	r3, r1
 8004764:	490a      	ldr	r1, [pc, #40]	@ (8004790 <HAL_RTC_Init+0xec>)
 8004766:	4313      	orrs	r3, r2
 8004768:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476a:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <HAL_RTC_Init+0xec>)
 800476c:	22ff      	movs	r2, #255	@ 0xff
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004770:	e001      	b.n	8004776 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40002800 	.word	0x40002800

08004794 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <HAL_RTC_WaitForSynchro+0x40>)
 800479e:	4a0e      	ldr	r2, [pc, #56]	@ (80047d8 <HAL_RTC_WaitForSynchro+0x44>)
 80047a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80047a2:	f7fc fe5d 	bl	8001460 <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047a8:	e009      	b.n	80047be <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047aa:	f7fc fe59 	bl	8001460 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047b8:	d901      	bls.n	80047be <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RTC_WaitForSynchro+0x40>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ef      	beq.n	80047aa <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40002800 	.word	0x40002800
 80047d8:	0001005c 	.word	0x0001005c

080047dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80047e8:	4b15      	ldr	r3, [pc, #84]	@ (8004840 <RTC_EnterInitMode+0x64>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d120      	bne.n	8004836 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047f4:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <RTC_EnterInitMode+0x64>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a11      	ldr	r2, [pc, #68]	@ (8004840 <RTC_EnterInitMode+0x64>)
 80047fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004800:	f7fc fe2e 	bl	8001460 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004806:	e00d      	b.n	8004824 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004808:	f7fc fe2a 	bl	8001460 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004816:	d905      	bls.n	8004824 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2203      	movs	r2, #3
 8004820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004824:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <RTC_EnterInitMode+0x64>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <RTC_EnterInitMode+0x5a>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d1e8      	bne.n	8004808 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40002800 	.word	0x40002800

08004844 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004850:	4b1a      	ldr	r3, [pc, #104]	@ (80048bc <RTC_ExitInitMode+0x78>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a19      	ldr	r2, [pc, #100]	@ (80048bc <RTC_ExitInitMode+0x78>)
 8004856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800485a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800485c:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <RTC_ExitInitMode+0x78>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10c      	bne.n	8004882 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff93 	bl	8004794 <HAL_RTC_WaitForSynchro>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01e      	beq.n	80048b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2203      	movs	r2, #3
 8004878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e017      	b.n	80048b2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <RTC_ExitInitMode+0x78>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4a0d      	ldr	r2, [pc, #52]	@ (80048bc <RTC_ExitInitMode+0x78>)
 8004888:	f023 0320 	bic.w	r3, r3, #32
 800488c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ff80 	bl	8004794 <HAL_RTC_WaitForSynchro>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2203      	movs	r2, #3
 800489e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <RTC_ExitInitMode+0x78>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4a04      	ldr	r2, [pc, #16]	@ (80048bc <RTC_ExitInitMode+0x78>)
 80048ac:	f043 0320 	orr.w	r3, r3, #32
 80048b0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40002800 	.word	0x40002800

080048c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	490f      	ldr	r1, [pc, #60]	@ (8004910 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	490c      	ldr	r1, [pc, #48]	@ (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	430b      	orrs	r3, r1
 80048fa:	4906      	ldr	r1, [pc, #24]	@ (8004914 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40002800 	.word	0x40002800
 8004914:	40003400 	.word	0x40003400

08004918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e095      	b.n	8004a56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d108      	bne.n	8004944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800493a:	d009      	beq.n	8004950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	61da      	str	r2, [r3, #28]
 8004942:	e005      	b.n	8004950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fb0a 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004986:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004990:	d902      	bls.n	8004998 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e002      	b.n	800499e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800499c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80049a6:	d007      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 0204 	and.w	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e049      	b.n	8004b04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f841 	bl	8004b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f000 f9f7 	bl	8004e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d001      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e04f      	b.n	8004bd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a23      	ldr	r2, [pc, #140]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01d      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d018      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1e      	ldr	r2, [pc, #120]	@ (8004bec <HAL_TIM_Base_Start_IT+0xcc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_Base_Start_IT+0x76>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a19      	ldr	r2, [pc, #100]	@ (8004bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d115      	bne.n	8004bc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d015      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0xb4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d011      	beq.n	8004bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	e008      	b.n	8004bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e000      	b.n	8004bd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f905 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8f7 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f908 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0204 	mvn.w	r2, #4
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8db 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8cd 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f8de 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0208 	mvn.w	r2, #8
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8b1 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8a3 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8b4 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f887 	bl	8004e52 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f879 	bl	8004e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f88a 	bl	8004e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0201 	mvn.w	r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fb ffc8 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	2b80      	cmp	r3, #128	@ 0x80
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9c:	2b80      	cmp	r3, #128	@ 0x80
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f914 	bl	8004fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b80      	cmp	r3, #128	@ 0x80
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f907 	bl	8004fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b40      	cmp	r3, #64	@ 0x40
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f838 	bl	8004e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0220 	mvn.w	r2, #32
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f8c7 	bl	8004fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa8 <TIM_Base_SetConfig+0x118>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a3c      	ldr	r2, [pc, #240]	@ (8004fac <TIM_Base_SetConfig+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8004fb0 <TIM_Base_SetConfig+0x120>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d01b      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa8 <TIM_Base_SetConfig+0x118>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d017      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	@ (8004fac <TIM_Base_SetConfig+0x11c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <TIM_Base_SetConfig+0x120>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00f      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <TIM_Base_SetConfig+0x128>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a27      	ldr	r2, [pc, #156]	@ (8004fbc <TIM_Base_SetConfig+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <TIM_Base_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <TIM_Base_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_Base_SetConfig+0xf8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <TIM_Base_SetConfig+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0xf8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a11      	ldr	r2, [pc, #68]	@ (8004fb8 <TIM_Base_SetConfig+0x128>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0xf8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a10      	ldr	r2, [pc, #64]	@ (8004fbc <TIM_Base_SetConfig+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0xf8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a0f      	ldr	r2, [pc, #60]	@ (8004fc0 <TIM_Base_SetConfig+0x130>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	615a      	str	r2, [r3, #20]
}
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e042      	b.n	8005098 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fb ff0f 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2224      	movs	r2, #36	@ 0x24
 800502e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8ba 	bl	80051bc <UART_SetConfig>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e022      	b.n	8005098 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fbae 	bl	80057bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fc35 	bl	8005900 <UART_CheckIdleState>
 8005096:	4603      	mov	r3, r0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	@ 0x28
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d17b      	bne.n	80051b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_UART_Transmit+0x26>
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e074      	b.n	80051b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2221      	movs	r2, #33	@ 0x21
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050da:	f7fc f9c1 	bl	8001460 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f8:	d108      	bne.n	800510c <HAL_UART_Transmit+0x6c>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e003      	b.n	8005114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005114:	e030      	b.n	8005178 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2180      	movs	r1, #128	@ 0x80
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fc97 	bl	8005a54 <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e03d      	b.n	80051b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	3302      	adds	r3, #2
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e007      	b.n	8005166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1c8      	bne.n	8005116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	2140      	movs	r1, #64	@ 0x40
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fc60 	bl	8005a54 <UART_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e006      	b.n	80051b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c0:	b08c      	sub	sp, #48	@ 0x30
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	431a      	orrs	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4baa      	ldr	r3, [pc, #680]	@ (8005494 <UART_SetConfig+0x2d8>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a9f      	ldr	r2, [pc, #636]	@ (8005498 <UART_SetConfig+0x2dc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005224:	4313      	orrs	r3, r2
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005232:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800523c:	430b      	orrs	r3, r1
 800523e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	f023 010f 	bic.w	r1, r3, #15
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a90      	ldr	r2, [pc, #576]	@ (800549c <UART_SetConfig+0x2e0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d125      	bne.n	80052ac <UART_SetConfig+0xf0>
 8005260:	4b8f      	ldr	r3, [pc, #572]	@ (80054a0 <UART_SetConfig+0x2e4>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d81a      	bhi.n	80052a4 <UART_SetConfig+0xe8>
 800526e:	a201      	add	r2, pc, #4	@ (adr r2, 8005274 <UART_SetConfig+0xb8>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005285 	.word	0x08005285
 8005278:	08005295 	.word	0x08005295
 800527c:	0800528d 	.word	0x0800528d
 8005280:	0800529d 	.word	0x0800529d
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528a:	e116      	b.n	80054ba <UART_SetConfig+0x2fe>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005292:	e112      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529a:	e10e      	b.n	80054ba <UART_SetConfig+0x2fe>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a2:	e10a      	b.n	80054ba <UART_SetConfig+0x2fe>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052aa:	e106      	b.n	80054ba <UART_SetConfig+0x2fe>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <UART_SetConfig+0x2e8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d138      	bne.n	8005328 <UART_SetConfig+0x16c>
 80052b6:	4b7a      	ldr	r3, [pc, #488]	@ (80054a0 <UART_SetConfig+0x2e4>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d82d      	bhi.n	8005320 <UART_SetConfig+0x164>
 80052c4:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <UART_SetConfig+0x110>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005321 	.word	0x08005321
 80052d4:	08005321 	.word	0x08005321
 80052d8:	08005321 	.word	0x08005321
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005321 	.word	0x08005321
 80052e8:	08005321 	.word	0x08005321
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005321 	.word	0x08005321
 80052f4:	08005321 	.word	0x08005321
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005319 	.word	0x08005319
 8005300:	2300      	movs	r3, #0
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e0d8      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005308:	2302      	movs	r3, #2
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530e:	e0d4      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005310:	2304      	movs	r3, #4
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005316:	e0d0      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005318:	2308      	movs	r3, #8
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531e:	e0cc      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005320:	2310      	movs	r3, #16
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005326:	e0c8      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5e      	ldr	r2, [pc, #376]	@ (80054a8 <UART_SetConfig+0x2ec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d125      	bne.n	800537e <UART_SetConfig+0x1c2>
 8005332:	4b5b      	ldr	r3, [pc, #364]	@ (80054a0 <UART_SetConfig+0x2e4>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800533c:	2b30      	cmp	r3, #48	@ 0x30
 800533e:	d016      	beq.n	800536e <UART_SetConfig+0x1b2>
 8005340:	2b30      	cmp	r3, #48	@ 0x30
 8005342:	d818      	bhi.n	8005376 <UART_SetConfig+0x1ba>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d00a      	beq.n	800535e <UART_SetConfig+0x1a2>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d814      	bhi.n	8005376 <UART_SetConfig+0x1ba>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <UART_SetConfig+0x19a>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d008      	beq.n	8005366 <UART_SetConfig+0x1aa>
 8005354:	e00f      	b.n	8005376 <UART_SetConfig+0x1ba>
 8005356:	2300      	movs	r3, #0
 8005358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535c:	e0ad      	b.n	80054ba <UART_SetConfig+0x2fe>
 800535e:	2302      	movs	r3, #2
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005364:	e0a9      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005366:	2304      	movs	r3, #4
 8005368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536c:	e0a5      	b.n	80054ba <UART_SetConfig+0x2fe>
 800536e:	2308      	movs	r3, #8
 8005370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005374:	e0a1      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005376:	2310      	movs	r3, #16
 8005378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537c:	e09d      	b.n	80054ba <UART_SetConfig+0x2fe>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a4a      	ldr	r2, [pc, #296]	@ (80054ac <UART_SetConfig+0x2f0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d125      	bne.n	80053d4 <UART_SetConfig+0x218>
 8005388:	4b45      	ldr	r3, [pc, #276]	@ (80054a0 <UART_SetConfig+0x2e4>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005392:	2bc0      	cmp	r3, #192	@ 0xc0
 8005394:	d016      	beq.n	80053c4 <UART_SetConfig+0x208>
 8005396:	2bc0      	cmp	r3, #192	@ 0xc0
 8005398:	d818      	bhi.n	80053cc <UART_SetConfig+0x210>
 800539a:	2b80      	cmp	r3, #128	@ 0x80
 800539c:	d00a      	beq.n	80053b4 <UART_SetConfig+0x1f8>
 800539e:	2b80      	cmp	r3, #128	@ 0x80
 80053a0:	d814      	bhi.n	80053cc <UART_SetConfig+0x210>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <UART_SetConfig+0x1f0>
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d008      	beq.n	80053bc <UART_SetConfig+0x200>
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x210>
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e082      	b.n	80054ba <UART_SetConfig+0x2fe>
 80053b4:	2302      	movs	r3, #2
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	e07e      	b.n	80054ba <UART_SetConfig+0x2fe>
 80053bc:	2304      	movs	r3, #4
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c2:	e07a      	b.n	80054ba <UART_SetConfig+0x2fe>
 80053c4:	2308      	movs	r3, #8
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	e076      	b.n	80054ba <UART_SetConfig+0x2fe>
 80053cc:	2310      	movs	r3, #16
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e072      	b.n	80054ba <UART_SetConfig+0x2fe>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a35      	ldr	r2, [pc, #212]	@ (80054b0 <UART_SetConfig+0x2f4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d12a      	bne.n	8005434 <UART_SetConfig+0x278>
 80053de:	4b30      	ldr	r3, [pc, #192]	@ (80054a0 <UART_SetConfig+0x2e4>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ec:	d01a      	beq.n	8005424 <UART_SetConfig+0x268>
 80053ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f2:	d81b      	bhi.n	800542c <UART_SetConfig+0x270>
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d00c      	beq.n	8005414 <UART_SetConfig+0x258>
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fe:	d815      	bhi.n	800542c <UART_SetConfig+0x270>
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <UART_SetConfig+0x250>
 8005404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005408:	d008      	beq.n	800541c <UART_SetConfig+0x260>
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0x270>
 800540c:	2300      	movs	r3, #0
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e052      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005414:	2302      	movs	r3, #2
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541a:	e04e      	b.n	80054ba <UART_SetConfig+0x2fe>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005422:	e04a      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542a:	e046      	b.n	80054ba <UART_SetConfig+0x2fe>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005432:	e042      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <UART_SetConfig+0x2dc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d13a      	bne.n	80054b4 <UART_SetConfig+0x2f8>
 800543e:	4b18      	ldr	r3, [pc, #96]	@ (80054a0 <UART_SetConfig+0x2e4>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005448:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800544c:	d01a      	beq.n	8005484 <UART_SetConfig+0x2c8>
 800544e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005452:	d81b      	bhi.n	800548c <UART_SetConfig+0x2d0>
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005458:	d00c      	beq.n	8005474 <UART_SetConfig+0x2b8>
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545e:	d815      	bhi.n	800548c <UART_SetConfig+0x2d0>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <UART_SetConfig+0x2b0>
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005468:	d008      	beq.n	800547c <UART_SetConfig+0x2c0>
 800546a:	e00f      	b.n	800548c <UART_SetConfig+0x2d0>
 800546c:	2300      	movs	r3, #0
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005472:	e022      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005474:	2302      	movs	r3, #2
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547a:	e01e      	b.n	80054ba <UART_SetConfig+0x2fe>
 800547c:	2304      	movs	r3, #4
 800547e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005482:	e01a      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005484:	2308      	movs	r3, #8
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548a:	e016      	b.n	80054ba <UART_SetConfig+0x2fe>
 800548c:	2310      	movs	r3, #16
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e012      	b.n	80054ba <UART_SetConfig+0x2fe>
 8005494:	cfff69f3 	.word	0xcfff69f3
 8005498:	40008000 	.word	0x40008000
 800549c:	40013800 	.word	0x40013800
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40004400 	.word	0x40004400
 80054a8:	40004800 	.word	0x40004800
 80054ac:	40004c00 	.word	0x40004c00
 80054b0:	40005000 	.word	0x40005000
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4ab0      	ldr	r2, [pc, #704]	@ (8005780 <UART_SetConfig+0x5c4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	f040 809b 	bne.w	80055fc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d827      	bhi.n	800551e <UART_SetConfig+0x362>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x318>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005509 	.word	0x08005509
 80054e0:	0800551f 	.word	0x0800551f
 80054e4:	0800550f 	.word	0x0800550f
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	0800551f 	.word	0x0800551f
 80054f0:	0800551f 	.word	0x0800551f
 80054f4:	08005517 	.word	0x08005517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f8:	f7fe fa92 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054fe:	e014      	b.n	800552a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fe faa2 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8005504:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005506:	e010      	b.n	800552a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005508:	4b9e      	ldr	r3, [pc, #632]	@ (8005784 <UART_SetConfig+0x5c8>)
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800550c:	e00d      	b.n	800552a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550e:	f7fe f9d5 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005512:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005514:	e009      	b.n	800552a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800551c:	e005      	b.n	800552a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8130 	beq.w	8005792 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	4a94      	ldr	r2, [pc, #592]	@ (8005788 <UART_SetConfig+0x5cc>)
 8005538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800553c:	461a      	mov	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	fbb3 f3f2 	udiv	r3, r3, r2
 8005544:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	429a      	cmp	r2, r3
 8005554:	d305      	bcc.n	8005562 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	429a      	cmp	r2, r3
 8005560:	d903      	bls.n	800556a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005568:	e113      	b.n	8005792 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	2200      	movs	r2, #0
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	60fa      	str	r2, [r7, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	4a84      	ldr	r2, [pc, #528]	@ (8005788 <UART_SetConfig+0x5cc>)
 8005578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800557c:	b29b      	uxth	r3, r3
 800557e:	2200      	movs	r2, #0
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005588:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800558c:	f7fa fe60 	bl	8000250 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4610      	mov	r0, r2
 8005596:	4619      	mov	r1, r3
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	020b      	lsls	r3, r1, #8
 80055a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055a6:	0202      	lsls	r2, r0, #8
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	6849      	ldr	r1, [r1, #4]
 80055ac:	0849      	lsrs	r1, r1, #1
 80055ae:	2000      	movs	r0, #0
 80055b0:	460c      	mov	r4, r1
 80055b2:	4605      	mov	r5, r0
 80055b4:	eb12 0804 	adds.w	r8, r2, r4
 80055b8:	eb43 0905 	adc.w	r9, r3, r5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	469a      	mov	sl, r3
 80055c4:	4693      	mov	fp, r2
 80055c6:	4652      	mov	r2, sl
 80055c8:	465b      	mov	r3, fp
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa fe3f 	bl	8000250 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4613      	mov	r3, r2
 80055d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055e0:	d308      	bcc.n	80055f4 <UART_SetConfig+0x438>
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055e8:	d204      	bcs.n	80055f4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e0ce      	b.n	8005792 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055fa:	e0ca      	b.n	8005792 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005604:	d166      	bne.n	80056d4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005606:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800560a:	2b08      	cmp	r3, #8
 800560c:	d827      	bhi.n	800565e <UART_SetConfig+0x4a2>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0x458>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe f9f2 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800563c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800563e:	e014      	b.n	800566a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe fa02 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005646:	e010      	b.n	800566a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b4e      	ldr	r3, [pc, #312]	@ (8005784 <UART_SetConfig+0x5c8>)
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800564c:	e00d      	b.n	800566a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe f935 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005654:	e009      	b.n	800566a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800565c:	e005      	b.n	800566a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8090 	beq.w	8005792 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	4a44      	ldr	r2, [pc, #272]	@ (8005788 <UART_SetConfig+0x5cc>)
 8005678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800567c:	461a      	mov	r2, r3
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	fbb3 f3f2 	udiv	r3, r3, r2
 8005684:	005a      	lsls	r2, r3, #1
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	441a      	add	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	fbb2 f3f3 	udiv	r3, r2, r3
 8005696:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2b0f      	cmp	r3, #15
 800569c:	d916      	bls.n	80056cc <UART_SetConfig+0x510>
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a4:	d212      	bcs.n	80056cc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f023 030f 	bic.w	r3, r3, #15
 80056ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	8bfb      	ldrh	r3, [r7, #30]
 80056be:	4313      	orrs	r3, r2
 80056c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	8bfa      	ldrh	r2, [r7, #30]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e062      	b.n	8005792 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056d2:	e05e      	b.n	8005792 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d828      	bhi.n	800572e <UART_SetConfig+0x572>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <UART_SetConfig+0x528>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800572f 	.word	0x0800572f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fe f98a 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800570c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800570e:	e014      	b.n	800573a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe f99a 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8005714:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005716:	e010      	b.n	800573a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <UART_SetConfig+0x5c8>)
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800571c:	e00d      	b.n	800573a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fe f8cd 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8005722:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005724:	e009      	b.n	800573a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800572c:	e005      	b.n	800573a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005738:	bf00      	nop
    }

    if (pclk != 0U)
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d028      	beq.n	8005792 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	4a10      	ldr	r2, [pc, #64]	@ (8005788 <UART_SetConfig+0x5cc>)
 8005746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574a:	461a      	mov	r2, r3
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	441a      	add	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d910      	bls.n	800578c <UART_SetConfig+0x5d0>
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d20c      	bcs.n	800578c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	b29a      	uxth	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e009      	b.n	8005792 <UART_SetConfig+0x5d6>
 800577e:	bf00      	nop
 8005780:	40008000 	.word	0x40008000
 8005784:	00f42400 	.word	0x00f42400
 8005788:	080097c4 	.word	0x080097c4
      }
      else
      {
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2201      	movs	r2, #1
 8005796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2201      	movs	r2, #1
 800579e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2200      	movs	r2, #0
 80057ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3730      	adds	r7, #48	@ 0x30
 80057b6:	46bd      	mov	sp, r7
 80057b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ba:	d10a      	bne.n	80058d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b098      	sub	sp, #96	@ 0x60
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005910:	f7fb fda6 	bl	8001460 <HAL_GetTick>
 8005914:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b08      	cmp	r3, #8
 8005922:	d12f      	bne.n	8005984 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005924:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592c:	2200      	movs	r2, #0
 800592e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f88e 	bl	8005a54 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d022      	beq.n	8005984 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005952:	653b      	str	r3, [r7, #80]	@ 0x50
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800596a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e6      	bne.n	800593e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e063      	b.n	8005a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d149      	bne.n	8005a26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599a:	2200      	movs	r2, #0
 800599c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f857 	bl	8005a54 <UART_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d03c      	beq.n	8005a26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80059cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e6      	bne.n	80059ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3308      	adds	r3, #8
 80059fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059fe:	61fa      	str	r2, [r7, #28]
 8005a00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	69b9      	ldr	r1, [r7, #24]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e012      	b.n	8005a4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3758      	adds	r7, #88	@ 0x58
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a64:	e049      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d045      	beq.n	8005afa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fb fcf7 	bl	8001460 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e048      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d031      	beq.n	8005afa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d110      	bne.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f838 	bl	8005b22 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e029      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad4:	d111      	bne.n	8005afa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f81e 	bl	8005b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e00f      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d0a6      	beq.n	8005a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b095      	sub	sp, #84	@ 0x54
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e3      	bne.n	8005b5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d118      	bne.n	8005bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0310 	bic.w	r3, r3, #16
 8005bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6979      	ldr	r1, [r7, #20]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005be2:	bf00      	nop
 8005be4:	3754      	adds	r7, #84	@ 0x54
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e027      	b.n	8005c54 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2224      	movs	r2, #36	@ 0x24
 8005c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e02d      	b.n	8005cd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	@ 0x24
 8005c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f84f 	bl	8005d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e02d      	b.n	8005d50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	@ 0x24
 8005d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f811 	bl	8005d58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d108      	bne.n	8005d7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d78:	e031      	b.n	8005dde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d7e:	2308      	movs	r3, #8
 8005d80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	0e5b      	lsrs	r3, r3, #25
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	0f5b      	lsrs	r3, r3, #29
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	7b3a      	ldrb	r2, [r7, #12]
 8005da6:	4911      	ldr	r1, [pc, #68]	@ (8005dec <UARTEx_SetNbDataToProcess+0x94>)
 8005da8:	5c8a      	ldrb	r2, [r1, r2]
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dae:	7b3a      	ldrb	r2, [r7, #12]
 8005db0:	490f      	ldr	r1, [pc, #60]	@ (8005df0 <UARTEx_SetNbDataToProcess+0x98>)
 8005db2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	7b7a      	ldrb	r2, [r7, #13]
 8005dc4:	4909      	ldr	r1, [pc, #36]	@ (8005dec <UARTEx_SetNbDataToProcess+0x94>)
 8005dc6:	5c8a      	ldrb	r2, [r1, r2]
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dcc:	7b7a      	ldrb	r2, [r7, #13]
 8005dce:	4908      	ldr	r1, [pc, #32]	@ (8005df0 <UARTEx_SetNbDataToProcess+0x98>)
 8005dd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	080097dc 	.word	0x080097dc
 8005df0:	080097e4 	.word	0x080097e4

08005df4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b08b      	sub	sp, #44	@ 0x2c
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	613b      	str	r3, [r7, #16]
  return result;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	e003      	b.n	8005e26 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	fab3 f383 	clz	r3, r3
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	2103      	movs	r1, #3
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	401a      	ands	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	fa93 f3a3 	rbit	r3, r3
 8005e3c:	61fb      	str	r3, [r7, #28]
  return result;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005e48:	2320      	movs	r3, #32
 8005e4a:	e003      	b.n	8005e54 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	372c      	adds	r7, #44	@ 0x2c
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b08b      	sub	sp, #44	@ 0x2c
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa93 f3a3 	rbit	r3, r3
 8005eb8:	613b      	str	r3, [r7, #16]
  return result;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	e003      	b.n	8005ed0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	fab3 f383 	clz	r3, r3
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	2103      	movs	r1, #3
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	401a      	ands	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	fa93 f3a3 	rbit	r3, r3
 8005ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005ef2:	2320      	movs	r3, #32
 8005ef4:	e003      	b.n	8005efe <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	fab3 f383 	clz	r3, r3
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	fa01 f303 	lsl.w	r3, r1, r3
 8005f06:	431a      	orrs	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005f0c:	bf00      	nop
 8005f0e:	372c      	adds	r7, #44	@ 0x2c
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b08b      	sub	sp, #44	@ 0x2c
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	613b      	str	r3, [r7, #16]
  return result;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005f3e:	2320      	movs	r3, #32
 8005f40:	e003      	b.n	8005f4a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	fab3 f383 	clz	r3, r3
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	2103      	movs	r1, #3
 8005f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	401a      	ands	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	fa93 f3a3 	rbit	r3, r3
 8005f60:	61fb      	str	r3, [r7, #28]
  return result;
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	e003      	b.n	8005f78 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	fab3 f383 	clz	r3, r3
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	431a      	orrs	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	60da      	str	r2, [r3, #12]
}
 8005f86:	bf00      	nop
 8005f88:	372c      	adds	r7, #44	@ 0x2c
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b08b      	sub	sp, #44	@ 0x2c
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1a      	ldr	r2, [r3, #32]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	fa93 f3a3 	rbit	r3, r3
 8005fac:	613b      	str	r3, [r7, #16]
  return result;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005fb8:	2320      	movs	r3, #32
 8005fba:	e003      	b.n	8005fc4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fab3 f383 	clz	r3, r3
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	210f      	movs	r1, #15
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	fa93 f3a3 	rbit	r3, r3
 8005fda:	61fb      	str	r3, [r7, #28]
  return result;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005fe6:	2320      	movs	r3, #32
 8005fe8:	e003      	b.n	8005ff2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006000:	bf00      	nop
 8006002:	372c      	adds	r7, #44	@ 0x2c
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800600c:	b480      	push	{r7}
 800600e:	b08b      	sub	sp, #44	@ 0x2c
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	fa93 f3a3 	rbit	r3, r3
 8006028:	613b      	str	r3, [r7, #16]
  return result;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006034:	2320      	movs	r3, #32
 8006036:	e003      	b.n	8006040 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	fab3 f383 	clz	r3, r3
 800603e:	b2db      	uxtb	r3, r3
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	210f      	movs	r1, #15
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	fa93 f3a3 	rbit	r3, r3
 8006058:	61fb      	str	r3, [r7, #28]
  return result;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006064:	2320      	movs	r3, #32
 8006066:	e003      	b.n	8006070 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	fab3 f383 	clz	r3, r3
 800606e:	b2db      	uxtb	r3, r3
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	fa01 f303 	lsl.w	r3, r1, r3
 8006078:	431a      	orrs	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800607e:	bf00      	nop
 8006080:	372c      	adds	r7, #44	@ 0x2c
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b088      	sub	sp, #32
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	fa93 f3a3 	rbit	r3, r3
 80060a0:	60fb      	str	r3, [r7, #12]
  return result;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <LL_GPIO_Init+0x26>
    return 32U;
 80060ac:	2320      	movs	r3, #32
 80060ae:	e003      	b.n	80060b8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fab3 f383 	clz	r3, r3
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80060ba:	e047      	b.n	800614c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	2101      	movs	r1, #1
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	4013      	ands	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d039      	beq.n	8006146 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d003      	beq.n	80060e2 <LL_GPIO_Init+0x58>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d10d      	bne.n	80060fe <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	461a      	mov	r2, r3
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff fed7 	bl	8005e9e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	461a      	mov	r2, r3
 80060f6:	69b9      	ldr	r1, [r7, #24]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff feb8 	bl	8005e6e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	461a      	mov	r2, r3
 8006104:	69b9      	ldr	r1, [r7, #24]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff06 	bl	8005f18 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d111      	bne.n	8006138 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2bff      	cmp	r3, #255	@ 0xff
 8006118:	d807      	bhi.n	800612a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	461a      	mov	r2, r3
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff ff35 	bl	8005f92 <LL_GPIO_SetAFPin_0_7>
 8006128:	e006      	b.n	8006138 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	461a      	mov	r2, r3
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ff6a 	bl	800600c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	461a      	mov	r2, r3
 800613e:	69b9      	ldr	r1, [r7, #24]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fe57 	bl	8005df4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3301      	adds	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1b0      	bne.n	80060bc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800616c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006170:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	b29b      	uxth	r3, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	4013      	ands	r3, r2
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800619a:	b084      	sub	sp, #16
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	f107 0014 	add.w	r0, r7, #20
 80061a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	b004      	add	sp, #16
 80061da:	4770      	bx	lr

080061dc <__NVIC_SetPriority>:
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	6039      	str	r1, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	db0a      	blt.n	8006206 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	490c      	ldr	r1, [pc, #48]	@ (8006228 <__NVIC_SetPriority+0x4c>)
 80061f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fa:	0152      	lsls	r2, r2, #5
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	440b      	add	r3, r1
 8006200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006204:	e00a      	b.n	800621c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4908      	ldr	r1, [pc, #32]	@ (800622c <__NVIC_SetPriority+0x50>)
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	3b04      	subs	r3, #4
 8006214:	0152      	lsls	r2, r2, #5
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	440b      	add	r3, r1
 800621a:	761a      	strb	r2, [r3, #24]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	e000e100 	.word	0xe000e100
 800622c:	e000ed00 	.word	0xe000ed00

08006230 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006234:	4b05      	ldr	r3, [pc, #20]	@ (800624c <SysTick_Handler+0x1c>)
 8006236:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006238:	f001 fc98 	bl	8007b6c <xTaskGetSchedulerState>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006242:	f002 fa05 	bl	8008650 <xPortSysTickHandler>
  }
}
 8006246:	bf00      	nop
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	e000e010 	.word	0xe000e010

08006250 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006254:	2100      	movs	r1, #0
 8006256:	f06f 0004 	mvn.w	r0, #4
 800625a:	f7ff ffbf 	bl	80061dc <__NVIC_SetPriority>
#endif
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626a:	f3ef 8305 	mrs	r3, IPSR
 800626e:	603b      	str	r3, [r7, #0]
  return(result);
 8006270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006276:	f06f 0305 	mvn.w	r3, #5
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e00c      	b.n	8006298 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <osKernelInitialize+0x44>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006286:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <osKernelInitialize+0x44>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800628c:	2300      	movs	r3, #0
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e002      	b.n	8006298 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006298:	687b      	ldr	r3, [r7, #4]
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000550 	.word	0x20000550

080062ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b2:	f3ef 8305 	mrs	r3, IPSR
 80062b6:	603b      	str	r3, [r7, #0]
  return(result);
 80062b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80062be:	f06f 0305 	mvn.w	r3, #5
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	e010      	b.n	80062e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062c6:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <osKernelStart+0x48>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d109      	bne.n	80062e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062ce:	f7ff ffbf 	bl	8006250 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062d2:	4b08      	ldr	r3, [pc, #32]	@ (80062f4 <osKernelStart+0x48>)
 80062d4:	2202      	movs	r2, #2
 80062d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062d8:	f001 f84e 	bl	8007378 <vTaskStartScheduler>
      stat = osOK;
 80062dc:	2300      	movs	r3, #0
 80062de:	607b      	str	r3, [r7, #4]
 80062e0:	e002      	b.n	80062e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295
 80062e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062e8:	687b      	ldr	r3, [r7, #4]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000550 	.word	0x20000550

080062f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4a07      	ldr	r2, [pc, #28]	@ (8006324 <vApplicationGetIdleTaskMemory+0x2c>)
 8006308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4a06      	ldr	r2, [pc, #24]	@ (8006328 <vApplicationGetIdleTaskMemory+0x30>)
 800630e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2280      	movs	r2, #128	@ 0x80
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000554 	.word	0x20000554
 8006328:	200005fc 	.word	0x200005fc

0800632c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <vApplicationGetTimerTaskMemory+0x2c>)
 800633c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a06      	ldr	r2, [pc, #24]	@ (800635c <vApplicationGetTimerTaskMemory+0x30>)
 8006342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800634a:	601a      	str	r2, [r3, #0]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	200007fc 	.word	0x200007fc
 800635c:	200008a4 	.word	0x200008a4

08006360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0208 	add.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f04f 32ff 	mov.w	r2, #4294967295
 8006378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f103 0208 	add.w	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f103 0208 	add.w	r2, r3, #8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d103      	bne.n	8006422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	e00c      	b.n	800643c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3308      	adds	r3, #8
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e002      	b.n	8006430 <vListInsert+0x2e>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d2f6      	bcs.n	800642a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6892      	ldr	r2, [r2, #8]
 800648a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6852      	ldr	r2, [r2, #4]
 8006494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	429a      	cmp	r2, r3
 800649e:	d103      	bne.n	80064a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1e5a      	subs	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <xQueueGenericReset+0x1c>
 80064dc:	f002 f9c4 	bl	8008868 <ulSetInterruptMask>
 80064e0:	bf00      	nop
 80064e2:	e7fd      	b.n	80064e0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80064e4:	f002 f888 	bl	80085f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006514:	3b01      	subs	r3, #1
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	22ff      	movs	r2, #255	@ 0xff
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	22ff      	movs	r2, #255	@ 0xff
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10e      	bne.n	8006558 <xQueueGenericReset+0x90>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d014      	beq.n	800656c <xQueueGenericReset+0xa4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3310      	adds	r3, #16
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f972 	bl	8007830 <xTaskRemoveFromEventList>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <xQueueGenericReset+0xa4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006552:	f002 f83f 	bl	80085d4 <vPortYield>
 8006556:	e009      	b.n	800656c <xQueueGenericReset+0xa4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3310      	adds	r3, #16
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff feff 	bl	8006360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3324      	adds	r3, #36	@ 0x24
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fefa 	bl	8006360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800656c:	f002 f856 	bl	800861c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006570:	2301      	movs	r3, #1
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af02      	add	r7, sp, #8
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <xQueueGenericCreateStatic+0x1c>
 800658e:	f002 f96b 	bl	8008868 <ulSetInterruptMask>
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <xQueueGenericCreateStatic+0x2a>
 800659c:	f002 f964 	bl	8008868 <ulSetInterruptMask>
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <xQueueGenericCreateStatic+0x26>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <xQueueGenericCreateStatic+0x36>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <xQueueGenericCreateStatic+0x3a>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <xQueueGenericCreateStatic+0x3c>
 80065b4:	2300      	movs	r3, #0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericCreateStatic+0x48>
 80065ba:	f002 f955 	bl	8008868 <ulSetInterruptMask>
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <xQueueGenericCreateStatic+0x54>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <xQueueGenericCreateStatic+0x58>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericCreateStatic+0x5a>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <xQueueGenericCreateStatic+0x66>
 80065d8:	f002 f946 	bl	8008868 <ulSetInterruptMask>
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xQueueGenericCreateStatic+0x62>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065e0:	2350      	movs	r3, #80	@ 0x50
 80065e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b50      	cmp	r3, #80	@ 0x50
 80065e8:	d003      	beq.n	80065f2 <xQueueGenericCreateStatic+0x78>
 80065ea:	f002 f93d 	bl	8008868 <ulSetInterruptMask>
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065f2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00d      	beq.n	800661a <xQueueGenericCreateStatic+0xa0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006606:	f897 2020 	ldrb.w	r2, [r7, #32]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4613      	mov	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f838 	bl	800668a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800661a:	697b      	ldr	r3, [r7, #20]
	}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	@ 0x28
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <xQueueGenericCreate+0x1c>
 8006638:	f002 f916 	bl	8008868 <ulSetInterruptMask>
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	fb02 f303 	mul.w	r3, r2, r3
 8006648:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3350      	adds	r3, #80	@ 0x50
 800664e:	4618      	mov	r0, r3
 8006650:	f002 f972 	bl	8008938 <pvPortMalloc>
 8006654:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d011      	beq.n	8006680 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3350      	adds	r3, #80	@ 0x50
 8006664:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800666e:	79fa      	ldrb	r2, [r7, #7]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 f805 	bl	800668a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006680:	69bb      	ldr	r3, [r7, #24]
	}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e002      	b.n	80066ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066b8:	2101      	movs	r1, #1
 80066ba:	69b8      	ldr	r0, [r7, #24]
 80066bc:	f7ff ff04 	bl	80064c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	78fa      	ldrb	r2, [r7, #3]
 80066c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066f0:	2300      	movs	r3, #0
 80066f2:	2200      	movs	r2, #0
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f81c 	bl	8006734 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	461a      	mov	r2, r3
 800671a:	6939      	ldr	r1, [r7, #16]
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	f7ff ff81 	bl	8006624 <xQueueGenericCreate>
 8006722:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff ffd3 	bl	80066d0 <prvInitialiseMutex>

		return xNewQueue;
 800672a:	68fb      	ldr	r3, [r7, #12]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	@ 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <xQueueGenericSend+0x24>
 8006750:	f002 f88a 	bl	8008868 <ulSetInterruptMask>
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueGenericSend+0x32>
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueGenericSend+0x36>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSend+0x38>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <xQueueGenericSend+0x44>
 8006770:	f002 f87a 	bl	8008868 <ulSetInterruptMask>
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d103      	bne.n	8006786 <xQueueGenericSend+0x52>
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <xQueueGenericSend+0x56>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <xQueueGenericSend+0x58>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <xQueueGenericSend+0x64>
 8006790:	f002 f86a 	bl	8008868 <ulSetInterruptMask>
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueGenericSend+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006798:	f001 f9e8 	bl	8007b6c <xTaskGetSchedulerState>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <xQueueGenericSend+0x74>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <xQueueGenericSend+0x78>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <xQueueGenericSend+0x7a>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <xQueueGenericSend+0x86>
 80067b2:	f002 f859 	bl	8008868 <ulSetInterruptMask>
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xQueueGenericSend+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ba:	f001 ff1d 	bl	80085f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <xQueueGenericSend+0x9c>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d11d      	bne.n	800680c <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	6a38      	ldr	r0, [r7, #32]
 80067d6:	f000 faa3 	bl	8006d20 <prvCopyDataToQueue>
 80067da:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <xQueueGenericSend+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	3324      	adds	r3, #36	@ 0x24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f001 f821 	bl	8007830 <xTaskRemoveFromEventList>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067f4:	f001 feee 	bl	80085d4 <vPortYield>
 80067f8:	e004      	b.n	8006804 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006800:	f001 fee8 	bl	80085d4 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006804:	f001 ff0a 	bl	800861c <vPortExitCritical>
				return pdPASS;
 8006808:	2301      	movs	r3, #1
 800680a:	e05c      	b.n	80068c6 <xQueueGenericSend+0x192>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d103      	bne.n	800681a <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006812:	f001 ff03 	bl	800861c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006816:	2300      	movs	r3, #0
 8006818:	e055      	b.n	80068c6 <xQueueGenericSend+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006820:	f107 0314 	add.w	r3, r7, #20
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f85f 	bl	80078e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800682a:	2301      	movs	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800682e:	f001 fef5 	bl	800861c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006832:	f000 fe01 	bl	8007438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006836:	f001 fedf 	bl	80085f8 <vPortEnterCritical>
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006840:	b25b      	sxtb	r3, r3
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d103      	bne.n	8006850 <xQueueGenericSend+0x11c>
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006856:	b25b      	sxtb	r3, r3
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d103      	bne.n	8006866 <xQueueGenericSend+0x132>
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006866:	f001 fed9 	bl	800861c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800686a:	1d3a      	adds	r2, r7, #4
 800686c:	f107 0314 	add.w	r3, r7, #20
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f001 f84e 	bl	8007914 <xTaskCheckForTimeOut>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11d      	bne.n	80068ba <xQueueGenericSend+0x186>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800687e:	6a38      	ldr	r0, [r7, #32]
 8006880:	f000 fb46 	bl	8006f10 <prvIsQueueFull>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d011      	beq.n	80068ae <xQueueGenericSend+0x17a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	3310      	adds	r3, #16
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	4611      	mov	r1, r2
 8006892:	4618      	mov	r0, r3
 8006894:	f000 ff8a 	bl	80077ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006898:	6a38      	ldr	r0, [r7, #32]
 800689a:	f000 fad1 	bl	8006e40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800689e:	f000 fdd9 	bl	8007454 <xTaskResumeAll>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d188      	bne.n	80067ba <xQueueGenericSend+0x86>
				{
					portYIELD_WITHIN_API();
 80068a8:	f001 fe94 	bl	80085d4 <vPortYield>
 80068ac:	e785      	b.n	80067ba <xQueueGenericSend+0x86>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068ae:	6a38      	ldr	r0, [r7, #32]
 80068b0:	f000 fac6 	bl	8006e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b4:	f000 fdce 	bl	8007454 <xTaskResumeAll>
 80068b8:	e77f      	b.n	80067ba <xQueueGenericSend+0x86>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068ba:	6a38      	ldr	r0, [r7, #32]
 80068bc:	f000 fac0 	bl	8006e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068c0:	f000 fdc8 	bl	8007454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068c4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3728      	adds	r7, #40	@ 0x28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08a      	sub	sp, #40	@ 0x28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <xQueueGenericSendFromISR+0x20>
 80068e6:	f001 ffbf 	bl	8008868 <ulSetInterruptMask>
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <xQueueGenericSendFromISR+0x2e>
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <xQueueGenericSendFromISR+0x32>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <xQueueGenericSendFromISR+0x34>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <xQueueGenericSendFromISR+0x40>
 8006906:	f001 ffaf 	bl	8008868 <ulSetInterruptMask>
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d103      	bne.n	800691c <xQueueGenericSendFromISR+0x4e>
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	2b01      	cmp	r3, #1
 800691a:	d101      	bne.n	8006920 <xQueueGenericSendFromISR+0x52>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <xQueueGenericSendFromISR+0x54>
 8006920:	2300      	movs	r3, #0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <xQueueGenericSendFromISR+0x60>
 8006926:	f001 ff9f 	bl	8008868 <ulSetInterruptMask>
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xQueueGenericSendFromISR+0x5c>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800692e:	f001 ff9b 	bl	8008868 <ulSetInterruptMask>
 8006932:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xQueueGenericSendFromISR+0x78>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d12d      	bne.n	80069a2 <xQueueGenericSendFromISR+0xd4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6a38      	ldr	r0, [r7, #32]
 800695a:	f000 f9e1 	bl	8006d20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800695e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d112      	bne.n	800698e <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <xQueueGenericSendFromISR+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	3324      	adds	r3, #36	@ 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 ff5b 	bl	8007830 <xTaskRemoveFromEventList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <xQueueGenericSendFromISR+0xce>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <xQueueGenericSendFromISR+0xce>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e006      	b.n	800699c <xQueueGenericSendFromISR+0xce>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800698e:	7efb      	ldrb	r3, [r7, #27]
 8006990:	3301      	adds	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	b25a      	sxtb	r2, r3
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800699c:	2301      	movs	r3, #1
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 80069a0:	e001      	b.n	80069a6 <xQueueGenericSendFromISR+0xd8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80069a6:	69f8      	ldr	r0, [r7, #28]
 80069a8:	f001 ff6b 	bl	8008882 <vClearInterruptMask>

	return xReturn;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	@ 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	@ 0x28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <xQueueReceive+0x22>
 80069d0:	f001 ff4a 	bl	8008868 <ulSetInterruptMask>
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <xQueueReceive+0x30>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <xQueueReceive+0x34>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <xQueueReceive+0x36>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <xQueueReceive+0x42>
 80069f0:	f001 ff3a 	bl	8008868 <ulSetInterruptMask>
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xQueueReceive+0x3e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069f8:	f001 f8b8 	bl	8007b6c <xTaskGetSchedulerState>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <xQueueReceive+0x52>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueReceive+0x56>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueReceive+0x58>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <xQueueReceive+0x64>
 8006a12:	f001 ff29 	bl	8008868 <ulSetInterruptMask>
 8006a16:	bf00      	nop
 8006a18:	e7fd      	b.n	8006a16 <xQueueReceive+0x60>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1a:	f001 fded 	bl	80085f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a22:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d019      	beq.n	8006a5e <xQueueReceive+0xa8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	6a38      	ldr	r0, [r7, #32]
 8006a2e:	f000 f9e1 	bl	8006df4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <xQueueReceive+0xa0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3310      	adds	r3, #16
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fef2 	bl	8007830 <xTaskRemoveFromEventList>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <xQueueReceive+0xa0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a52:	f001 fdbf 	bl	80085d4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a56:	f001 fde1 	bl	800861c <vPortExitCritical>
				return pdPASS;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e063      	b.n	8006b26 <xQueueReceive+0x170>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <xQueueReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a64:	f001 fdda 	bl	800861c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e05c      	b.n	8006b26 <xQueueReceive+0x170>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <xQueueReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a72:	f107 0314 	add.w	r3, r7, #20
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ff36 	bl	80078e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a80:	f001 fdcc 	bl	800861c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a84:	f000 fcd8 	bl	8007438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a88:	f001 fdb6 	bl	80085f8 <vPortEnterCritical>
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a92:	b25b      	sxtb	r3, r3
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d103      	bne.n	8006aa2 <xQueueReceive+0xec>
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d103      	bne.n	8006ab8 <xQueueReceive+0x102>
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ab8:	f001 fdb0 	bl	800861c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006abc:	1d3a      	adds	r2, r7, #4
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 ff25 	bl	8007914 <xTaskCheckForTimeOut>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11d      	bne.n	8006b0c <xQueueReceive+0x156>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad0:	6a38      	ldr	r0, [r7, #32]
 8006ad2:	f000 fa07 	bl	8006ee4 <prvIsQueueEmpty>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d011      	beq.n	8006b00 <xQueueReceive+0x14a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	3324      	adds	r3, #36	@ 0x24
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fe61 	bl	80077ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aea:	6a38      	ldr	r0, [r7, #32]
 8006aec:	f000 f9a8 	bl	8006e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006af0:	f000 fcb0 	bl	8007454 <xTaskResumeAll>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d18f      	bne.n	8006a1a <xQueueReceive+0x64>
				{
					portYIELD_WITHIN_API();
 8006afa:	f001 fd6b 	bl	80085d4 <vPortYield>
 8006afe:	e78c      	b.n	8006a1a <xQueueReceive+0x64>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b00:	6a38      	ldr	r0, [r7, #32]
 8006b02:	f000 f99d 	bl	8006e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b06:	f000 fca5 	bl	8007454 <xTaskResumeAll>
 8006b0a:	e786      	b.n	8006a1a <xQueueReceive+0x64>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b0c:	6a38      	ldr	r0, [r7, #32]
 8006b0e:	f000 f997 	bl	8006e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b12:	f000 fc9f 	bl	8007454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b16:	6a38      	ldr	r0, [r7, #32]
 8006b18:	f000 f9e4 	bl	8006ee4 <prvIsQueueEmpty>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f43f af7b 	beq.w	8006a1a <xQueueReceive+0x64>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	@ 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b08a      	sub	sp, #40	@ 0x28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <xQueueSemaphoreTake+0x24>
 8006b4a:	f001 fe8d 	bl	8008868 <ulSetInterruptMask>
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <xQueueSemaphoreTake+0x34>
 8006b5a:	f001 fe85 	bl	8008868 <ulSetInterruptMask>
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <xQueueSemaphoreTake+0x30>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b62:	f001 f803 	bl	8007b6c <xTaskGetSchedulerState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xQueueSemaphoreTake+0x44>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <xQueueSemaphoreTake+0x48>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xQueueSemaphoreTake+0x4a>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <xQueueSemaphoreTake+0x56>
 8006b7c:	f001 fe74 	bl	8008868 <ulSetInterruptMask>
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <xQueueSemaphoreTake+0x52>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b84:	f001 fd38 	bl	80085f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01e      	beq.n	8006bd2 <xQueueSemaphoreTake+0xa4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	1e5a      	subs	r2, r3, #1
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <xQueueSemaphoreTake+0x80>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ba4:	f001 f93c 	bl	8007e20 <pvTaskIncrementMutexHeldCount>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <xQueueSemaphoreTake+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	3310      	adds	r3, #16
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fe38 	bl	8007830 <xTaskRemoveFromEventList>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <xQueueSemaphoreTake+0x9c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bc6:	f001 fd05 	bl	80085d4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bca:	f001 fd27 	bl	800861c <vPortExitCritical>
				return pdPASS;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e08a      	b.n	8006ce8 <xQueueSemaphoreTake+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xQueueSemaphoreTake+0xc0>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <xQueueSemaphoreTake+0xb8>
 8006bde:	f001 fe43 	bl	8008868 <ulSetInterruptMask>
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xQueueSemaphoreTake+0xb4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006be6:	f001 fd19 	bl	800861c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e07c      	b.n	8006ce8 <xQueueSemaphoreTake+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <xQueueSemaphoreTake+0xd4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fe75 	bl	80078e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c02:	f001 fd0b 	bl	800861c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c06:	f000 fc17 	bl	8007438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c0a:	f001 fcf5 	bl	80085f8 <vPortEnterCritical>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c14:	b25b      	sxtb	r3, r3
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d103      	bne.n	8006c24 <xQueueSemaphoreTake+0xf6>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d103      	bne.n	8006c3a <xQueueSemaphoreTake+0x10c>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c3a:	f001 fcef 	bl	800861c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c3e:	463a      	mov	r2, r7
 8006c40:	f107 030c 	add.w	r3, r7, #12
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 fe64 	bl	8007914 <xTaskCheckForTimeOut>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d12c      	bne.n	8006cac <xQueueSemaphoreTake+0x17e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c52:	69f8      	ldr	r0, [r7, #28]
 8006c54:	f000 f946 	bl	8006ee4 <prvIsQueueEmpty>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d020      	beq.n	8006ca0 <xQueueSemaphoreTake+0x172>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <xQueueSemaphoreTake+0x14c>
					{
						taskENTER_CRITICAL();
 8006c66:	f001 fcc7 	bl	80085f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ff9a 	bl	8007ba8 <xTaskPriorityInherit>
 8006c74:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8006c76:	f001 fcd1 	bl	800861c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3324      	adds	r3, #36	@ 0x24
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fd92 	bl	80077ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c88:	69f8      	ldr	r0, [r7, #28]
 8006c8a:	f000 f8d9 	bl	8006e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c8e:	f000 fbe1 	bl	8007454 <xTaskResumeAll>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f47f af75 	bne.w	8006b84 <xQueueSemaphoreTake+0x56>
				{
					portYIELD_WITHIN_API();
 8006c9a:	f001 fc9b 	bl	80085d4 <vPortYield>
 8006c9e:	e771      	b.n	8006b84 <xQueueSemaphoreTake+0x56>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ca0:	69f8      	ldr	r0, [r7, #28]
 8006ca2:	f000 f8cd 	bl	8006e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca6:	f000 fbd5 	bl	8007454 <xTaskResumeAll>
 8006caa:	e76b      	b.n	8006b84 <xQueueSemaphoreTake+0x56>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cac:	69f8      	ldr	r0, [r7, #28]
 8006cae:	f000 f8c7 	bl	8006e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cb2:	f000 fbcf 	bl	8007454 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb6:	69f8      	ldr	r0, [r7, #28]
 8006cb8:	f000 f914 	bl	8006ee4 <prvIsQueueEmpty>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f43f af60 	beq.w	8006b84 <xQueueSemaphoreTake+0x56>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00d      	beq.n	8006ce6 <xQueueSemaphoreTake+0x1b8>
					{
						taskENTER_CRITICAL();
 8006cca:	f001 fc95 	bl	80085f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006cce:	69f8      	ldr	r0, [r7, #28]
 8006cd0:	f000 f80e 	bl	8006cf0 <prvGetDisinheritPriorityAfterTimeout>
 8006cd4:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f82b 	bl	8007d38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ce2:	f001 fc9b 	bl	800861c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3728      	adds	r7, #40	@ 0x28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d006      	beq.n	8006d0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e001      	b.n	8006d12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d12:	68fb      	ldr	r3, [r7, #12]
	}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d14d      	bne.n	8006de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ff94 	bl	8007c78 <xTaskPriorityDisinherit>
 8006d50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	e043      	b.n	8006de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d119      	bne.n	8006d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6858      	ldr	r0, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	f002 f860 	bl	8008e30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	441a      	add	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d32b      	bcc.n	8006de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	e026      	b.n	8006de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68d8      	ldr	r0, [r3, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	f002 f846 	bl	8008e30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dac:	425b      	negs	r3, r3
 8006dae:	441a      	add	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d207      	bcs.n	8006dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	425b      	negs	r3, r3
 8006dca:	441a      	add	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d105      	bne.n	8006de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d018      	beq.n	8006e38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	441a      	add	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d303      	bcc.n	8006e28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68d9      	ldr	r1, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	461a      	mov	r2, r3
 8006e32:	6838      	ldr	r0, [r7, #0]
 8006e34:	f001 fffc 	bl	8008e30 <memcpy>
	}
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e48:	f001 fbd6 	bl	80085f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e54:	e011      	b.n	8006e7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3324      	adds	r3, #36	@ 0x24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fce4 	bl	8007830 <xTaskRemoveFromEventList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e6e:	f000 fda5 	bl	80079bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dce9      	bgt.n	8006e56 <prvUnlockQueue+0x16>
 8006e82:	e000      	b.n	8006e86 <prvUnlockQueue+0x46>
					break;
 8006e84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	22ff      	movs	r2, #255	@ 0xff
 8006e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e8e:	f001 fbc5 	bl	800861c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e92:	f001 fbb1 	bl	80085f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e9e:	e011      	b.n	8006ec4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3310      	adds	r3, #16
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fcbf 	bl	8007830 <xTaskRemoveFromEventList>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006eb8:	f000 fd80 	bl	80079bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dce9      	bgt.n	8006ea0 <prvUnlockQueue+0x60>
 8006ecc:	e000      	b.n	8006ed0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ece:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22ff      	movs	r2, #255	@ 0xff
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ed8:	f001 fba0 	bl	800861c <vPortExitCritical>
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eec:	f001 fb84 	bl	80085f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e001      	b.n	8006f02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f02:	f001 fb8b 	bl	800861c <vPortExitCritical>

	return xReturn;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f18:	f001 fb6e 	bl	80085f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d102      	bne.n	8006f2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e001      	b.n	8006f32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f32:	f001 fb73 	bl	800861c <vPortExitCritical>

	return xReturn;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e014      	b.n	8006f7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f50:	4a0f      	ldr	r2, [pc, #60]	@ (8006f90 <vQueueAddToRegistry+0x50>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f5c:	490c      	ldr	r1, [pc, #48]	@ (8006f90 <vQueueAddToRegistry+0x50>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f66:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <vQueueAddToRegistry+0x50>)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f72:	e006      	b.n	8006f82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b07      	cmp	r3, #7
 8006f7e:	d9e7      	bls.n	8006f50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	20000ca4 	.word	0x20000ca4

08006f94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fa4:	f001 fb28 	bl	80085f8 <vPortEnterCritical>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fae:	b25b      	sxtb	r3, r3
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb4:	d103      	bne.n	8006fbe <vQueueWaitForMessageRestricted+0x2a>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d103      	bne.n	8006fd4 <vQueueWaitForMessageRestricted+0x40>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fd4:	f001 fb22 	bl	800861c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	3324      	adds	r3, #36	@ 0x24
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fbfd 	bl	80077e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fee:	6978      	ldr	r0, [r7, #20]
 8006ff0:	f7ff ff26 	bl	8006e40 <prvUnlockQueue>
	}
 8006ff4:	bf00      	nop
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	@ 0x30
 8007000:	af04      	add	r7, sp, #16
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <xTaskCreateStatic+0x1c>
 8007010:	f001 fc2a 	bl	8008868 <ulSetInterruptMask>
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <xTaskCreateStatic+0x2a>
 800701e:	f001 fc23 	bl	8008868 <ulSetInterruptMask>
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <xTaskCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007026:	23a8      	movs	r3, #168	@ 0xa8
 8007028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2ba8      	cmp	r3, #168	@ 0xa8
 800702e:	d003      	beq.n	8007038 <xTaskCreateStatic+0x3c>
 8007030:	f001 fc1a 	bl	8008868 <ulSetInterruptMask>
 8007034:	bf00      	nop
 8007036:	e7fd      	b.n	8007034 <xTaskCreateStatic+0x38>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007038:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	2b00      	cmp	r3, #0
 800703e:	d01e      	beq.n	800707e <xTaskCreateStatic+0x82>
 8007040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01b      	beq.n	800707e <xTaskCreateStatic+0x82>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007058:	2300      	movs	r3, #0
 800705a:	9303      	str	r3, [sp, #12]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	9302      	str	r3, [sp, #8]
 8007060:	f107 0318 	add.w	r3, r7, #24
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f851 	bl	8007118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007076:	69f8      	ldr	r0, [r7, #28]
 8007078:	f000 f8f0 	bl	800725c <prvAddNewTaskToReadyList>
 800707c:	e001      	b.n	8007082 <xTaskCreateStatic+0x86>
		}
		else
		{
			xReturn = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007082:	69bb      	ldr	r3, [r7, #24]
	}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	@ 0x30
 8007090:	af04      	add	r7, sp, #16
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800709c:	88fb      	ldrh	r3, [r7, #6]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fc49 	bl	8008938 <pvPortMalloc>
 80070a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00e      	beq.n	80070cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070ae:	20a8      	movs	r0, #168	@ 0xa8
 80070b0:	f001 fc42 	bl	8008938 <pvPortMalloc>
 80070b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80070c2:	e005      	b.n	80070d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070c4:	6978      	ldr	r0, [r7, #20]
 80070c6:	f001 fced 	bl	8008aa4 <vPortFree>
 80070ca:	e001      	b.n	80070d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d017      	beq.n	8007106 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	2300      	movs	r3, #0
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	9302      	str	r3, [sp, #8]
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f80f 	bl	8007118 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070fa:	69f8      	ldr	r0, [r7, #28]
 80070fc:	f000 f8ae 	bl	800725c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007100:	2301      	movs	r3, #1
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e002      	b.n	800710c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800710c:	69bb      	ldr	r3, [r7, #24]
	}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	461a      	mov	r2, r3
 8007130:	21a5      	movs	r1, #165	@ 0xa5
 8007132:	f001 fdf3 	bl	8008d1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007140:	3b01      	subs	r3, #1
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 0307 	bic.w	r3, r3, #7
 800714e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <prvInitialiseNewTask+0x4a>
 800715a:	f001 fb85 	bl	8008868 <ulSetInterruptMask>
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01f      	beq.n	80071a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	e012      	b.n	8007194 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	7819      	ldrb	r1, [r3, #0]
 8007176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	4413      	add	r3, r2
 800717c:	3334      	adds	r3, #52	@ 0x34
 800717e:	460a      	mov	r2, r1
 8007180:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	4413      	add	r3, r2
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d006      	beq.n	800719c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	3301      	adds	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b0f      	cmp	r3, #15
 8007198:	d9e9      	bls.n	800716e <prvInitialiseNewTask+0x56>
 800719a:	e000      	b.n	800719e <prvInitialiseNewTask+0x86>
			{
				break;
 800719c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071a6:	e003      	b.n	80071b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	2b37      	cmp	r3, #55	@ 0x37
 80071b4:	d901      	bls.n	80071ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071b6:	2337      	movs	r3, #55	@ 0x37
 80071b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	2200      	movs	r2, #0
 80071ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff f8e5 	bl	80063a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	3318      	adds	r3, #24
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff f8e0 	bl	80063a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	2200      	movs	r2, #0
 8007202:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	3354      	adds	r3, #84	@ 0x54
 800720a:	224c      	movs	r2, #76	@ 0x4c
 800720c:	2100      	movs	r1, #0
 800720e:	4618      	mov	r0, r3
 8007210:	f001 fd84 	bl	8008d1c <memset>
 8007214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007216:	4a0e      	ldr	r2, [pc, #56]	@ (8007250 <prvInitialiseNewTask+0x138>)
 8007218:	659a      	str	r2, [r3, #88]	@ 0x58
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	4a0d      	ldr	r2, [pc, #52]	@ (8007254 <prvInitialiseNewTask+0x13c>)
 800721e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	4a0d      	ldr	r2, [pc, #52]	@ (8007258 <prvInitialiseNewTask+0x140>)
 8007224:	661a      	str	r2, [r3, #96]	@ 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8007226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007228:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	6938      	ldr	r0, [r7, #16]
 8007230:	f001 fa42 	bl	80086b8 <pxPortInitialiseStack>
 8007234:	4602      	mov	r2, r0
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20003330 	.word	0x20003330
 8007254:	20003398 	.word	0x20003398
 8007258:	20003400 	.word	0x20003400

0800725c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007264:	f001 f9c8 	bl	80085f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007268:	4b2a      	ldr	r3, [pc, #168]	@ (8007314 <prvAddNewTaskToReadyList+0xb8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	4a29      	ldr	r2, [pc, #164]	@ (8007314 <prvAddNewTaskToReadyList+0xb8>)
 8007270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007272:	4b29      	ldr	r3, [pc, #164]	@ (8007318 <prvAddNewTaskToReadyList+0xbc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800727a:	4a27      	ldr	r2, [pc, #156]	@ (8007318 <prvAddNewTaskToReadyList+0xbc>)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007280:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <prvAddNewTaskToReadyList+0xb8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d110      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007288:	f000 fbb4 	bl	80079f4 <prvInitialiseTaskLists>
 800728c:	e00d      	b.n	80072aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800728e:	4b23      	ldr	r3, [pc, #140]	@ (800731c <prvAddNewTaskToReadyList+0xc0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007296:	4b20      	ldr	r3, [pc, #128]	@ (8007318 <prvAddNewTaskToReadyList+0xbc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d802      	bhi.n	80072aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007318 <prvAddNewTaskToReadyList+0xbc>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3301      	adds	r3, #1
 80072b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 80072b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <prvAddNewTaskToReadyList+0xc4>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c0:	4b18      	ldr	r3, [pc, #96]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <prvAddNewTaskToReadyList+0x74>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <prvAddNewTaskToReadyList+0xc8>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a12      	ldr	r2, [pc, #72]	@ (8007328 <prvAddNewTaskToReadyList+0xcc>)
 80072de:	441a      	add	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7ff f867 	bl	80063ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072ec:	f001 f996 	bl	800861c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072f0:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <prvAddNewTaskToReadyList+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f8:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <prvAddNewTaskToReadyList+0xbc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d201      	bcs.n	800730a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007306:	f001 f965 	bl	80085d4 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	200011b8 	.word	0x200011b8
 8007318:	20000ce4 	.word	0x20000ce4
 800731c:	200011c4 	.word	0x200011c4
 8007320:	200011d4 	.word	0x200011d4
 8007324:	200011c0 	.word	0x200011c0
 8007328:	20000ce8 	.word	0x20000ce8

0800732c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d010      	beq.n	8007360 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <vTaskDelay+0x48>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <vTaskDelay+0x22>
 8007346:	f001 fa8f 	bl	8008868 <ulSetInterruptMask>
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800734e:	f000 f873 	bl	8007438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fd77 	bl	8007e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800735a:	f000 f87b 	bl	8007454 <xTaskResumeAll>
 800735e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007366:	f001 f935 	bl	80085d4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200011e0 	.word	0x200011e0

08007378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007386:	463a      	mov	r2, r7
 8007388:	1d39      	adds	r1, r7, #4
 800738a:	f107 0308 	add.w	r3, r7, #8
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe ffb2 	bl	80062f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	9202      	str	r2, [sp, #8]
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2300      	movs	r3, #0
 80073a4:	460a      	mov	r2, r1
 80073a6:	491c      	ldr	r1, [pc, #112]	@ (8007418 <vTaskStartScheduler+0xa0>)
 80073a8:	481c      	ldr	r0, [pc, #112]	@ (800741c <vTaskStartScheduler+0xa4>)
 80073aa:	f7ff fe27 	bl	8006ffc <xTaskCreateStatic>
 80073ae:	4603      	mov	r3, r0
 80073b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007420 <vTaskStartScheduler+0xa8>)
 80073b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007420 <vTaskStartScheduler+0xa8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073bc:	2301      	movs	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e001      	b.n	80073c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d102      	bne.n	80073d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073cc:	f000 fd90 	bl	8007ef0 <xTimerCreateTimerTask>
 80073d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d113      	bne.n	8007400 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80073d8:	f001 fa46 	bl	8008868 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073dc:	4b11      	ldr	r3, [pc, #68]	@ (8007424 <vTaskStartScheduler+0xac>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3354      	adds	r3, #84	@ 0x54
 80073e2:	4a11      	ldr	r2, [pc, #68]	@ (8007428 <vTaskStartScheduler+0xb0>)
 80073e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073e6:	4b11      	ldr	r3, [pc, #68]	@ (800742c <vTaskStartScheduler+0xb4>)
 80073e8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073ee:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <vTaskStartScheduler+0xb8>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <vTaskStartScheduler+0xbc>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073fa:	f001 f9e7 	bl	80087cc <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073fe:	e007      	b.n	8007410 <vTaskStartScheduler+0x98>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d103      	bne.n	8007410 <vTaskStartScheduler+0x98>
 8007408:	f001 fa2e 	bl	8008868 <ulSetInterruptMask>
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <vTaskStartScheduler+0x94>
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08009754 	.word	0x08009754
 800741c:	080079d5 	.word	0x080079d5
 8007420:	200011dc 	.word	0x200011dc
 8007424:	20000ce4 	.word	0x20000ce4
 8007428:	20000010 	.word	0x20000010
 800742c:	200011d8 	.word	0x200011d8
 8007430:	200011c4 	.word	0x200011c4
 8007434:	200011bc 	.word	0x200011bc

08007438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800743c:	4b04      	ldr	r3, [pc, #16]	@ (8007450 <vTaskSuspendAll+0x18>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	4a03      	ldr	r2, [pc, #12]	@ (8007450 <vTaskSuspendAll+0x18>)
 8007444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007446:	bf00      	nop
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	200011e0 	.word	0x200011e0

08007454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007462:	4b3b      	ldr	r3, [pc, #236]	@ (8007550 <xTaskResumeAll+0xfc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <xTaskResumeAll+0x1e>
 800746a:	f001 f9fd 	bl	8008868 <ulSetInterruptMask>
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007472:	f001 f8c1 	bl	80085f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007476:	4b36      	ldr	r3, [pc, #216]	@ (8007550 <xTaskResumeAll+0xfc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3b01      	subs	r3, #1
 800747c:	4a34      	ldr	r2, [pc, #208]	@ (8007550 <xTaskResumeAll+0xfc>)
 800747e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007480:	4b33      	ldr	r3, [pc, #204]	@ (8007550 <xTaskResumeAll+0xfc>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d15c      	bne.n	8007542 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007488:	4b32      	ldr	r3, [pc, #200]	@ (8007554 <xTaskResumeAll+0x100>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d058      	beq.n	8007542 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007490:	e02f      	b.n	80074f2 <xTaskResumeAll+0x9e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007492:	4b31      	ldr	r3, [pc, #196]	@ (8007558 <xTaskResumeAll+0x104>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3318      	adds	r3, #24
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe ffe8 	bl	8006474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe ffe3 	bl	8006474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b2:	4b2a      	ldr	r3, [pc, #168]	@ (800755c <xTaskResumeAll+0x108>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <xTaskResumeAll+0x6e>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074be:	4a27      	ldr	r2, [pc, #156]	@ (800755c <xTaskResumeAll+0x108>)
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4a24      	ldr	r2, [pc, #144]	@ (8007560 <xTaskResumeAll+0x10c>)
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fe ff6e 	bl	80063ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e2:	4b20      	ldr	r3, [pc, #128]	@ (8007564 <xTaskResumeAll+0x110>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d302      	bcc.n	80074f2 <xTaskResumeAll+0x9e>
					{
						xYieldPending = pdTRUE;
 80074ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007568 <xTaskResumeAll+0x114>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074f2:	4b19      	ldr	r3, [pc, #100]	@ (8007558 <xTaskResumeAll+0x104>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1cb      	bne.n	8007492 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <xTaskResumeAll+0xb0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007500:	f000 fb14 	bl	8007b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007504:	4b19      	ldr	r3, [pc, #100]	@ (800756c <xTaskResumeAll+0x118>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <xTaskResumeAll+0xde>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007510:	f000 f83e 	bl	8007590 <xTaskIncrementTick>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <xTaskResumeAll+0xcc>
							{
								xYieldPending = pdTRUE;
 800751a:	4b13      	ldr	r3, [pc, #76]	@ (8007568 <xTaskResumeAll+0x114>)
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3b01      	subs	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f1      	bne.n	8007510 <xTaskResumeAll+0xbc>

						xPendedTicks = 0;
 800752c:	4b0f      	ldr	r3, [pc, #60]	@ (800756c <xTaskResumeAll+0x118>)
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <xTaskResumeAll+0x114>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <xTaskResumeAll+0xee>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800753e:	f001 f849 	bl	80085d4 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f001 f86b 	bl	800861c <vPortExitCritical>

	return xAlreadyYielded;
 8007546:	68bb      	ldr	r3, [r7, #8]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	200011e0 	.word	0x200011e0
 8007554:	200011b8 	.word	0x200011b8
 8007558:	20001178 	.word	0x20001178
 800755c:	200011c0 	.word	0x200011c0
 8007560:	20000ce8 	.word	0x20000ce8
 8007564:	20000ce4 	.word	0x20000ce4
 8007568:	200011cc 	.word	0x200011cc
 800756c:	200011c8 	.word	0x200011c8

08007570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <xTaskGetTickCount+0x1c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800757c:	687b      	ldr	r3, [r7, #4]
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	200011bc 	.word	0x200011bc

08007590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800759a:	4b4b      	ldr	r3, [pc, #300]	@ (80076c8 <xTaskIncrementTick+0x138>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f040 8088 	bne.w	80076b4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075a4:	4b49      	ldr	r3, [pc, #292]	@ (80076cc <xTaskIncrementTick+0x13c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075ac:	4a47      	ldr	r2, [pc, #284]	@ (80076cc <xTaskIncrementTick+0x13c>)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d119      	bne.n	80075ec <xTaskIncrementTick+0x5c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075b8:	4b45      	ldr	r3, [pc, #276]	@ (80076d0 <xTaskIncrementTick+0x140>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <xTaskIncrementTick+0x3a>
 80075c2:	f001 f951 	bl	8008868 <ulSetInterruptMask>
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <xTaskIncrementTick+0x36>
 80075ca:	4b41      	ldr	r3, [pc, #260]	@ (80076d0 <xTaskIncrementTick+0x140>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	4b40      	ldr	r3, [pc, #256]	@ (80076d4 <xTaskIncrementTick+0x144>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a3e      	ldr	r2, [pc, #248]	@ (80076d0 <xTaskIncrementTick+0x140>)
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4a3e      	ldr	r2, [pc, #248]	@ (80076d4 <xTaskIncrementTick+0x144>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b3e      	ldr	r3, [pc, #248]	@ (80076d8 <xTaskIncrementTick+0x148>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	4a3c      	ldr	r2, [pc, #240]	@ (80076d8 <xTaskIncrementTick+0x148>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	f000 faa0 	bl	8007b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075ec:	4b3b      	ldr	r3, [pc, #236]	@ (80076dc <xTaskIncrementTick+0x14c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d349      	bcc.n	800768a <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f6:	4b36      	ldr	r3, [pc, #216]	@ (80076d0 <xTaskIncrementTick+0x140>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <xTaskIncrementTick+0x7a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007600:	4b36      	ldr	r3, [pc, #216]	@ (80076dc <xTaskIncrementTick+0x14c>)
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	601a      	str	r2, [r3, #0]
					break;
 8007608:	e03f      	b.n	800768a <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760a:	4b31      	ldr	r3, [pc, #196]	@ (80076d0 <xTaskIncrementTick+0x140>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d203      	bcs.n	800762a <xTaskIncrementTick+0x9a>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007622:	4a2e      	ldr	r2, [pc, #184]	@ (80076dc <xTaskIncrementTick+0x14c>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007628:	e02f      	b.n	800768a <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3304      	adds	r3, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe ff20 	bl	8006474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <xTaskIncrementTick+0xb6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	3318      	adds	r3, #24
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe ff17 	bl	8006474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764a:	4b25      	ldr	r3, [pc, #148]	@ (80076e0 <xTaskIncrementTick+0x150>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d903      	bls.n	800765a <xTaskIncrementTick+0xca>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007656:	4a22      	ldr	r2, [pc, #136]	@ (80076e0 <xTaskIncrementTick+0x150>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4a1f      	ldr	r2, [pc, #124]	@ (80076e4 <xTaskIncrementTick+0x154>)
 8007668:	441a      	add	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fe fea2 	bl	80063ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767a:	4b1b      	ldr	r3, [pc, #108]	@ (80076e8 <xTaskIncrementTick+0x158>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	429a      	cmp	r2, r3
 8007682:	d3b8      	bcc.n	80075f6 <xTaskIncrementTick+0x66>
						{
							xSwitchRequired = pdTRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007688:	e7b5      	b.n	80075f6 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800768a:	4b17      	ldr	r3, [pc, #92]	@ (80076e8 <xTaskIncrementTick+0x158>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007690:	4914      	ldr	r1, [pc, #80]	@ (80076e4 <xTaskIncrementTick+0x154>)
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d901      	bls.n	80076a6 <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076a6:	4b11      	ldr	r3, [pc, #68]	@ (80076ec <xTaskIncrementTick+0x15c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	e004      	b.n	80076be <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076b4:	4b0e      	ldr	r3, [pc, #56]	@ (80076f0 <xTaskIncrementTick+0x160>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3301      	adds	r3, #1
 80076ba:	4a0d      	ldr	r2, [pc, #52]	@ (80076f0 <xTaskIncrementTick+0x160>)
 80076bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076be:	697b      	ldr	r3, [r7, #20]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200011e0 	.word	0x200011e0
 80076cc:	200011bc 	.word	0x200011bc
 80076d0:	20001170 	.word	0x20001170
 80076d4:	20001174 	.word	0x20001174
 80076d8:	200011d0 	.word	0x200011d0
 80076dc:	200011d8 	.word	0x200011d8
 80076e0:	200011c0 	.word	0x200011c0
 80076e4:	20000ce8 	.word	0x20000ce8
 80076e8:	20000ce4 	.word	0x20000ce4
 80076ec:	200011cc 	.word	0x200011cc
 80076f0:	200011c8 	.word	0x200011c8

080076f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076fa:	4b26      	ldr	r3, [pc, #152]	@ (8007794 <vTaskSwitchContext+0xa0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007702:	4b25      	ldr	r3, [pc, #148]	@ (8007798 <vTaskSwitchContext+0xa4>)
 8007704:	2201      	movs	r2, #1
 8007706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007708:	e03f      	b.n	800778a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800770a:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <vTaskSwitchContext+0xa4>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007710:	4b22      	ldr	r3, [pc, #136]	@ (800779c <vTaskSwitchContext+0xa8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	e009      	b.n	800772c <vTaskSwitchContext+0x38>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <vTaskSwitchContext+0x32>
 800771e:	f001 f8a3 	bl	8008868 <ulSetInterruptMask>
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <vTaskSwitchContext+0x2e>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3b01      	subs	r3, #1
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	491c      	ldr	r1, [pc, #112]	@ (80077a0 <vTaskSwitchContext+0xac>)
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0eb      	beq.n	8007718 <vTaskSwitchContext+0x24>
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <vTaskSwitchContext+0xac>)
 800774c:	4413      	add	r3, r2
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	429a      	cmp	r2, r3
 8007764:	d104      	bne.n	8007770 <vTaskSwitchContext+0x7c>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4a0b      	ldr	r2, [pc, #44]	@ (80077a4 <vTaskSwitchContext+0xb0>)
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4a08      	ldr	r2, [pc, #32]	@ (800779c <vTaskSwitchContext+0xa8>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007780:	4b08      	ldr	r3, [pc, #32]	@ (80077a4 <vTaskSwitchContext+0xb0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3354      	adds	r3, #84	@ 0x54
 8007786:	4a08      	ldr	r2, [pc, #32]	@ (80077a8 <vTaskSwitchContext+0xb4>)
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200011e0 	.word	0x200011e0
 8007798:	200011cc 	.word	0x200011cc
 800779c:	200011c0 	.word	0x200011c0
 80077a0:	20000ce8 	.word	0x20000ce8
 80077a4:	20000ce4 	.word	0x20000ce4
 80077a8:	20000010 	.word	0x20000010

080077ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <vTaskPlaceOnEventList+0x18>
 80077bc:	f001 f854 	bl	8008868 <ulSetInterruptMask>
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c4:	4b07      	ldr	r3, [pc, #28]	@ (80077e4 <vTaskPlaceOnEventList+0x38>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fe fe18 	bl	8006402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077d2:	2101      	movs	r1, #1
 80077d4:	6838      	ldr	r0, [r7, #0]
 80077d6:	f000 fb37 	bl	8007e48 <prvAddCurrentTaskToDelayedList>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000ce4 	.word	0x20000ce4

080077e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <vTaskPlaceOnEventListRestricted+0x1a>
 80077fa:	f001 f835 	bl	8008868 <ulSetInterruptMask>
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007802:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <vTaskPlaceOnEventListRestricted+0x44>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3318      	adds	r3, #24
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7fe fdd5 	bl	80063ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
 800781a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	68b8      	ldr	r0, [r7, #8]
 8007820:	f000 fb12 	bl	8007e48 <prvAddCurrentTaskToDelayedList>
	}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000ce4 	.word	0x20000ce4

08007830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d103      	bne.n	800784e <xTaskRemoveFromEventList+0x1e>
 8007846:	f001 f80f 	bl	8008868 <ulSetInterruptMask>
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3318      	adds	r3, #24
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fe0e 	bl	8006474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007858:	4b1d      	ldr	r3, [pc, #116]	@ (80078d0 <xTaskRemoveFromEventList+0xa0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d11d      	bne.n	800789c <xTaskRemoveFromEventList+0x6c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3304      	adds	r3, #4
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fe05 	bl	8006474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786e:	4b19      	ldr	r3, [pc, #100]	@ (80078d4 <xTaskRemoveFromEventList+0xa4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d903      	bls.n	800787e <xTaskRemoveFromEventList+0x4e>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	4a16      	ldr	r2, [pc, #88]	@ (80078d4 <xTaskRemoveFromEventList+0xa4>)
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a13      	ldr	r2, [pc, #76]	@ (80078d8 <xTaskRemoveFromEventList+0xa8>)
 800788c:	441a      	add	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	3304      	adds	r3, #4
 8007892:	4619      	mov	r1, r3
 8007894:	4610      	mov	r0, r2
 8007896:	f7fe fd90 	bl	80063ba <vListInsertEnd>
 800789a:	e005      	b.n	80078a8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3318      	adds	r3, #24
 80078a0:	4619      	mov	r1, r3
 80078a2:	480e      	ldr	r0, [pc, #56]	@ (80078dc <xTaskRemoveFromEventList+0xac>)
 80078a4:	f7fe fd89 	bl	80063ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ac:	4b0c      	ldr	r3, [pc, #48]	@ (80078e0 <xTaskRemoveFromEventList+0xb0>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d905      	bls.n	80078c2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078ba:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <xTaskRemoveFromEventList+0xb4>)
 80078bc:	2201      	movs	r2, #1
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e001      	b.n	80078c6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80078c6:	68fb      	ldr	r3, [r7, #12]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	200011e0 	.word	0x200011e0
 80078d4:	200011c0 	.word	0x200011c0
 80078d8:	20000ce8 	.word	0x20000ce8
 80078dc:	20001178 	.word	0x20001178
 80078e0:	20000ce4 	.word	0x20000ce4
 80078e4:	200011cc 	.word	0x200011cc

080078e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078f0:	4b06      	ldr	r3, [pc, #24]	@ (800790c <vTaskInternalSetTimeOutState+0x24>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078f8:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <vTaskInternalSetTimeOutState+0x28>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	605a      	str	r2, [r3, #4]
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	200011d0 	.word	0x200011d0
 8007910:	200011bc 	.word	0x200011bc

08007914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <xTaskCheckForTimeOut+0x18>
 8007924:	f000 ffa0 	bl	8008868 <ulSetInterruptMask>
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <xTaskCheckForTimeOut+0x26>
 8007932:	f000 ff99 	bl	8008868 <ulSetInterruptMask>
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
 800793a:	f000 fe5d 	bl	80085f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800793e:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <xTaskCheckForTimeOut+0xa0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d102      	bne.n	800795e <xTaskCheckForTimeOut+0x4a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e023      	b.n	80079a6 <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b15      	ldr	r3, [pc, #84]	@ (80079b8 <xTaskCheckForTimeOut+0xa4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d007      	beq.n	800797a <xTaskCheckForTimeOut+0x66>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <xTaskCheckForTimeOut+0x66>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e015      	b.n	80079a6 <xTaskCheckForTimeOut+0x92>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d20b      	bcs.n	800799c <xTaskCheckForTimeOut+0x88>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff ffa9 	bl	80078e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	e004      	b.n	80079a6 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			*pxTicksToWait = 0;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80079a6:	f000 fe39 	bl	800861c <vPortExitCritical>

	return xReturn;
 80079aa:	697b      	ldr	r3, [r7, #20]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	200011bc 	.word	0x200011bc
 80079b8:	200011d0 	.word	0x200011d0

080079bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079c0:	4b03      	ldr	r3, [pc, #12]	@ (80079d0 <vTaskMissedYield+0x14>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
}
 80079c6:	bf00      	nop
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	200011cc 	.word	0x200011cc

080079d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079dc:	f000 f84a 	bl	8007a74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079e0:	4b03      	ldr	r3, [pc, #12]	@ (80079f0 <prvIdleTask+0x1c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d9f9      	bls.n	80079dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80079e8:	f000 fdf4 	bl	80085d4 <vPortYield>
		prvCheckTasksWaitingTermination();
 80079ec:	e7f6      	b.n	80079dc <prvIdleTask+0x8>
 80079ee:	bf00      	nop
 80079f0:	20000ce8 	.word	0x20000ce8

080079f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079fa:	2300      	movs	r3, #0
 80079fc:	607b      	str	r3, [r7, #4]
 80079fe:	e00c      	b.n	8007a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4a12      	ldr	r2, [pc, #72]	@ (8007a54 <prvInitialiseTaskLists+0x60>)
 8007a0c:	4413      	add	r3, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fca6 	bl	8006360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3301      	adds	r3, #1
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b37      	cmp	r3, #55	@ 0x37
 8007a1e:	d9ef      	bls.n	8007a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a20:	480d      	ldr	r0, [pc, #52]	@ (8007a58 <prvInitialiseTaskLists+0x64>)
 8007a22:	f7fe fc9d 	bl	8006360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a26:	480d      	ldr	r0, [pc, #52]	@ (8007a5c <prvInitialiseTaskLists+0x68>)
 8007a28:	f7fe fc9a 	bl	8006360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a2c:	480c      	ldr	r0, [pc, #48]	@ (8007a60 <prvInitialiseTaskLists+0x6c>)
 8007a2e:	f7fe fc97 	bl	8006360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a32:	480c      	ldr	r0, [pc, #48]	@ (8007a64 <prvInitialiseTaskLists+0x70>)
 8007a34:	f7fe fc94 	bl	8006360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a38:	480b      	ldr	r0, [pc, #44]	@ (8007a68 <prvInitialiseTaskLists+0x74>)
 8007a3a:	f7fe fc91 	bl	8006360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <prvInitialiseTaskLists+0x78>)
 8007a40:	4a05      	ldr	r2, [pc, #20]	@ (8007a58 <prvInitialiseTaskLists+0x64>)
 8007a42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a44:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <prvInitialiseTaskLists+0x7c>)
 8007a46:	4a05      	ldr	r2, [pc, #20]	@ (8007a5c <prvInitialiseTaskLists+0x68>)
 8007a48:	601a      	str	r2, [r3, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000ce8 	.word	0x20000ce8
 8007a58:	20001148 	.word	0x20001148
 8007a5c:	2000115c 	.word	0x2000115c
 8007a60:	20001178 	.word	0x20001178
 8007a64:	2000118c 	.word	0x2000118c
 8007a68:	200011a4 	.word	0x200011a4
 8007a6c:	20001170 	.word	0x20001170
 8007a70:	20001174 	.word	0x20001174

08007a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7a:	e019      	b.n	8007ab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a7c:	f000 fdbc 	bl	80085f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a80:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <prvCheckTasksWaitingTermination+0x50>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fcf1 	bl	8006474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <prvCheckTasksWaitingTermination+0x54>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	4a0b      	ldr	r2, [pc, #44]	@ (8007ac8 <prvCheckTasksWaitingTermination+0x54>)
 8007a9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <prvCheckTasksWaitingTermination+0x58>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <prvCheckTasksWaitingTermination+0x58>)
 8007aa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aa6:	f000 fdb9 	bl	800861c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f810 	bl	8007ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <prvCheckTasksWaitingTermination+0x58>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e1      	bne.n	8007a7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000118c 	.word	0x2000118c
 8007ac8:	200011b8 	.word	0x200011b8
 8007acc:	200011a0 	.word	0x200011a0

08007ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3354      	adds	r3, #84	@ 0x54
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f925 	bl	8008d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d108      	bne.n	8007afe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 ffd7 	bl	8008aa4 <vPortFree>
				vPortFree( pxTCB );
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 ffd4 	bl	8008aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007afc:	e011      	b.n	8007b22 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d103      	bne.n	8007b10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 ffcb 	bl	8008aa4 <vPortFree>
	}
 8007b0e:	e008      	b.n	8007b22 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d003      	beq.n	8007b22 <prvDeleteTCB+0x52>
 8007b1a:	f000 fea5 	bl	8008868 <ulSetInterruptMask>
 8007b1e:	bf00      	nop
 8007b20:	e7fd      	b.n	8007b1e <prvDeleteTCB+0x4e>
	}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b32:	4b0c      	ldr	r3, [pc, #48]	@ (8007b64 <prvResetNextTaskUnblockTime+0x38>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d104      	bne.n	8007b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <prvResetNextTaskUnblockTime+0x3c>)
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b44:	e008      	b.n	8007b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b46:	4b07      	ldr	r3, [pc, #28]	@ (8007b64 <prvResetNextTaskUnblockTime+0x38>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a04      	ldr	r2, [pc, #16]	@ (8007b68 <prvResetNextTaskUnblockTime+0x3c>)
 8007b56:	6013      	str	r3, [r2, #0]
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	20001170 	.word	0x20001170
 8007b68:	200011d8 	.word	0x200011d8

08007b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba0 <xTaskGetSchedulerState+0x34>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d102      	bne.n	8007b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	e008      	b.n	8007b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b80:	4b08      	ldr	r3, [pc, #32]	@ (8007ba4 <xTaskGetSchedulerState+0x38>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	e001      	b.n	8007b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b92:	687b      	ldr	r3, [r7, #4]
	}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	200011c4 	.word	0x200011c4
 8007ba4:	200011e0 	.word	0x200011e0

08007ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d051      	beq.n	8007c62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c6c <xTaskPriorityInherit+0xc4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d241      	bcs.n	8007c50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db06      	blt.n	8007be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd4:	4b25      	ldr	r3, [pc, #148]	@ (8007c6c <xTaskPriorityInherit+0xc4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6959      	ldr	r1, [r3, #20]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c70 <xTaskPriorityInherit+0xc8>)
 8007bf4:	4413      	add	r3, r2
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d122      	bne.n	8007c40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe fc38 	bl	8006474 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c04:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <xTaskPriorityInherit+0xc4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c12:	4b18      	ldr	r3, [pc, #96]	@ (8007c74 <xTaskPriorityInherit+0xcc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <xTaskPriorityInherit+0x7a>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	4a15      	ldr	r2, [pc, #84]	@ (8007c74 <xTaskPriorityInherit+0xcc>)
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a10      	ldr	r2, [pc, #64]	@ (8007c70 <xTaskPriorityInherit+0xc8>)
 8007c30:	441a      	add	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f7fe fbbe 	bl	80063ba <vListInsertEnd>
 8007c3e:	e004      	b.n	8007c4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <xTaskPriorityInherit+0xc4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e008      	b.n	8007c62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c54:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <xTaskPriorityInherit+0xc4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d201      	bcs.n	8007c62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c62:	68fb      	ldr	r3, [r7, #12]
	}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000ce4 	.word	0x20000ce4
 8007c70:	20000ce8 	.word	0x20000ce8
 8007c74:	200011c0 	.word	0x200011c0

08007c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d048      	beq.n	8007d20 <xTaskPriorityDisinherit+0xa8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c8e:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <xTaskPriorityDisinherit+0xb4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d003      	beq.n	8007ca0 <xTaskPriorityDisinherit+0x28>
 8007c98:	f000 fde6 	bl	8008868 <ulSetInterruptMask>
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <xTaskPriorityDisinherit+0x38>
 8007ca8:	f000 fdde 	bl	8008868 <ulSetInterruptMask>
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <xTaskPriorityDisinherit+0x34>
			( pxTCB->uxMutexesHeld )--;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d02c      	beq.n	8007d20 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d128      	bne.n	8007d20 <xTaskPriorityDisinherit+0xa8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fbce 	bl	8006474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d30 <xTaskPriorityDisinherit+0xb8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d903      	bls.n	8007d00 <xTaskPriorityDisinherit+0x88>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d30 <xTaskPriorityDisinherit+0xb8>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a09      	ldr	r2, [pc, #36]	@ (8007d34 <xTaskPriorityDisinherit+0xbc>)
 8007d0e:	441a      	add	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fe fb4f 	bl	80063ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d20:	68fb      	ldr	r3, [r7, #12]
	}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000ce4 	.word	0x20000ce4
 8007d30:	200011c0 	.word	0x200011c0
 8007d34:	20000ce8 	.word	0x20000ce8

08007d38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d05c      	beq.n	8007e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <vTaskPriorityDisinheritAfterTimeout+0x28>
 8007d58:	f000 fd86 	bl	8008868 <ulSetInterruptMask>
 8007d5c:	bf00      	nop
 8007d5e:	e7fd      	b.n	8007d5c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d902      	bls.n	8007d70 <vTaskPriorityDisinheritAfterTimeout+0x38>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	e002      	b.n	8007d76 <vTaskPriorityDisinheritAfterTimeout+0x3e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d74:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d044      	beq.n	8007e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d13f      	bne.n	8007e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d8a:	4b22      	ldr	r3, [pc, #136]	@ (8007e14 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d103      	bne.n	8007d9c <vTaskPriorityDisinheritAfterTimeout+0x64>
 8007d94:	f000 fd68 	bl	8008868 <ulSetInterruptMask>
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da0:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	db04      	blt.n	8007dba <vTaskPriorityDisinheritAfterTimeout+0x82>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6959      	ldr	r1, [r3, #20]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4a13      	ldr	r2, [pc, #76]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007dca:	4413      	add	r3, r2
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d11c      	bne.n	8007e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe fb4d 	bl	8006474 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dde:	4b0f      	ldr	r3, [pc, #60]	@ (8007e1c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d903      	bls.n	8007dee <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	4a0c      	ldr	r2, [pc, #48]	@ (8007e1c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a07      	ldr	r2, [pc, #28]	@ (8007e18 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8007dfc:	441a      	add	r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7fe fad8 	bl	80063ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000ce4 	.word	0x20000ce4
 8007e18:	20000ce8 	.word	0x20000ce8
 8007e1c:	200011c0 	.word	0x200011c0

08007e20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e2c:	4b05      	ldr	r3, [pc, #20]	@ (8007e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e32:	3201      	adds	r2, #1
 8007e34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007e36:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e38:	681b      	ldr	r3, [r3, #0]
	}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20000ce4 	.word	0x20000ce4

08007e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e52:	4b21      	ldr	r3, [pc, #132]	@ (8007ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e58:	4b20      	ldr	r3, [pc, #128]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x94>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fb08 	bl	8006474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d10a      	bne.n	8007e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e72:	4b1a      	ldr	r3, [pc, #104]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x94>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4819      	ldr	r0, [pc, #100]	@ (8007ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007e7c:	f7fe fa9d 	bl	80063ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e80:	e026      	b.n	8007ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e8a:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x94>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d209      	bcs.n	8007eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x94>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f7fe faab 	bl	8006402 <vListInsert>
}
 8007eac:	e010      	b.n	8007ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eae:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007edc <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe faa1 	bl	8006402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8007eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d202      	bcs.n	8007ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007eca:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6013      	str	r3, [r2, #0]
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	200011bc 	.word	0x200011bc
 8007edc:	20000ce4 	.word	0x20000ce4
 8007ee0:	200011a4 	.word	0x200011a4
 8007ee4:	20001174 	.word	0x20001174
 8007ee8:	20001170 	.word	0x20001170
 8007eec:	200011d8 	.word	0x200011d8

08007ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007efa:	f000 fad3 	bl	80084a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007efe:	4b18      	ldr	r3, [pc, #96]	@ (8007f60 <xTimerCreateTimerTask+0x70>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d020      	beq.n	8007f48 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f0e:	463a      	mov	r2, r7
 8007f10:	1d39      	adds	r1, r7, #4
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fa08 	bl	800632c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	9202      	str	r2, [sp, #8]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	2302      	movs	r3, #2
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	460a      	mov	r2, r1
 8007f2e:	490d      	ldr	r1, [pc, #52]	@ (8007f64 <xTimerCreateTimerTask+0x74>)
 8007f30:	480d      	ldr	r0, [pc, #52]	@ (8007f68 <xTimerCreateTimerTask+0x78>)
 8007f32:	f7ff f863 	bl	8006ffc <xTaskCreateStatic>
 8007f36:	4603      	mov	r3, r0
 8007f38:	4a0c      	ldr	r2, [pc, #48]	@ (8007f6c <xTimerCreateTimerTask+0x7c>)
 8007f3a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <xTimerCreateTimerTask+0x7c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007f44:	2301      	movs	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d103      	bne.n	8007f56 <xTimerCreateTimerTask+0x66>
 8007f4e:	f000 fc8b 	bl	8008868 <ulSetInterruptMask>
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <xTimerCreateTimerTask+0x62>
	return xReturn;
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20001214 	.word	0x20001214
 8007f64:	0800975c 	.word	0x0800975c
 8007f68:	08008089 	.word	0x08008089
 8007f6c:	20001218 	.word	0x20001218

08007f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	@ 0x28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <xTimerGenericCommand+0x20>
 8007f88:	f000 fc6e 	bl	8008868 <ulSetInterruptMask>
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f90:	4b19      	ldr	r3, [pc, #100]	@ (8007ff8 <xTimerGenericCommand+0x88>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d02a      	beq.n	8007fee <xTimerGenericCommand+0x7e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	dc18      	bgt.n	8007fdc <xTimerGenericCommand+0x6c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007faa:	f7ff fddf 	bl	8007b6c <xTaskGetSchedulerState>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d109      	bne.n	8007fc8 <xTimerGenericCommand+0x58>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fb4:	4b10      	ldr	r3, [pc, #64]	@ (8007ff8 <xTimerGenericCommand+0x88>)
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	f107 0114 	add.w	r1, r7, #20
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc0:	f7fe fbb8 	bl	8006734 <xQueueGenericSend>
 8007fc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fc6:	e012      	b.n	8007fee <xTimerGenericCommand+0x7e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff8 <xTimerGenericCommand+0x88>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	f107 0114 	add.w	r1, r7, #20
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f7fe fbae 	bl	8006734 <xQueueGenericSend>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fda:	e008      	b.n	8007fee <xTimerGenericCommand+0x7e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fdc:	4b06      	ldr	r3, [pc, #24]	@ (8007ff8 <xTimerGenericCommand+0x88>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	f107 0114 	add.w	r1, r7, #20
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	f7fe fc71 	bl	80068ce <xQueueGenericSendFromISR>
 8007fec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3728      	adds	r7, #40	@ 0x28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20001214 	.word	0x20001214

08007ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008006:	4b1f      	ldr	r3, [pc, #124]	@ (8008084 <prvProcessExpiredTimer+0x88>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3304      	adds	r3, #4
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fa2d 	bl	8006474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01b      	beq.n	8008060 <prvProcessExpiredTimer+0x64>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	699a      	ldr	r2, [r3, #24]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	18d1      	adds	r1, r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f8c5 	bl	80081c4 <prvInsertTimerInActiveList>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d018      	beq.n	8008072 <prvProcessExpiredTimer+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008040:	2300      	movs	r3, #0
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	2300      	movs	r3, #0
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	2100      	movs	r1, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff ff90 	bl	8007f70 <xTimerGenericCommand>
 8008050:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10c      	bne.n	8008072 <prvProcessExpiredTimer+0x76>
 8008058:	f000 fc06 	bl	8008868 <ulSetInterruptMask>
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008066:	f023 0301 	bic.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	4798      	blx	r3
}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000120c 	.word	0x2000120c

08008088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f851 	bl	800813c <prvGetNextExpireTime>
 800809a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4619      	mov	r1, r3
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f805 	bl	80080b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080a6:	f000 f8cf 	bl	8008248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080aa:	bf00      	nop
 80080ac:	e7f0      	b.n	8008090 <prvTimerTask+0x8>
	...

080080b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080ba:	f7ff f9bd 	bl	8007438 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f85e 	bl	8008184 <prvSampleTimeNow>
 80080c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d12a      	bne.n	8008126 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <prvProcessTimerOrBlockTask+0x3c>
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d806      	bhi.n	80080ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080de:	f7ff f9b9 	bl	8007454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080e2:	68f9      	ldr	r1, [r7, #12]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff ff89 	bl	8007ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080ea:	e01e      	b.n	800812a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080f2:	4b10      	ldr	r3, [pc, #64]	@ (8008134 <prvProcessTimerOrBlockTask+0x84>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <prvProcessTimerOrBlockTask+0x50>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <prvProcessTimerOrBlockTask+0x52>
 8008100:	2300      	movs	r3, #0
 8008102:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <prvProcessTimerOrBlockTask+0x88>)
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4619      	mov	r1, r3
 8008112:	f7fe ff3f 	bl	8006f94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008116:	f7ff f99d 	bl	8007454 <xTaskResumeAll>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8008120:	f000 fa58 	bl	80085d4 <vPortYield>
}
 8008124:	e001      	b.n	800812a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8008126:	f7ff f995 	bl	8007454 <xTaskResumeAll>
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20001210 	.word	0x20001210
 8008138:	20001214 	.word	0x20001214

0800813c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008144:	4b0e      	ldr	r3, [pc, #56]	@ (8008180 <prvGetNextExpireTime+0x44>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <prvGetNextExpireTime+0x16>
 800814e:	2201      	movs	r2, #1
 8008150:	e000      	b.n	8008154 <prvGetNextExpireTime+0x18>
 8008152:	2200      	movs	r2, #0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <prvGetNextExpireTime+0x44>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	e001      	b.n	8008170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	2000120c 	.word	0x2000120c

08008184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800818c:	f7ff f9f0 	bl	8007570 <xTaskGetTickCount>
 8008190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008192:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <prvSampleTimeNow+0x3c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	429a      	cmp	r2, r3
 800819a:	d205      	bcs.n	80081a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800819c:	f000 f924 	bl	80083e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	e002      	b.n	80081ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ae:	4a04      	ldr	r2, [pc, #16]	@ (80081c0 <prvSampleTimeNow+0x3c>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	2000121c 	.word	0x2000121c

080081c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d812      	bhi.n	8008210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d302      	bcc.n	80081fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e01b      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081fe:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <prvInsertTimerInActiveList+0x7c>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fe f8fa 	bl	8006402 <vListInsert>
 800820e:	e012      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d206      	bcs.n	8008226 <prvInsertTimerInActiveList+0x62>
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d302      	bcc.n	8008226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e007      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008226:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <prvInsertTimerInActiveList+0x80>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7fe f8e6 	bl	8006402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008236:	697b      	ldr	r3, [r7, #20]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20001210 	.word	0x20001210
 8008244:	2000120c 	.word	0x2000120c

08008248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	@ 0x30
 800824c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824e:	e0b8      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da12      	bge.n	800827c <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	3304      	adds	r3, #4
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <prvProcessReceivedCommands+0x24>
 8008264:	f000 fb00 	bl	8008868 <ulSetInterruptMask>
 8008268:	bf00      	nop
 800826a:	e7fd      	b.n	8008268 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008272:	6850      	ldr	r0, [r2, #4]
 8008274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008276:	6892      	ldr	r2, [r2, #8]
 8008278:	4611      	mov	r1, r2
 800827a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f2c0 809f 	blt.w	80083c2 <prvProcessReceivedCommands+0x17a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <prvProcessReceivedCommands+0x52>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe f8ed 	bl	8006474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff ff71 	bl	8008184 <prvSampleTimeNow>
 80082a2:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	f200 8088 	bhi.w	80083bc <prvProcessReceivedCommands+0x174>
 80082ac:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <prvProcessReceivedCommands+0x6c>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	08008343 	.word	0x08008343
 80082c4:	08008357 	.word	0x08008357
 80082c8:	08008393 	.word	0x08008393
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082dd 	.word	0x080082dd
 80082d4:	08008343 	.word	0x08008343
 80082d8:	08008357 	.word	0x08008357
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	18d1      	adds	r1, r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	6a38      	ldr	r0, [r7, #32]
 80082fc:	f7ff ff62 	bl	80081c4 <prvInsertTimerInActiveList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d05c      	beq.n	80083c0 <prvProcessReceivedCommands+0x178>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6a38      	ldr	r0, [r7, #32]
 800830c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d051      	beq.n	80083c0 <prvProcessReceivedCommands+0x178>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	441a      	add	r2, r3
 8008324:	2300      	movs	r3, #0
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	2100      	movs	r1, #0
 800832c:	6a38      	ldr	r0, [r7, #32]
 800832e:	f7ff fe1f 	bl	8007f70 <xTimerGenericCommand>
 8008332:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d142      	bne.n	80083c0 <prvProcessReceivedCommands+0x178>
 800833a:	f000 fa95 	bl	8008868 <ulSetInterruptMask>
 800833e:	bf00      	nop
 8008340:	e7fd      	b.n	800833e <prvProcessReceivedCommands+0xf6>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008354:	e035      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d103      	bne.n	800837e <prvProcessReceivedCommands+0x136>
 8008376:	f000 fa77 	bl	8008868 <ulSetInterruptMask>
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <prvProcessReceivedCommands+0x132>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	18d1      	adds	r1, r2, r3
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	6a38      	ldr	r0, [r7, #32]
 800838c:	f7ff ff1a 	bl	80081c4 <prvInsertTimerInActiveList>
					break;
 8008390:	e017      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <prvProcessReceivedCommands+0x160>
						{
							vPortFree( pxTimer );
 80083a0:	6a38      	ldr	r0, [r7, #32]
 80083a2:	f000 fb7f 	bl	8008aa4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083a6:	e00c      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083ba:	e002      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>

				default	:
					/* Don't expect to get here. */
					break;
 80083bc:	bf00      	nop
 80083be:	e000      	b.n	80083c2 <prvProcessReceivedCommands+0x17a>
					break;
 80083c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <prvProcessReceivedCommands+0x19c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f107 0108 	add.w	r1, r7, #8
 80083ca:	2200      	movs	r2, #0
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe faf2 	bl	80069b6 <xQueueReceive>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f af3b 	bne.w	8008250 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	3728      	adds	r7, #40	@ 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20001214 	.word	0x20001214

080083e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ee:	e041      	b.n	8008474 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083f0:	4b2a      	ldr	r3, [pc, #168]	@ (800849c <prvSwitchTimerLists+0xb4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fa:	4b28      	ldr	r3, [pc, #160]	@ (800849c <prvSwitchTimerLists+0xb4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe f833 	bl	8006474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d027      	beq.n	8008474 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	4413      	add	r3, r2
 800842c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	429a      	cmp	r2, r3
 8008434:	d90e      	bls.n	8008454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008442:	4b16      	ldr	r3, [pc, #88]	@ (800849c <prvSwitchTimerLists+0xb4>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fd ffd8 	bl	8006402 <vListInsert>
 8008452:	e00f      	b.n	8008474 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008454:	2300      	movs	r3, #0
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	2300      	movs	r3, #0
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7ff fd86 	bl	8007f70 <xTimerGenericCommand>
 8008464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <prvSwitchTimerLists+0x8c>
 800846c:	f000 f9fc 	bl	8008868 <ulSetInterruptMask>
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008474:	4b09      	ldr	r3, [pc, #36]	@ (800849c <prvSwitchTimerLists+0xb4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1b8      	bne.n	80083f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800847e:	4b07      	ldr	r3, [pc, #28]	@ (800849c <prvSwitchTimerLists+0xb4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <prvSwitchTimerLists+0xb8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a04      	ldr	r2, [pc, #16]	@ (800849c <prvSwitchTimerLists+0xb4>)
 800848a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800848c:	4a04      	ldr	r2, [pc, #16]	@ (80084a0 <prvSwitchTimerLists+0xb8>)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6013      	str	r3, [r2, #0]
}
 8008492:	bf00      	nop
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	2000120c 	.word	0x2000120c
 80084a0:	20001210 	.word	0x20001210

080084a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084aa:	f000 f8a5 	bl	80085f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084ae:	4b15      	ldr	r3, [pc, #84]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d120      	bne.n	80084f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084b6:	4814      	ldr	r0, [pc, #80]	@ (8008508 <prvCheckForValidListAndQueue+0x64>)
 80084b8:	f7fd ff52 	bl	8006360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084bc:	4813      	ldr	r0, [pc, #76]	@ (800850c <prvCheckForValidListAndQueue+0x68>)
 80084be:	f7fd ff4f 	bl	8006360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084c2:	4b13      	ldr	r3, [pc, #76]	@ (8008510 <prvCheckForValidListAndQueue+0x6c>)
 80084c4:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <prvCheckForValidListAndQueue+0x64>)
 80084c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <prvCheckForValidListAndQueue+0x70>)
 80084ca:	4a10      	ldr	r2, [pc, #64]	@ (800850c <prvCheckForValidListAndQueue+0x68>)
 80084cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084ce:	2300      	movs	r3, #0
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	4b11      	ldr	r3, [pc, #68]	@ (8008518 <prvCheckForValidListAndQueue+0x74>)
 80084d4:	4a11      	ldr	r2, [pc, #68]	@ (800851c <prvCheckForValidListAndQueue+0x78>)
 80084d6:	2110      	movs	r1, #16
 80084d8:	200a      	movs	r0, #10
 80084da:	f7fe f84e 	bl	800657a <xQueueGenericCreateStatic>
 80084de:	4603      	mov	r3, r0
 80084e0:	4a08      	ldr	r2, [pc, #32]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084e4:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <prvCheckForValidListAndQueue+0x60>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	490b      	ldr	r1, [pc, #44]	@ (8008520 <prvCheckForValidListAndQueue+0x7c>)
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fd24 	bl	8006f40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084f8:	f000 f890 	bl	800861c <vPortExitCritical>
}
 80084fc:	bf00      	nop
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20001214 	.word	0x20001214
 8008508:	200011e4 	.word	0x200011e4
 800850c:	200011f8 	.word	0x200011f8
 8008510:	2000120c 	.word	0x2000120c
 8008514:	20001210 	.word	0x20001210
 8008518:	200012c0 	.word	0x200012c0
 800851c:	20001220 	.word	0x20001220
 8008520:	08009764 	.word	0x08009764

08008524 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008528:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <vPortSetupTimerInterrupt+0x34>)
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800852e:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <vPortSetupTimerInterrupt+0x38>)
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008534:	4b0a      	ldr	r3, [pc, #40]	@ (8008560 <vPortSetupTimerInterrupt+0x3c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a0a      	ldr	r2, [pc, #40]	@ (8008564 <vPortSetupTimerInterrupt+0x40>)
 800853a:	fba2 2303 	umull	r2, r3, r2, r3
 800853e:	099b      	lsrs	r3, r3, #6
 8008540:	4a09      	ldr	r2, [pc, #36]	@ (8008568 <vPortSetupTimerInterrupt+0x44>)
 8008542:	3b01      	subs	r3, #1
 8008544:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008546:	4b04      	ldr	r3, [pc, #16]	@ (8008558 <vPortSetupTimerInterrupt+0x34>)
 8008548:	2207      	movs	r2, #7
 800854a:	601a      	str	r2, [r3, #0]
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	e000e010 	.word	0xe000e010
 800855c:	e000e018 	.word	0xe000e018
 8008560:	20000000 	.word	0x20000000
 8008564:	10624dd3 	.word	0x10624dd3
 8008568:	e000e014 	.word	0xe000e014

0800856c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8008576:	4b0a      	ldr	r3, [pc, #40]	@ (80085a0 <prvTaskExitError+0x34>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d003      	beq.n	8008588 <prvTaskExitError+0x1c>
 8008580:	f000 f972 	bl	8008868 <ulSetInterruptMask>
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8008588:	f000 f96e 	bl	8008868 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800858c:	bf00      	nop
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0fc      	beq.n	800858e <prvTaskExitError+0x22>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if( configENABLE_FPU == 1 )
	static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
	{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
		#endif /* configENABLE_TRUSTZONE */

		/* CP10 = 11 ==> Full access to FPU i.e. both privileged and
		 * unprivileged code should be able to access FPU. CP11 should be
		 * programmed to the same value as CP10. */
		*( portCPACR ) |=	(	( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80085a8:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <prvSetupFPU+0x28>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a07      	ldr	r2, [pc, #28]	@ (80085cc <prvSetupFPU+0x28>)
 80085ae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085b2:	6013      	str	r3, [r2, #0]
							);

		/* ASPEN = 1 ==> Hardware should automatically preserve floating point
		 * context on exception entry and restore on exception return.
		 * LSPEN = 1 ==> Enable lazy context save of FP state. */
		*( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <prvSetupFPU+0x2c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a05      	ldr	r2, [pc, #20]	@ (80085d0 <prvSetupFPU+0x2c>)
 80085ba:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085be:	6013      	str	r3, [r2, #0]
	}
 80085c0:	bf00      	nop
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	e000ed88 	.word	0xe000ed88
 80085d0:	e000ef34 	.word	0xe000ef34

080085d4 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085d8:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <vPortYield+0x20>)
 80085da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085de:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80085e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80085e4:	f3bf 8f6f 	isb	sy
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80085fc:	f000 f934 	bl	8008868 <ulSetInterruptMask>
	ulCriticalNesting++;
 8008600:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <vPortEnterCritical+0x20>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	4a04      	ldr	r2, [pc, #16]	@ (8008618 <vPortEnterCritical+0x20>)
 8008608:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800860a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800860e:	f3bf 8f6f 	isb	sy
}
 8008612:	bf00      	nop
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	2000000c 	.word	0x2000000c

0800861c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8008620:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <vPortExitCritical+0x30>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <vPortExitCritical+0x14>
 8008628:	f000 f91e 	bl	8008868 <ulSetInterruptMask>
 800862c:	bf00      	nop
 800862e:	e7fd      	b.n	800862c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8008630:	4b06      	ldr	r3, [pc, #24]	@ (800864c <vPortExitCritical+0x30>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3b01      	subs	r3, #1
 8008636:	4a05      	ldr	r2, [pc, #20]	@ (800864c <vPortExitCritical+0x30>)
 8008638:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800863a:	4b04      	ldr	r3, [pc, #16]	@ (800864c <vPortExitCritical+0x30>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <vPortExitCritical+0x2c>
	{
		portENABLE_INTERRUPTS();
 8008642:	2000      	movs	r0, #0
 8008644:	f000 f91d 	bl	8008882 <vClearInterruptMask>
	}
}
 8008648:	bf00      	nop
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000000c 	.word	0x2000000c

08008650 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008656:	f000 f907 	bl	8008868 <ulSetInterruptMask>
 800865a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800865c:	f7fe ff98 	bl	8007590 <xTaskIncrementTick>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008666:	4b05      	ldr	r3, [pc, #20]	@ (800867c <xPortSysTickHandler+0x2c>)
 8008668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800866c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f907 	bl	8008882 <vClearInterruptMask>
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	e000ed04 	.word	0xe000ed04

08008680 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3b02      	subs	r3, #2
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d104      	bne.n	80086a6 <vPortSVCHandler_C+0x26>
			#endif /* configENABLE_TRUSTZONE */

			#if( configENABLE_FPU == 1 )
			{
				/* Setup the Floating Point Unit (FPU). */
				prvSetupFPU();
 800869c:	f7ff ff82 	bl	80085a4 <prvSetupFPU>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 80086a0:	f000 f8b6 	bl	8008810 <vRestoreContextOfFirstTask>
		}
		break;
 80086a4:	e003      	b.n	80086ae <vPortSVCHandler_C+0x2e>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 80086a6:	f000 f8df 	bl	8008868 <ulSetInterruptMask>
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vPortSVCHandler_C+0x2a>
		}
	}
}
 80086ae:	bf00      	nop
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086d2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3b04      	subs	r3, #4
 80086d8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3b04      	subs	r3, #4
 80086e4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e6:	4a38      	ldr	r2, [pc, #224]	@ (80087c8 <pxPortInitialiseStack+0x110>)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3b04      	subs	r3, #4
 80086f0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80086f8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3b04      	subs	r3, #4
 80086fe:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008706:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3b04      	subs	r3, #4
 800870c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008714:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3b04      	subs	r3, #4
 800871a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008722:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b04      	subs	r3, #4
 8008728:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3b04      	subs	r3, #4
 8008734:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800873c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3b04      	subs	r3, #4
 8008742:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800874a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3b04      	subs	r3, #4
 8008750:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008758:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3b04      	subs	r3, #4
 800875e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008766:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b04      	subs	r3, #4
 800876c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008774:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3b04      	subs	r3, #4
 800877a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008782:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3b04      	subs	r3, #4
 8008788:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008790:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b04      	subs	r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800879e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3b04      	subs	r3, #4
 80087a4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 80087ac:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3b04      	subs	r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 80087ba:	68fb      	ldr	r3, [r7, #12]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	0800856d 	.word	0x0800856d

080087cc <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008804 <xPortStartScheduler+0x38>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a0b      	ldr	r2, [pc, #44]	@ (8008804 <xPortStartScheduler+0x38>)
 80087d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087dc:	4b09      	ldr	r3, [pc, #36]	@ (8008804 <xPortStartScheduler+0x38>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a08      	ldr	r2, [pc, #32]	@ (8008804 <xPortStartScheduler+0x38>)
 80087e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e6:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 80087e8:	f7ff fe9c 	bl	8008524 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 80087ec:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <xPortStartScheduler+0x3c>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 80087f2:	f000 f825 	bl	8008840 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 80087f6:	f7fe ff7d 	bl	80076f4 <vTaskSwitchContext>
	prvTaskExitError();
 80087fa:	f7ff feb7 	bl	800856c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed20 	.word	0xe000ed20
 8008808:	2000000c 	.word	0x2000000c
 800880c:	00000000 	.word	0x00000000

08008810 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8008810:	4a07      	ldr	r2, [pc, #28]	@ (8008830 <pxCurrentTCBConst2>)
 8008812:	6811      	ldr	r1, [r2, #0]
 8008814:	6808      	ldr	r0, [r1, #0]
 8008816:	c806      	ldmia	r0!, {r1, r2}
 8008818:	f381 880b 	msr	PSPLIM, r1
 800881c:	2102      	movs	r1, #2
 800881e:	f381 8814 	msr	CONTROL, r1
 8008822:	3020      	adds	r0, #32
 8008824:	f380 8809 	msr	PSP, r0
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	4710      	bx	r2
 800882e:	bf00      	nop

08008830 <pxCurrentTCBConst2>:
 8008830:	20000ce4 	.word	0x20000ce4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
	...

08008840 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8008840:	4807      	ldr	r0, [pc, #28]	@ (8008860 <xVTORConst>)
 8008842:	6800      	ldr	r0, [r0, #0]
 8008844:	6800      	ldr	r0, [r0, #0]
 8008846:	f380 8808 	msr	MSP, r0
 800884a:	b662      	cpsie	i
 800884c:	b661      	cpsie	f
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	df02      	svc	2
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w

08008860 <xVTORConst>:
 8008860:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8008868:	f3ef 8011 	mrs	r0, BASEPRI
 800886c:	f04f 01a0 	mov.w	r1, #160	@ 0xa0
 8008870:	f381 8811 	msr	BASEPRI, r1
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800887e:	bf00      	nop
 8008880:	4618      	mov	r0, r3

08008882 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8008882:	f380 8811 	msr	BASEPRI, r0
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8008890:	bf00      	nop
	...

080088a0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80088a0:	f3ef 8009 	mrs	r0, PSP
 80088a4:	f01e 0f10 	tst.w	lr, #16
 80088a8:	bf08      	it	eq
 80088aa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088ae:	f3ef 820b 	mrs	r2, PSPLIM
 80088b2:	4673      	mov	r3, lr
 80088b4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80088b8:	4a11      	ldr	r2, [pc, #68]	@ (8008900 <pxCurrentTCBConst>)
 80088ba:	6811      	ldr	r1, [r2, #0]
 80088bc:	6008      	str	r0, [r1, #0]
 80088be:	f04f 00a0 	mov.w	r0, #160	@ 0xa0
 80088c2:	f380 8811 	msr	BASEPRI, r0
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f7fe ff11 	bl	80076f4 <vTaskSwitchContext>
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8811 	msr	BASEPRI, r0
 80088da:	4a09      	ldr	r2, [pc, #36]	@ (8008900 <pxCurrentTCBConst>)
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	6808      	ldr	r0, [r1, #0]
 80088e0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80088e4:	f013 0f10 	tst.w	r3, #16
 80088e8:	bf08      	it	eq
 80088ea:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088ee:	f382 880b 	msr	PSPLIM, r2
 80088f2:	f380 8809 	msr	PSP, r0
 80088f6:	4718      	bx	r3
 80088f8:	f3af 8000 	nop.w
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst>:
 8008900:	20000ce4 	.word	0x20000ce4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
	...

08008910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8008910:	f01e 0f04 	tst.w	lr, #4
 8008914:	bf0c      	ite	eq
 8008916:	f3ef 8008 	mrseq	r0, MSP
 800891a:	f3ef 8009 	mrsne	r0, PSP
 800891e:	4904      	ldr	r1, [pc, #16]	@ (8008930 <svchandler_address_const>)
 8008920:	4708      	bx	r1
 8008922:	bf00      	nop
 8008924:	f3af 8000 	nop.w
 8008928:	f3af 8000 	nop.w
 800892c:	f3af 8000 	nop.w

08008930 <svchandler_address_const>:
 8008930:	08008681 	.word	0x08008681
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop

08008938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008944:	f7fe fd78 	bl	8007438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008948:	4b50      	ldr	r3, [pc, #320]	@ (8008a8c <pvPortMalloc+0x154>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008950:	f000 f908 	bl	8008b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008954:	4b4e      	ldr	r3, [pc, #312]	@ (8008a90 <pvPortMalloc+0x158>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8085 	bne.w	8008a6c <pvPortMalloc+0x134>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d016      	beq.n	8008996 <pvPortMalloc+0x5e>
			{
				xWantedSize += xHeapStructSize;
 8008968:	2208      	movs	r2, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <pvPortMalloc+0x5e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <pvPortMalloc+0x5e>
 800898e:	f7ff ff6b 	bl	8008868 <ulSetInterruptMask>
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d067      	beq.n	8008a6c <pvPortMalloc+0x134>
 800899c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a94 <pvPortMalloc+0x15c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d862      	bhi.n	8008a6c <pvPortMalloc+0x134>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089a6:	4b3c      	ldr	r3, [pc, #240]	@ (8008a98 <pvPortMalloc+0x160>)
 80089a8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80089aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008a98 <pvPortMalloc+0x160>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089b0:	e004      	b.n	80089bc <pvPortMalloc+0x84>
				{
					pxPreviousBlock = pxBlock;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d903      	bls.n	80089ce <pvPortMalloc+0x96>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f1      	bne.n	80089b2 <pvPortMalloc+0x7a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ce:	4b2f      	ldr	r3, [pc, #188]	@ (8008a8c <pvPortMalloc+0x154>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d049      	beq.n	8008a6c <pvPortMalloc+0x134>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2208      	movs	r2, #8
 80089de:	4413      	add	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	1ad2      	subs	r2, r2, r3
 80089f2:	2308      	movs	r3, #8
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d918      	bls.n	8008a2c <pvPortMalloc+0xf4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <pvPortMalloc+0xdc>
 8008a0c:	f7ff ff2c 	bl	8008868 <ulSetInterruptMask>
 8008a10:	bf00      	nop
 8008a12:	e7fd      	b.n	8008a10 <pvPortMalloc+0xd8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a26:	68b8      	ldr	r0, [r7, #8]
 8008a28:	f000 f8fe 	bl	8008c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a2c:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <pvPortMalloc+0x15c>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <pvPortMalloc+0x15c>)
 8008a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3a:	4b16      	ldr	r3, [pc, #88]	@ (8008a94 <pvPortMalloc+0x15c>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b17      	ldr	r3, [pc, #92]	@ (8008a9c <pvPortMalloc+0x164>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d203      	bcs.n	8008a4e <pvPortMalloc+0x116>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a46:	4b13      	ldr	r3, [pc, #76]	@ (8008a94 <pvPortMalloc+0x15c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a14      	ldr	r2, [pc, #80]	@ (8008a9c <pvPortMalloc+0x164>)
 8008a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <pvPortMalloc+0x158>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a62:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa0 <pvPortMalloc+0x168>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa0 <pvPortMalloc+0x168>)
 8008a6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a6c:	f7fe fcf2 	bl	8007454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <pvPortMalloc+0x14a>
 8008a7a:	f7ff fef5 	bl	8008868 <ulSetInterruptMask>
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <pvPortMalloc+0x146>
	return pvReturn;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20003318 	.word	0x20003318
 8008a90:	2000332c 	.word	0x2000332c
 8008a94:	2000331c 	.word	0x2000331c
 8008a98:	20003310 	.word	0x20003310
 8008a9c:	20003320 	.word	0x20003320
 8008aa0:	20003324 	.word	0x20003324

08008aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d03f      	beq.n	8008b36 <vPortFree+0x92>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	425b      	negs	r3, r3
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4413      	add	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b40 <vPortFree+0x9c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <vPortFree+0x36>
 8008ad2:	f7ff fec9 	bl	8008868 <ulSetInterruptMask>
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <vPortFree+0x46>
 8008ae2:	f7ff fec1 	bl	8008868 <ulSetInterruptMask>
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <vPortFree+0x42>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	4b14      	ldr	r3, [pc, #80]	@ (8008b40 <vPortFree+0x9c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4013      	ands	r3, r2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01e      	beq.n	8008b36 <vPortFree+0x92>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d11a      	bne.n	8008b36 <vPortFree+0x92>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <vPortFree+0x9c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b10:	f7fe fc92 	bl	8007438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	4b0a      	ldr	r3, [pc, #40]	@ (8008b44 <vPortFree+0xa0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	4a09      	ldr	r2, [pc, #36]	@ (8008b44 <vPortFree+0xa0>)
 8008b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b22:	68b8      	ldr	r0, [r7, #8]
 8008b24:	f000 f880 	bl	8008c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b28:	4b07      	ldr	r3, [pc, #28]	@ (8008b48 <vPortFree+0xa4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	4a06      	ldr	r2, [pc, #24]	@ (8008b48 <vPortFree+0xa4>)
 8008b30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b32:	f7fe fc8f 	bl	8007454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	2000332c 	.word	0x2000332c
 8008b44:	2000331c 	.word	0x2000331c
 8008b48:	20003328 	.word	0x20003328

08008b4c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008b50:	4b03      	ldr	r3, [pc, #12]	@ (8008b60 <xPortGetFreeHeapSize+0x14>)
 8008b52:	681b      	ldr	r3, [r3, #0]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	2000331c 	.word	0x2000331c

08008b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b70:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <prvHeapInit+0xac>)
 8008b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	4a1f      	ldr	r2, [pc, #124]	@ (8008c10 <prvHeapInit+0xac>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <prvHeapInit+0xb0>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c14 <prvHeapInit+0xb0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bce:	4b12      	ldr	r3, [pc, #72]	@ (8008c18 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c18 <prvHeapInit+0xb4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <prvHeapInit+0xb8>)
 8008bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a09      	ldr	r2, [pc, #36]	@ (8008c20 <prvHeapInit+0xbc>)
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bfc:	4b09      	ldr	r3, [pc, #36]	@ (8008c24 <prvHeapInit+0xc0>)
 8008bfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20001310 	.word	0x20001310
 8008c14:	20003310 	.word	0x20003310
 8008c18:	20003318 	.word	0x20003318
 8008c1c:	20003320 	.word	0x20003320
 8008c20:	2000331c 	.word	0x2000331c
 8008c24:	2000332c 	.word	0x2000332c

08008c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c30:	4b28      	ldr	r3, [pc, #160]	@ (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e002      	b.n	8008c3c <prvInsertBlockIntoFreeList+0x14>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d8f7      	bhi.n	8008c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d118      	bne.n	8008cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	@ (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d00d      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e008      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e003      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d002      	beq.n	8008cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20003310 	.word	0x20003310
 8008cd8:	20003318 	.word	0x20003318

08008cdc <siprintf>:
 8008cdc:	b40e      	push	{r1, r2, r3}
 8008cde:	b500      	push	{lr}
 8008ce0:	b09c      	sub	sp, #112	@ 0x70
 8008ce2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ce6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ce8:	9002      	str	r0, [sp, #8]
 8008cea:	9006      	str	r0, [sp, #24]
 8008cec:	9107      	str	r1, [sp, #28]
 8008cee:	9104      	str	r1, [sp, #16]
 8008cf0:	4808      	ldr	r0, [pc, #32]	@ (8008d14 <siprintf+0x38>)
 8008cf2:	4909      	ldr	r1, [pc, #36]	@ (8008d18 <siprintf+0x3c>)
 8008cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf8:	9105      	str	r1, [sp, #20]
 8008cfa:	a902      	add	r1, sp, #8
 8008cfc:	6800      	ldr	r0, [r0, #0]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	f000 f9f8 	bl	80090f4 <_svfiprintf_r>
 8008d04:	9b02      	ldr	r3, [sp, #8]
 8008d06:	2200      	movs	r2, #0
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	b01c      	add	sp, #112	@ 0x70
 8008d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d10:	b003      	add	sp, #12
 8008d12:	4770      	bx	lr
 8008d14:	20000010 	.word	0x20000010
 8008d18:	ffff0208 	.word	0xffff0208

08008d1c <memset>:
 8008d1c:	4402      	add	r2, r0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d100      	bne.n	8008d26 <memset+0xa>
 8008d24:	4770      	bx	lr
 8008d26:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2a:	e7f9      	b.n	8008d20 <memset+0x4>

08008d2c <_reclaim_reent>:
 8008d2c:	4b29      	ldr	r3, [pc, #164]	@ (8008dd4 <_reclaim_reent+0xa8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4283      	cmp	r3, r0
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	4604      	mov	r4, r0
 8008d36:	d04b      	beq.n	8008dd0 <_reclaim_reent+0xa4>
 8008d38:	69c3      	ldr	r3, [r0, #28]
 8008d3a:	b1ab      	cbz	r3, 8008d68 <_reclaim_reent+0x3c>
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	b16b      	cbz	r3, 8008d5c <_reclaim_reent+0x30>
 8008d40:	2500      	movs	r5, #0
 8008d42:	69e3      	ldr	r3, [r4, #28]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	5959      	ldr	r1, [r3, r5]
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	d13b      	bne.n	8008dc4 <_reclaim_reent+0x98>
 8008d4c:	3504      	adds	r5, #4
 8008d4e:	2d80      	cmp	r5, #128	@ 0x80
 8008d50:	d1f7      	bne.n	8008d42 <_reclaim_reent+0x16>
 8008d52:	69e3      	ldr	r3, [r4, #28]
 8008d54:	4620      	mov	r0, r4
 8008d56:	68d9      	ldr	r1, [r3, #12]
 8008d58:	f000 f878 	bl	8008e4c <_free_r>
 8008d5c:	69e3      	ldr	r3, [r4, #28]
 8008d5e:	6819      	ldr	r1, [r3, #0]
 8008d60:	b111      	cbz	r1, 8008d68 <_reclaim_reent+0x3c>
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 f872 	bl	8008e4c <_free_r>
 8008d68:	6961      	ldr	r1, [r4, #20]
 8008d6a:	b111      	cbz	r1, 8008d72 <_reclaim_reent+0x46>
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 f86d 	bl	8008e4c <_free_r>
 8008d72:	69e1      	ldr	r1, [r4, #28]
 8008d74:	b111      	cbz	r1, 8008d7c <_reclaim_reent+0x50>
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 f868 	bl	8008e4c <_free_r>
 8008d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d7e:	b111      	cbz	r1, 8008d86 <_reclaim_reent+0x5a>
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 f863 	bl	8008e4c <_free_r>
 8008d86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d88:	b111      	cbz	r1, 8008d90 <_reclaim_reent+0x64>
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f85e 	bl	8008e4c <_free_r>
 8008d90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d92:	b111      	cbz	r1, 8008d9a <_reclaim_reent+0x6e>
 8008d94:	4620      	mov	r0, r4
 8008d96:	f000 f859 	bl	8008e4c <_free_r>
 8008d9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008d9c:	b111      	cbz	r1, 8008da4 <_reclaim_reent+0x78>
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 f854 	bl	8008e4c <_free_r>
 8008da4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008da6:	b111      	cbz	r1, 8008dae <_reclaim_reent+0x82>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 f84f 	bl	8008e4c <_free_r>
 8008dae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008db0:	b111      	cbz	r1, 8008db8 <_reclaim_reent+0x8c>
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 f84a 	bl	8008e4c <_free_r>
 8008db8:	6a23      	ldr	r3, [r4, #32]
 8008dba:	b14b      	cbz	r3, 8008dd0 <_reclaim_reent+0xa4>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dc2:	4718      	bx	r3
 8008dc4:	680e      	ldr	r6, [r1, #0]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f840 	bl	8008e4c <_free_r>
 8008dcc:	4631      	mov	r1, r6
 8008dce:	e7bb      	b.n	8008d48 <_reclaim_reent+0x1c>
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000010 	.word	0x20000010

08008dd8 <__errno>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	@ (8008de0 <__errno+0x8>)
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000010 	.word	0x20000010

08008de4 <__libc_init_array>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4d0d      	ldr	r5, [pc, #52]	@ (8008e1c <__libc_init_array+0x38>)
 8008de8:	2600      	movs	r6, #0
 8008dea:	4c0d      	ldr	r4, [pc, #52]	@ (8008e20 <__libc_init_array+0x3c>)
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	42a6      	cmp	r6, r4
 8008df2:	d109      	bne.n	8008e08 <__libc_init_array+0x24>
 8008df4:	4d0b      	ldr	r5, [pc, #44]	@ (8008e24 <__libc_init_array+0x40>)
 8008df6:	2600      	movs	r6, #0
 8008df8:	4c0b      	ldr	r4, [pc, #44]	@ (8008e28 <__libc_init_array+0x44>)
 8008dfa:	f000 fc77 	bl	80096ec <_init>
 8008dfe:	1b64      	subs	r4, r4, r5
 8008e00:	10a4      	asrs	r4, r4, #2
 8008e02:	42a6      	cmp	r6, r4
 8008e04:	d105      	bne.n	8008e12 <__libc_init_array+0x2e>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0c:	3601      	adds	r6, #1
 8008e0e:	4798      	blx	r3
 8008e10:	e7ee      	b.n	8008df0 <__libc_init_array+0xc>
 8008e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e16:	3601      	adds	r6, #1
 8008e18:	4798      	blx	r3
 8008e1a:	e7f2      	b.n	8008e02 <__libc_init_array+0x1e>
 8008e1c:	08009828 	.word	0x08009828
 8008e20:	08009828 	.word	0x08009828
 8008e24:	08009828 	.word	0x08009828
 8008e28:	0800982c 	.word	0x0800982c

08008e2c <__retarget_lock_acquire_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_release_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <memcpy>:
 8008e30:	440a      	add	r2, r1
 8008e32:	1e43      	subs	r3, r0, #1
 8008e34:	4291      	cmp	r1, r2
 8008e36:	d100      	bne.n	8008e3a <memcpy+0xa>
 8008e38:	4770      	bx	lr
 8008e3a:	b510      	push	{r4, lr}
 8008e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e40:	4291      	cmp	r1, r2
 8008e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e46:	d1f9      	bne.n	8008e3c <memcpy+0xc>
 8008e48:	bd10      	pop	{r4, pc}
	...

08008e4c <_free_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4605      	mov	r5, r0
 8008e50:	2900      	cmp	r1, #0
 8008e52:	d041      	beq.n	8008ed8 <_free_r+0x8c>
 8008e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e58:	1f0c      	subs	r4, r1, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfb8      	it	lt
 8008e5e:	18e4      	addlt	r4, r4, r3
 8008e60:	f000 f8e0 	bl	8009024 <__malloc_lock>
 8008e64:	4a1d      	ldr	r2, [pc, #116]	@ (8008edc <_free_r+0x90>)
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	b933      	cbnz	r3, 8008e78 <_free_r+0x2c>
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	6014      	str	r4, [r2, #0]
 8008e6e:	4628      	mov	r0, r5
 8008e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e74:	f000 b8dc 	b.w	8009030 <__malloc_unlock>
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d908      	bls.n	8008e8e <_free_r+0x42>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	1821      	adds	r1, r4, r0
 8008e80:	428b      	cmp	r3, r1
 8008e82:	bf01      	itttt	eq
 8008e84:	6819      	ldreq	r1, [r3, #0]
 8008e86:	685b      	ldreq	r3, [r3, #4]
 8008e88:	1809      	addeq	r1, r1, r0
 8008e8a:	6021      	streq	r1, [r4, #0]
 8008e8c:	e7ed      	b.n	8008e6a <_free_r+0x1e>
 8008e8e:	461a      	mov	r2, r3
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	b10b      	cbz	r3, 8008e98 <_free_r+0x4c>
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d9fa      	bls.n	8008e8e <_free_r+0x42>
 8008e98:	6811      	ldr	r1, [r2, #0]
 8008e9a:	1850      	adds	r0, r2, r1
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d10b      	bne.n	8008eb8 <_free_r+0x6c>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	4401      	add	r1, r0
 8008ea4:	1850      	adds	r0, r2, r1
 8008ea6:	6011      	str	r1, [r2, #0]
 8008ea8:	4283      	cmp	r3, r0
 8008eaa:	d1e0      	bne.n	8008e6e <_free_r+0x22>
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4408      	add	r0, r1
 8008eb2:	6053      	str	r3, [r2, #4]
 8008eb4:	6010      	str	r0, [r2, #0]
 8008eb6:	e7da      	b.n	8008e6e <_free_r+0x22>
 8008eb8:	d902      	bls.n	8008ec0 <_free_r+0x74>
 8008eba:	230c      	movs	r3, #12
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	e7d6      	b.n	8008e6e <_free_r+0x22>
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	1821      	adds	r1, r4, r0
 8008ec4:	428b      	cmp	r3, r1
 8008ec6:	bf02      	ittt	eq
 8008ec8:	6819      	ldreq	r1, [r3, #0]
 8008eca:	685b      	ldreq	r3, [r3, #4]
 8008ecc:	1809      	addeq	r1, r1, r0
 8008ece:	6063      	str	r3, [r4, #4]
 8008ed0:	bf08      	it	eq
 8008ed2:	6021      	streq	r1, [r4, #0]
 8008ed4:	6054      	str	r4, [r2, #4]
 8008ed6:	e7ca      	b.n	8008e6e <_free_r+0x22>
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20003474 	.word	0x20003474

08008ee0 <sbrk_aligned>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	4e0f      	ldr	r6, [pc, #60]	@ (8008f20 <sbrk_aligned+0x40>)
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	6831      	ldr	r1, [r6, #0]
 8008eea:	b911      	cbnz	r1, 8008ef2 <sbrk_aligned+0x12>
 8008eec:	f000 fbaa 	bl	8009644 <_sbrk_r>
 8008ef0:	6030      	str	r0, [r6, #0]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f000 fba5 	bl	8009644 <_sbrk_r>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d103      	bne.n	8008f06 <sbrk_aligned+0x26>
 8008efe:	f04f 34ff 	mov.w	r4, #4294967295
 8008f02:	4620      	mov	r0, r4
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	1cc4      	adds	r4, r0, #3
 8008f08:	f024 0403 	bic.w	r4, r4, #3
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d0f8      	beq.n	8008f02 <sbrk_aligned+0x22>
 8008f10:	1a21      	subs	r1, r4, r0
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 fb96 	bl	8009644 <_sbrk_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d1f2      	bne.n	8008f02 <sbrk_aligned+0x22>
 8008f1c:	e7ef      	b.n	8008efe <sbrk_aligned+0x1e>
 8008f1e:	bf00      	nop
 8008f20:	20003470 	.word	0x20003470

08008f24 <_malloc_r>:
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	1ccd      	adds	r5, r1, #3
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	f025 0503 	bic.w	r5, r5, #3
 8008f30:	3508      	adds	r5, #8
 8008f32:	2d0c      	cmp	r5, #12
 8008f34:	bf38      	it	cc
 8008f36:	250c      	movcc	r5, #12
 8008f38:	2d00      	cmp	r5, #0
 8008f3a:	db01      	blt.n	8008f40 <_malloc_r+0x1c>
 8008f3c:	42a9      	cmp	r1, r5
 8008f3e:	d904      	bls.n	8008f4a <_malloc_r+0x26>
 8008f40:	230c      	movs	r3, #12
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	2000      	movs	r0, #0
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009020 <_malloc_r+0xfc>
 8008f4e:	f000 f869 	bl	8009024 <__malloc_lock>
 8008f52:	f8d8 3000 	ldr.w	r3, [r8]
 8008f56:	461c      	mov	r4, r3
 8008f58:	bb44      	cbnz	r4, 8008fac <_malloc_r+0x88>
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff ffbf 	bl	8008ee0 <sbrk_aligned>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	4604      	mov	r4, r0
 8008f66:	d158      	bne.n	800901a <_malloc_r+0xf6>
 8008f68:	f8d8 4000 	ldr.w	r4, [r8]
 8008f6c:	4627      	mov	r7, r4
 8008f6e:	2f00      	cmp	r7, #0
 8008f70:	d143      	bne.n	8008ffa <_malloc_r+0xd6>
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d04b      	beq.n	800900e <_malloc_r+0xea>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4639      	mov	r1, r7
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	eb04 0903 	add.w	r9, r4, r3
 8008f80:	f000 fb60 	bl	8009644 <_sbrk_r>
 8008f84:	4581      	cmp	r9, r0
 8008f86:	d142      	bne.n	800900e <_malloc_r+0xea>
 8008f88:	6821      	ldr	r1, [r4, #0]
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	1a6d      	subs	r5, r5, r1
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7ff ffa6 	bl	8008ee0 <sbrk_aligned>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d03a      	beq.n	800900e <_malloc_r+0xea>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	442b      	add	r3, r5
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	bb62      	cbnz	r2, 8009000 <_malloc_r+0xdc>
 8008fa6:	f8c8 7000 	str.w	r7, [r8]
 8008faa:	e00f      	b.n	8008fcc <_malloc_r+0xa8>
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	1b52      	subs	r2, r2, r5
 8008fb0:	d420      	bmi.n	8008ff4 <_malloc_r+0xd0>
 8008fb2:	2a0b      	cmp	r2, #11
 8008fb4:	d917      	bls.n	8008fe6 <_malloc_r+0xc2>
 8008fb6:	1961      	adds	r1, r4, r5
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	6025      	str	r5, [r4, #0]
 8008fbc:	bf18      	it	ne
 8008fbe:	6059      	strne	r1, [r3, #4]
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	bf08      	it	eq
 8008fc4:	f8c8 1000 	streq.w	r1, [r8]
 8008fc8:	5162      	str	r2, [r4, r5]
 8008fca:	604b      	str	r3, [r1, #4]
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f82f 	bl	8009030 <__malloc_unlock>
 8008fd2:	f104 000b 	add.w	r0, r4, #11
 8008fd6:	1d23      	adds	r3, r4, #4
 8008fd8:	f020 0007 	bic.w	r0, r0, #7
 8008fdc:	1ac2      	subs	r2, r0, r3
 8008fde:	bf1c      	itt	ne
 8008fe0:	1a1b      	subne	r3, r3, r0
 8008fe2:	50a3      	strne	r3, [r4, r2]
 8008fe4:	e7af      	b.n	8008f46 <_malloc_r+0x22>
 8008fe6:	6862      	ldr	r2, [r4, #4]
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	bf0c      	ite	eq
 8008fec:	f8c8 2000 	streq.w	r2, [r8]
 8008ff0:	605a      	strne	r2, [r3, #4]
 8008ff2:	e7eb      	b.n	8008fcc <_malloc_r+0xa8>
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	6864      	ldr	r4, [r4, #4]
 8008ff8:	e7ae      	b.n	8008f58 <_malloc_r+0x34>
 8008ffa:	463c      	mov	r4, r7
 8008ffc:	687f      	ldr	r7, [r7, #4]
 8008ffe:	e7b6      	b.n	8008f6e <_malloc_r+0x4a>
 8009000:	461a      	mov	r2, r3
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	42a3      	cmp	r3, r4
 8009006:	d1fb      	bne.n	8009000 <_malloc_r+0xdc>
 8009008:	2300      	movs	r3, #0
 800900a:	6053      	str	r3, [r2, #4]
 800900c:	e7de      	b.n	8008fcc <_malloc_r+0xa8>
 800900e:	230c      	movs	r3, #12
 8009010:	4630      	mov	r0, r6
 8009012:	6033      	str	r3, [r6, #0]
 8009014:	f000 f80c 	bl	8009030 <__malloc_unlock>
 8009018:	e794      	b.n	8008f44 <_malloc_r+0x20>
 800901a:	6005      	str	r5, [r0, #0]
 800901c:	e7d6      	b.n	8008fcc <_malloc_r+0xa8>
 800901e:	bf00      	nop
 8009020:	20003474 	.word	0x20003474

08009024 <__malloc_lock>:
 8009024:	4801      	ldr	r0, [pc, #4]	@ (800902c <__malloc_lock+0x8>)
 8009026:	f7ff bf01 	b.w	8008e2c <__retarget_lock_acquire_recursive>
 800902a:	bf00      	nop
 800902c:	2000346c 	.word	0x2000346c

08009030 <__malloc_unlock>:
 8009030:	4801      	ldr	r0, [pc, #4]	@ (8009038 <__malloc_unlock+0x8>)
 8009032:	f7ff befc 	b.w	8008e2e <__retarget_lock_release_recursive>
 8009036:	bf00      	nop
 8009038:	2000346c 	.word	0x2000346c

0800903c <__ssputs_r>:
 800903c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	461f      	mov	r7, r3
 8009042:	688e      	ldr	r6, [r1, #8]
 8009044:	4682      	mov	sl, r0
 8009046:	460c      	mov	r4, r1
 8009048:	42be      	cmp	r6, r7
 800904a:	4690      	mov	r8, r2
 800904c:	680b      	ldr	r3, [r1, #0]
 800904e:	d82d      	bhi.n	80090ac <__ssputs_r+0x70>
 8009050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009054:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009058:	d026      	beq.n	80090a8 <__ssputs_r+0x6c>
 800905a:	6965      	ldr	r5, [r4, #20]
 800905c:	6909      	ldr	r1, [r1, #16]
 800905e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009062:	eba3 0901 	sub.w	r9, r3, r1
 8009066:	1c7b      	adds	r3, r7, #1
 8009068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800906c:	444b      	add	r3, r9
 800906e:	106d      	asrs	r5, r5, #1
 8009070:	429d      	cmp	r5, r3
 8009072:	bf38      	it	cc
 8009074:	461d      	movcc	r5, r3
 8009076:	0553      	lsls	r3, r2, #21
 8009078:	d527      	bpl.n	80090ca <__ssputs_r+0x8e>
 800907a:	4629      	mov	r1, r5
 800907c:	f7ff ff52 	bl	8008f24 <_malloc_r>
 8009080:	4606      	mov	r6, r0
 8009082:	b360      	cbz	r0, 80090de <__ssputs_r+0xa2>
 8009084:	464a      	mov	r2, r9
 8009086:	6921      	ldr	r1, [r4, #16]
 8009088:	f7ff fed2 	bl	8008e30 <memcpy>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	6126      	str	r6, [r4, #16]
 800909a:	444e      	add	r6, r9
 800909c:	6165      	str	r5, [r4, #20]
 800909e:	eba5 0509 	sub.w	r5, r5, r9
 80090a2:	6026      	str	r6, [r4, #0]
 80090a4:	463e      	mov	r6, r7
 80090a6:	60a5      	str	r5, [r4, #8]
 80090a8:	42be      	cmp	r6, r7
 80090aa:	d900      	bls.n	80090ae <__ssputs_r+0x72>
 80090ac:	463e      	mov	r6, r7
 80090ae:	4632      	mov	r2, r6
 80090b0:	4641      	mov	r1, r8
 80090b2:	6820      	ldr	r0, [r4, #0]
 80090b4:	f000 faac 	bl	8009610 <memmove>
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	2000      	movs	r0, #0
 80090bc:	1b9b      	subs	r3, r3, r6
 80090be:	60a3      	str	r3, [r4, #8]
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	4433      	add	r3, r6
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ca:	462a      	mov	r2, r5
 80090cc:	f000 fad8 	bl	8009680 <_realloc_r>
 80090d0:	4606      	mov	r6, r0
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d1e0      	bne.n	8009098 <__ssputs_r+0x5c>
 80090d6:	6921      	ldr	r1, [r4, #16]
 80090d8:	4650      	mov	r0, sl
 80090da:	f7ff feb7 	bl	8008e4c <_free_r>
 80090de:	230c      	movs	r3, #12
 80090e0:	f04f 30ff 	mov.w	r0, #4294967295
 80090e4:	f8ca 3000 	str.w	r3, [sl]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ee:	81a3      	strh	r3, [r4, #12]
 80090f0:	e7e9      	b.n	80090c6 <__ssputs_r+0x8a>
	...

080090f4 <_svfiprintf_r>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	4698      	mov	r8, r3
 80090fa:	898b      	ldrh	r3, [r1, #12]
 80090fc:	b09d      	sub	sp, #116	@ 0x74
 80090fe:	4607      	mov	r7, r0
 8009100:	061b      	lsls	r3, r3, #24
 8009102:	460d      	mov	r5, r1
 8009104:	4614      	mov	r4, r2
 8009106:	d510      	bpl.n	800912a <_svfiprintf_r+0x36>
 8009108:	690b      	ldr	r3, [r1, #16]
 800910a:	b973      	cbnz	r3, 800912a <_svfiprintf_r+0x36>
 800910c:	2140      	movs	r1, #64	@ 0x40
 800910e:	f7ff ff09 	bl	8008f24 <_malloc_r>
 8009112:	6028      	str	r0, [r5, #0]
 8009114:	6128      	str	r0, [r5, #16]
 8009116:	b930      	cbnz	r0, 8009126 <_svfiprintf_r+0x32>
 8009118:	230c      	movs	r3, #12
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	b01d      	add	sp, #116	@ 0x74
 8009122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009126:	2340      	movs	r3, #64	@ 0x40
 8009128:	616b      	str	r3, [r5, #20]
 800912a:	2300      	movs	r3, #0
 800912c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009130:	f04f 0901 	mov.w	r9, #1
 8009134:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80092d8 <_svfiprintf_r+0x1e4>
 8009138:	9309      	str	r3, [sp, #36]	@ 0x24
 800913a:	2320      	movs	r3, #32
 800913c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009140:	2330      	movs	r3, #48	@ 0x30
 8009142:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009146:	4623      	mov	r3, r4
 8009148:	469a      	mov	sl, r3
 800914a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800914e:	b10a      	cbz	r2, 8009154 <_svfiprintf_r+0x60>
 8009150:	2a25      	cmp	r2, #37	@ 0x25
 8009152:	d1f9      	bne.n	8009148 <_svfiprintf_r+0x54>
 8009154:	ebba 0b04 	subs.w	fp, sl, r4
 8009158:	d00b      	beq.n	8009172 <_svfiprintf_r+0x7e>
 800915a:	465b      	mov	r3, fp
 800915c:	4622      	mov	r2, r4
 800915e:	4629      	mov	r1, r5
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff ff6b 	bl	800903c <__ssputs_r>
 8009166:	3001      	adds	r0, #1
 8009168:	f000 80a7 	beq.w	80092ba <_svfiprintf_r+0x1c6>
 800916c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800916e:	445a      	add	r2, fp
 8009170:	9209      	str	r2, [sp, #36]	@ 0x24
 8009172:	f89a 3000 	ldrb.w	r3, [sl]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 809f 	beq.w	80092ba <_svfiprintf_r+0x1c6>
 800917c:	2300      	movs	r3, #0
 800917e:	f04f 32ff 	mov.w	r2, #4294967295
 8009182:	f10a 0a01 	add.w	sl, sl, #1
 8009186:	9304      	str	r3, [sp, #16]
 8009188:	9307      	str	r3, [sp, #28]
 800918a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800918e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009194:	4654      	mov	r4, sl
 8009196:	2205      	movs	r2, #5
 8009198:	484f      	ldr	r0, [pc, #316]	@ (80092d8 <_svfiprintf_r+0x1e4>)
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	f000 fa61 	bl	8009664 <memchr>
 80091a2:	9a04      	ldr	r2, [sp, #16]
 80091a4:	b9d8      	cbnz	r0, 80091de <_svfiprintf_r+0xea>
 80091a6:	06d0      	lsls	r0, r2, #27
 80091a8:	bf44      	itt	mi
 80091aa:	2320      	movmi	r3, #32
 80091ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091b0:	0711      	lsls	r1, r2, #28
 80091b2:	bf44      	itt	mi
 80091b4:	232b      	movmi	r3, #43	@ 0x2b
 80091b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ba:	f89a 3000 	ldrb.w	r3, [sl]
 80091be:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c0:	d015      	beq.n	80091ee <_svfiprintf_r+0xfa>
 80091c2:	9a07      	ldr	r2, [sp, #28]
 80091c4:	4654      	mov	r4, sl
 80091c6:	2000      	movs	r0, #0
 80091c8:	f04f 0c0a 	mov.w	ip, #10
 80091cc:	4621      	mov	r1, r4
 80091ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d2:	3b30      	subs	r3, #48	@ 0x30
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	d94b      	bls.n	8009270 <_svfiprintf_r+0x17c>
 80091d8:	b1b0      	cbz	r0, 8009208 <_svfiprintf_r+0x114>
 80091da:	9207      	str	r2, [sp, #28]
 80091dc:	e014      	b.n	8009208 <_svfiprintf_r+0x114>
 80091de:	eba0 0308 	sub.w	r3, r0, r8
 80091e2:	46a2      	mov	sl, r4
 80091e4:	fa09 f303 	lsl.w	r3, r9, r3
 80091e8:	4313      	orrs	r3, r2
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	e7d2      	b.n	8009194 <_svfiprintf_r+0xa0>
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	1d19      	adds	r1, r3, #4
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	9103      	str	r1, [sp, #12]
 80091f8:	bfbb      	ittet	lt
 80091fa:	425b      	neglt	r3, r3
 80091fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009200:	9307      	strge	r3, [sp, #28]
 8009202:	9307      	strlt	r3, [sp, #28]
 8009204:	bfb8      	it	lt
 8009206:	9204      	strlt	r2, [sp, #16]
 8009208:	7823      	ldrb	r3, [r4, #0]
 800920a:	2b2e      	cmp	r3, #46	@ 0x2e
 800920c:	d10a      	bne.n	8009224 <_svfiprintf_r+0x130>
 800920e:	7863      	ldrb	r3, [r4, #1]
 8009210:	2b2a      	cmp	r3, #42	@ 0x2a
 8009212:	d132      	bne.n	800927a <_svfiprintf_r+0x186>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	3402      	adds	r4, #2
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009220:	9203      	str	r2, [sp, #12]
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092e8 <_svfiprintf_r+0x1f4>
 8009228:	2203      	movs	r2, #3
 800922a:	7821      	ldrb	r1, [r4, #0]
 800922c:	4650      	mov	r0, sl
 800922e:	f000 fa19 	bl	8009664 <memchr>
 8009232:	b138      	cbz	r0, 8009244 <_svfiprintf_r+0x150>
 8009234:	eba0 000a 	sub.w	r0, r0, sl
 8009238:	2240      	movs	r2, #64	@ 0x40
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	3401      	adds	r4, #1
 800923e:	4082      	lsls	r2, r0
 8009240:	4313      	orrs	r3, r2
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009248:	2206      	movs	r2, #6
 800924a:	4824      	ldr	r0, [pc, #144]	@ (80092dc <_svfiprintf_r+0x1e8>)
 800924c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009250:	f000 fa08 	bl	8009664 <memchr>
 8009254:	2800      	cmp	r0, #0
 8009256:	d036      	beq.n	80092c6 <_svfiprintf_r+0x1d2>
 8009258:	4b21      	ldr	r3, [pc, #132]	@ (80092e0 <_svfiprintf_r+0x1ec>)
 800925a:	bb1b      	cbnz	r3, 80092a4 <_svfiprintf_r+0x1b0>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	3307      	adds	r3, #7
 8009260:	f023 0307 	bic.w	r3, r3, #7
 8009264:	3308      	adds	r3, #8
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800926a:	4433      	add	r3, r6
 800926c:	9309      	str	r3, [sp, #36]	@ 0x24
 800926e:	e76a      	b.n	8009146 <_svfiprintf_r+0x52>
 8009270:	fb0c 3202 	mla	r2, ip, r2, r3
 8009274:	460c      	mov	r4, r1
 8009276:	2001      	movs	r0, #1
 8009278:	e7a8      	b.n	80091cc <_svfiprintf_r+0xd8>
 800927a:	2300      	movs	r3, #0
 800927c:	3401      	adds	r4, #1
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4619      	mov	r1, r3
 8009284:	9305      	str	r3, [sp, #20]
 8009286:	4620      	mov	r0, r4
 8009288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928c:	3a30      	subs	r2, #48	@ 0x30
 800928e:	2a09      	cmp	r2, #9
 8009290:	d903      	bls.n	800929a <_svfiprintf_r+0x1a6>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0c6      	beq.n	8009224 <_svfiprintf_r+0x130>
 8009296:	9105      	str	r1, [sp, #20]
 8009298:	e7c4      	b.n	8009224 <_svfiprintf_r+0x130>
 800929a:	fb0c 2101 	mla	r1, ip, r1, r2
 800929e:	4604      	mov	r4, r0
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7f0      	b.n	8009286 <_svfiprintf_r+0x192>
 80092a4:	ab03      	add	r3, sp, #12
 80092a6:	462a      	mov	r2, r5
 80092a8:	a904      	add	r1, sp, #16
 80092aa:	4638      	mov	r0, r7
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <_svfiprintf_r+0x1f0>)
 80092b0:	f3af 8000 	nop.w
 80092b4:	1c42      	adds	r2, r0, #1
 80092b6:	4606      	mov	r6, r0
 80092b8:	d1d6      	bne.n	8009268 <_svfiprintf_r+0x174>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	065b      	lsls	r3, r3, #25
 80092be:	f53f af2d 	bmi.w	800911c <_svfiprintf_r+0x28>
 80092c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092c4:	e72c      	b.n	8009120 <_svfiprintf_r+0x2c>
 80092c6:	ab03      	add	r3, sp, #12
 80092c8:	462a      	mov	r2, r5
 80092ca:	a904      	add	r1, sp, #16
 80092cc:	4638      	mov	r0, r7
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <_svfiprintf_r+0x1f0>)
 80092d2:	f000 f87d 	bl	80093d0 <_printf_i>
 80092d6:	e7ed      	b.n	80092b4 <_svfiprintf_r+0x1c0>
 80092d8:	080097ec 	.word	0x080097ec
 80092dc:	080097f6 	.word	0x080097f6
 80092e0:	00000000 	.word	0x00000000
 80092e4:	0800903d 	.word	0x0800903d
 80092e8:	080097f2 	.word	0x080097f2

080092ec <_printf_common>:
 80092ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f0:	4616      	mov	r6, r2
 80092f2:	4698      	mov	r8, r3
 80092f4:	688a      	ldr	r2, [r1, #8]
 80092f6:	4607      	mov	r7, r0
 80092f8:	690b      	ldr	r3, [r1, #16]
 80092fa:	460c      	mov	r4, r1
 80092fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009300:	4293      	cmp	r3, r2
 8009302:	bfb8      	it	lt
 8009304:	4613      	movlt	r3, r2
 8009306:	6033      	str	r3, [r6, #0]
 8009308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800930c:	b10a      	cbz	r2, 8009312 <_printf_common+0x26>
 800930e:	3301      	adds	r3, #1
 8009310:	6033      	str	r3, [r6, #0]
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	0699      	lsls	r1, r3, #26
 8009316:	bf42      	ittt	mi
 8009318:	6833      	ldrmi	r3, [r6, #0]
 800931a:	3302      	addmi	r3, #2
 800931c:	6033      	strmi	r3, [r6, #0]
 800931e:	6825      	ldr	r5, [r4, #0]
 8009320:	f015 0506 	ands.w	r5, r5, #6
 8009324:	d106      	bne.n	8009334 <_printf_common+0x48>
 8009326:	f104 0a19 	add.w	sl, r4, #25
 800932a:	68e3      	ldr	r3, [r4, #12]
 800932c:	6832      	ldr	r2, [r6, #0]
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	42ab      	cmp	r3, r5
 8009332:	dc2b      	bgt.n	800938c <_printf_common+0xa0>
 8009334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009338:	6822      	ldr	r2, [r4, #0]
 800933a:	3b00      	subs	r3, #0
 800933c:	bf18      	it	ne
 800933e:	2301      	movne	r3, #1
 8009340:	0692      	lsls	r2, r2, #26
 8009342:	d430      	bmi.n	80093a6 <_printf_common+0xba>
 8009344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009348:	4641      	mov	r1, r8
 800934a:	4638      	mov	r0, r7
 800934c:	47c8      	blx	r9
 800934e:	3001      	adds	r0, #1
 8009350:	d023      	beq.n	800939a <_printf_common+0xae>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	341a      	adds	r4, #26
 8009356:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800935a:	f003 0306 	and.w	r3, r3, #6
 800935e:	2b04      	cmp	r3, #4
 8009360:	bf0a      	itet	eq
 8009362:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009366:	2500      	movne	r5, #0
 8009368:	6833      	ldreq	r3, [r6, #0]
 800936a:	f04f 0600 	mov.w	r6, #0
 800936e:	bf08      	it	eq
 8009370:	1aed      	subeq	r5, r5, r3
 8009372:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009376:	bf08      	it	eq
 8009378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800937c:	4293      	cmp	r3, r2
 800937e:	bfc4      	itt	gt
 8009380:	1a9b      	subgt	r3, r3, r2
 8009382:	18ed      	addgt	r5, r5, r3
 8009384:	42b5      	cmp	r5, r6
 8009386:	d11a      	bne.n	80093be <_printf_common+0xd2>
 8009388:	2000      	movs	r0, #0
 800938a:	e008      	b.n	800939e <_printf_common+0xb2>
 800938c:	2301      	movs	r3, #1
 800938e:	4652      	mov	r2, sl
 8009390:	4641      	mov	r1, r8
 8009392:	4638      	mov	r0, r7
 8009394:	47c8      	blx	r9
 8009396:	3001      	adds	r0, #1
 8009398:	d103      	bne.n	80093a2 <_printf_common+0xb6>
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a2:	3501      	adds	r5, #1
 80093a4:	e7c1      	b.n	800932a <_printf_common+0x3e>
 80093a6:	18e1      	adds	r1, r4, r3
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	2030      	movs	r0, #48	@ 0x30
 80093ac:	3302      	adds	r3, #2
 80093ae:	4422      	add	r2, r4
 80093b0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093bc:	e7c2      	b.n	8009344 <_printf_common+0x58>
 80093be:	2301      	movs	r3, #1
 80093c0:	4622      	mov	r2, r4
 80093c2:	4641      	mov	r1, r8
 80093c4:	4638      	mov	r0, r7
 80093c6:	47c8      	blx	r9
 80093c8:	3001      	adds	r0, #1
 80093ca:	d0e6      	beq.n	800939a <_printf_common+0xae>
 80093cc:	3601      	adds	r6, #1
 80093ce:	e7d9      	b.n	8009384 <_printf_common+0x98>

080093d0 <_printf_i>:
 80093d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	7e0f      	ldrb	r7, [r1, #24]
 80093d6:	4691      	mov	r9, r2
 80093d8:	4680      	mov	r8, r0
 80093da:	460c      	mov	r4, r1
 80093dc:	2f78      	cmp	r7, #120	@ 0x78
 80093de:	469a      	mov	sl, r3
 80093e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093e6:	d807      	bhi.n	80093f8 <_printf_i+0x28>
 80093e8:	2f62      	cmp	r7, #98	@ 0x62
 80093ea:	d80a      	bhi.n	8009402 <_printf_i+0x32>
 80093ec:	2f00      	cmp	r7, #0
 80093ee:	f000 80d2 	beq.w	8009596 <_printf_i+0x1c6>
 80093f2:	2f58      	cmp	r7, #88	@ 0x58
 80093f4:	f000 80b9 	beq.w	800956a <_printf_i+0x19a>
 80093f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009400:	e03a      	b.n	8009478 <_printf_i+0xa8>
 8009402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009406:	2b15      	cmp	r3, #21
 8009408:	d8f6      	bhi.n	80093f8 <_printf_i+0x28>
 800940a:	a101      	add	r1, pc, #4	@ (adr r1, 8009410 <_printf_i+0x40>)
 800940c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009410:	08009469 	.word	0x08009469
 8009414:	0800947d 	.word	0x0800947d
 8009418:	080093f9 	.word	0x080093f9
 800941c:	080093f9 	.word	0x080093f9
 8009420:	080093f9 	.word	0x080093f9
 8009424:	080093f9 	.word	0x080093f9
 8009428:	0800947d 	.word	0x0800947d
 800942c:	080093f9 	.word	0x080093f9
 8009430:	080093f9 	.word	0x080093f9
 8009434:	080093f9 	.word	0x080093f9
 8009438:	080093f9 	.word	0x080093f9
 800943c:	0800957d 	.word	0x0800957d
 8009440:	080094a7 	.word	0x080094a7
 8009444:	08009537 	.word	0x08009537
 8009448:	080093f9 	.word	0x080093f9
 800944c:	080093f9 	.word	0x080093f9
 8009450:	0800959f 	.word	0x0800959f
 8009454:	080093f9 	.word	0x080093f9
 8009458:	080094a7 	.word	0x080094a7
 800945c:	080093f9 	.word	0x080093f9
 8009460:	080093f9 	.word	0x080093f9
 8009464:	0800953f 	.word	0x0800953f
 8009468:	6833      	ldr	r3, [r6, #0]
 800946a:	1d1a      	adds	r2, r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6032      	str	r2, [r6, #0]
 8009470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009478:	2301      	movs	r3, #1
 800947a:	e09d      	b.n	80095b8 <_printf_i+0x1e8>
 800947c:	6833      	ldr	r3, [r6, #0]
 800947e:	6820      	ldr	r0, [r4, #0]
 8009480:	1d19      	adds	r1, r3, #4
 8009482:	6031      	str	r1, [r6, #0]
 8009484:	0606      	lsls	r6, r0, #24
 8009486:	d501      	bpl.n	800948c <_printf_i+0xbc>
 8009488:	681d      	ldr	r5, [r3, #0]
 800948a:	e003      	b.n	8009494 <_printf_i+0xc4>
 800948c:	0645      	lsls	r5, r0, #25
 800948e:	d5fb      	bpl.n	8009488 <_printf_i+0xb8>
 8009490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009494:	2d00      	cmp	r5, #0
 8009496:	da03      	bge.n	80094a0 <_printf_i+0xd0>
 8009498:	232d      	movs	r3, #45	@ 0x2d
 800949a:	426d      	negs	r5, r5
 800949c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a0:	4859      	ldr	r0, [pc, #356]	@ (8009608 <_printf_i+0x238>)
 80094a2:	230a      	movs	r3, #10
 80094a4:	e011      	b.n	80094ca <_printf_i+0xfa>
 80094a6:	6821      	ldr	r1, [r4, #0]
 80094a8:	6833      	ldr	r3, [r6, #0]
 80094aa:	0608      	lsls	r0, r1, #24
 80094ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80094b0:	d402      	bmi.n	80094b8 <_printf_i+0xe8>
 80094b2:	0649      	lsls	r1, r1, #25
 80094b4:	bf48      	it	mi
 80094b6:	b2ad      	uxthmi	r5, r5
 80094b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	4852      	ldr	r0, [pc, #328]	@ (8009608 <_printf_i+0x238>)
 80094be:	bf14      	ite	ne
 80094c0:	230a      	movne	r3, #10
 80094c2:	2308      	moveq	r3, #8
 80094c4:	2100      	movs	r1, #0
 80094c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094ca:	6866      	ldr	r6, [r4, #4]
 80094cc:	2e00      	cmp	r6, #0
 80094ce:	60a6      	str	r6, [r4, #8]
 80094d0:	bfa2      	ittt	ge
 80094d2:	6821      	ldrge	r1, [r4, #0]
 80094d4:	f021 0104 	bicge.w	r1, r1, #4
 80094d8:	6021      	strge	r1, [r4, #0]
 80094da:	b90d      	cbnz	r5, 80094e0 <_printf_i+0x110>
 80094dc:	2e00      	cmp	r6, #0
 80094de:	d04b      	beq.n	8009578 <_printf_i+0x1a8>
 80094e0:	4616      	mov	r6, r2
 80094e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80094e6:	fb03 5711 	mls	r7, r3, r1, r5
 80094ea:	5dc7      	ldrb	r7, [r0, r7]
 80094ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094f0:	462f      	mov	r7, r5
 80094f2:	460d      	mov	r5, r1
 80094f4:	42bb      	cmp	r3, r7
 80094f6:	d9f4      	bls.n	80094e2 <_printf_i+0x112>
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d10b      	bne.n	8009514 <_printf_i+0x144>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	07df      	lsls	r7, r3, #31
 8009500:	d508      	bpl.n	8009514 <_printf_i+0x144>
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6861      	ldr	r1, [r4, #4]
 8009506:	4299      	cmp	r1, r3
 8009508:	bfde      	ittt	le
 800950a:	2330      	movle	r3, #48	@ 0x30
 800950c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009514:	1b92      	subs	r2, r2, r6
 8009516:	6122      	str	r2, [r4, #16]
 8009518:	464b      	mov	r3, r9
 800951a:	aa03      	add	r2, sp, #12
 800951c:	4621      	mov	r1, r4
 800951e:	4640      	mov	r0, r8
 8009520:	f8cd a000 	str.w	sl, [sp]
 8009524:	f7ff fee2 	bl	80092ec <_printf_common>
 8009528:	3001      	adds	r0, #1
 800952a:	d14a      	bne.n	80095c2 <_printf_i+0x1f2>
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	b004      	add	sp, #16
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f043 0320 	orr.w	r3, r3, #32
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	2778      	movs	r7, #120	@ 0x78
 8009540:	4832      	ldr	r0, [pc, #200]	@ (800960c <_printf_i+0x23c>)
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009548:	061f      	lsls	r7, r3, #24
 800954a:	6831      	ldr	r1, [r6, #0]
 800954c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009550:	d402      	bmi.n	8009558 <_printf_i+0x188>
 8009552:	065f      	lsls	r7, r3, #25
 8009554:	bf48      	it	mi
 8009556:	b2ad      	uxthmi	r5, r5
 8009558:	6031      	str	r1, [r6, #0]
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	bf44      	itt	mi
 800955e:	f043 0320 	orrmi.w	r3, r3, #32
 8009562:	6023      	strmi	r3, [r4, #0]
 8009564:	b11d      	cbz	r5, 800956e <_printf_i+0x19e>
 8009566:	2310      	movs	r3, #16
 8009568:	e7ac      	b.n	80094c4 <_printf_i+0xf4>
 800956a:	4827      	ldr	r0, [pc, #156]	@ (8009608 <_printf_i+0x238>)
 800956c:	e7e9      	b.n	8009542 <_printf_i+0x172>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	f023 0320 	bic.w	r3, r3, #32
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	e7f6      	b.n	8009566 <_printf_i+0x196>
 8009578:	4616      	mov	r6, r2
 800957a:	e7bd      	b.n	80094f8 <_printf_i+0x128>
 800957c:	6833      	ldr	r3, [r6, #0]
 800957e:	6825      	ldr	r5, [r4, #0]
 8009580:	1d18      	adds	r0, r3, #4
 8009582:	6961      	ldr	r1, [r4, #20]
 8009584:	6030      	str	r0, [r6, #0]
 8009586:	062e      	lsls	r6, r5, #24
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	d501      	bpl.n	8009590 <_printf_i+0x1c0>
 800958c:	6019      	str	r1, [r3, #0]
 800958e:	e002      	b.n	8009596 <_printf_i+0x1c6>
 8009590:	0668      	lsls	r0, r5, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0x1bc>
 8009594:	8019      	strh	r1, [r3, #0]
 8009596:	2300      	movs	r3, #0
 8009598:	4616      	mov	r6, r2
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	e7bc      	b.n	8009518 <_printf_i+0x148>
 800959e:	6833      	ldr	r3, [r6, #0]
 80095a0:	2100      	movs	r1, #0
 80095a2:	1d1a      	adds	r2, r3, #4
 80095a4:	6032      	str	r2, [r6, #0]
 80095a6:	681e      	ldr	r6, [r3, #0]
 80095a8:	6862      	ldr	r2, [r4, #4]
 80095aa:	4630      	mov	r0, r6
 80095ac:	f000 f85a 	bl	8009664 <memchr>
 80095b0:	b108      	cbz	r0, 80095b6 <_printf_i+0x1e6>
 80095b2:	1b80      	subs	r0, r0, r6
 80095b4:	6060      	str	r0, [r4, #4]
 80095b6:	6863      	ldr	r3, [r4, #4]
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	2300      	movs	r3, #0
 80095bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095c0:	e7aa      	b.n	8009518 <_printf_i+0x148>
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	4632      	mov	r2, r6
 80095c6:	4649      	mov	r1, r9
 80095c8:	4640      	mov	r0, r8
 80095ca:	47d0      	blx	sl
 80095cc:	3001      	adds	r0, #1
 80095ce:	d0ad      	beq.n	800952c <_printf_i+0x15c>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	079b      	lsls	r3, r3, #30
 80095d4:	d413      	bmi.n	80095fe <_printf_i+0x22e>
 80095d6:	68e0      	ldr	r0, [r4, #12]
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	4298      	cmp	r0, r3
 80095dc:	bfb8      	it	lt
 80095de:	4618      	movlt	r0, r3
 80095e0:	e7a6      	b.n	8009530 <_printf_i+0x160>
 80095e2:	2301      	movs	r3, #1
 80095e4:	4632      	mov	r2, r6
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	47d0      	blx	sl
 80095ec:	3001      	adds	r0, #1
 80095ee:	d09d      	beq.n	800952c <_printf_i+0x15c>
 80095f0:	3501      	adds	r5, #1
 80095f2:	68e3      	ldr	r3, [r4, #12]
 80095f4:	9903      	ldr	r1, [sp, #12]
 80095f6:	1a5b      	subs	r3, r3, r1
 80095f8:	42ab      	cmp	r3, r5
 80095fa:	dcf2      	bgt.n	80095e2 <_printf_i+0x212>
 80095fc:	e7eb      	b.n	80095d6 <_printf_i+0x206>
 80095fe:	2500      	movs	r5, #0
 8009600:	f104 0619 	add.w	r6, r4, #25
 8009604:	e7f5      	b.n	80095f2 <_printf_i+0x222>
 8009606:	bf00      	nop
 8009608:	080097fd 	.word	0x080097fd
 800960c:	0800980e 	.word	0x0800980e

08009610 <memmove>:
 8009610:	4288      	cmp	r0, r1
 8009612:	b510      	push	{r4, lr}
 8009614:	eb01 0402 	add.w	r4, r1, r2
 8009618:	d902      	bls.n	8009620 <memmove+0x10>
 800961a:	4284      	cmp	r4, r0
 800961c:	4623      	mov	r3, r4
 800961e:	d807      	bhi.n	8009630 <memmove+0x20>
 8009620:	1e43      	subs	r3, r0, #1
 8009622:	42a1      	cmp	r1, r4
 8009624:	d008      	beq.n	8009638 <memmove+0x28>
 8009626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800962e:	e7f8      	b.n	8009622 <memmove+0x12>
 8009630:	4402      	add	r2, r0
 8009632:	4601      	mov	r1, r0
 8009634:	428a      	cmp	r2, r1
 8009636:	d100      	bne.n	800963a <memmove+0x2a>
 8009638:	bd10      	pop	{r4, pc}
 800963a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009642:	e7f7      	b.n	8009634 <memmove+0x24>

08009644 <_sbrk_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	2300      	movs	r3, #0
 8009648:	4d05      	ldr	r5, [pc, #20]	@ (8009660 <_sbrk_r+0x1c>)
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f7 fdb8 	bl	80011c4 <_sbrk>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_sbrk_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_sbrk_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20003468 	.word	0x20003468

08009664 <memchr>:
 8009664:	b2c9      	uxtb	r1, r1
 8009666:	4603      	mov	r3, r0
 8009668:	4402      	add	r2, r0
 800966a:	b510      	push	{r4, lr}
 800966c:	4293      	cmp	r3, r2
 800966e:	4618      	mov	r0, r3
 8009670:	d101      	bne.n	8009676 <memchr+0x12>
 8009672:	2000      	movs	r0, #0
 8009674:	e003      	b.n	800967e <memchr+0x1a>
 8009676:	7804      	ldrb	r4, [r0, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	428c      	cmp	r4, r1
 800967c:	d1f6      	bne.n	800966c <memchr+0x8>
 800967e:	bd10      	pop	{r4, pc}

08009680 <_realloc_r>:
 8009680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009684:	4680      	mov	r8, r0
 8009686:	4615      	mov	r5, r2
 8009688:	460c      	mov	r4, r1
 800968a:	b921      	cbnz	r1, 8009696 <_realloc_r+0x16>
 800968c:	4611      	mov	r1, r2
 800968e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	f7ff bc47 	b.w	8008f24 <_malloc_r>
 8009696:	b92a      	cbnz	r2, 80096a4 <_realloc_r+0x24>
 8009698:	f7ff fbd8 	bl	8008e4c <_free_r>
 800969c:	2400      	movs	r4, #0
 800969e:	4620      	mov	r0, r4
 80096a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a4:	f000 f81a 	bl	80096dc <_malloc_usable_size_r>
 80096a8:	4285      	cmp	r5, r0
 80096aa:	4606      	mov	r6, r0
 80096ac:	d802      	bhi.n	80096b4 <_realloc_r+0x34>
 80096ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096b2:	d8f4      	bhi.n	800969e <_realloc_r+0x1e>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff fc34 	bl	8008f24 <_malloc_r>
 80096bc:	4607      	mov	r7, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0ec      	beq.n	800969c <_realloc_r+0x1c>
 80096c2:	42b5      	cmp	r5, r6
 80096c4:	462a      	mov	r2, r5
 80096c6:	4621      	mov	r1, r4
 80096c8:	bf28      	it	cs
 80096ca:	4632      	movcs	r2, r6
 80096cc:	f7ff fbb0 	bl	8008e30 <memcpy>
 80096d0:	4621      	mov	r1, r4
 80096d2:	4640      	mov	r0, r8
 80096d4:	463c      	mov	r4, r7
 80096d6:	f7ff fbb9 	bl	8008e4c <_free_r>
 80096da:	e7e0      	b.n	800969e <_realloc_r+0x1e>

080096dc <_malloc_usable_size_r>:
 80096dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e0:	1f18      	subs	r0, r3, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfbc      	itt	lt
 80096e6:	580b      	ldrlt	r3, [r1, r0]
 80096e8:	18c0      	addlt	r0, r0, r3
 80096ea:	4770      	bx	lr

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
